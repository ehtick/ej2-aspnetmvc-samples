@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule
@using Syncfusion.EJ2.Inputs
@using EJ2MVCSampleBrowser.Controllers.Dialog;
@model UserModel
@{
    Dictionary<string, object> rows = new Dictionary<string, object>();
    rows.Add("rows", "2");
    Dictionary<string, object> resetType = new Dictionary<string, object>();
    resetType.Add("type", "reset");
    Dictionary<string, object> submitType = new Dictionary<string, object>();
    submitType.Add("type", "submit");
    Func<object, object> rteContent =@<div>
    <p>
        The Rich Text Editor component is WYSIWYG ('what you see is what you get') editor that provides the best user experience to create and update the content.
        Users can format their content using standard toolbar commands.
    </p>
    <p><b> Key features:</b></p>
    <ul>
        <li><p> Provides &lt; IFRAME &gt; and &lt; DIV &gt; modes </p></li>
        <li><p> Capable of handling markdown editing.</p></li>
        <li><p> Contains a modular library to load the necessary functionality on demand.</p></li>
        <li><p> Provides a fully customizable toolbar.</p></li>
        <li><p> Provides HTML view to edit the source directly for developers.</p></li>
        <li><p> Supports third - party library integration.</p></li>
        <li><p> Allows preview of modified content before saving it.</p></li>
        <li><p> Handles images, hyperlinks, video, hyperlinks, uploads, etc.</p></li>
        <li><p> Contains undo/redo manager.</p></li>
        <li><p> Creates bulleted and numbered lists.</p></li>
    </ul>
</div>;
    Func<object, object> Content1 = @<div>
        <div class="e-tab-header">
            <div>Grid</div>
            <div>Scheduler</div>
            <div>Chart</div>
            <div>Rich Text Editor</div>
            <div>Forms</div>
        </div>
        <div class="e-content">
            <div>
                @Html.EJS().Grid("DefaultFunctionalities").DataSource((IEnumerable<object>
                    )ViewData["DataSource"]).Columns(col =>
                         {
                    col.Field("OrderID").HeaderText("Order ID").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("120").Add();
                    col.Field("CustomerID").HeaderText("Customer Name").Width("150").Add();
                    col.Field("OrderDate").HeaderText("Order Date").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("130").Format("yMd").Add();
                    col.Field("Freight").HeaderText("Freight").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("120").Format("C2").Add();
                    col.Field("ShippedDate").HeaderText("Shipped Date").Width("140").Format("yMd").Add();
                    col.Field("ShipCountry").HeaderText("Ship Country").Width("150").Add();
                    }).AllowPaging().PageSettings(page => page.PageCount(5).PageSizes(true).PageSize(5)).Render()
            </div>
            <div>
                @Html.EJS().Schedule("schedule").Height("300px").EventSettings(new ScheduleEventSettings { DataSource = ViewData["ScheduleData"] }).Created("scheduleCreated").SelectedDate(new DateTime(DateTime.Now.Year, 1, 10)).Render()
            </div>
            <div>
                @Html.EJS().Chart("chart").ChartArea(area => area.Border(br => br.Color("transparent"))).Series(series =>
                    {
                    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Width(2).XName("xValue")
                    .Marker(mr => mr.Visible(true).Width(10).Height(10)).YName("yValue")
                    .DataSource(ViewData["ChartData"]).Name("Germany").Add();
                    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line)
                    .Width(2).XName("xValue").YName("yValue1")
                    .Marker(mr => mr.Visible(true).Width(10).Height(10))
                    .DataSource(ViewData["ChartData"]).Name("England").Add();


                    }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
                    .MajorGridLines(mg => mg.Width(0))
                    .IntervalType(Syncfusion.EJ2.Charts.IntervalType.Years)
                    .EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).LabelFormat("y")
                    ).PrimaryYAxis(py => py.LabelFormat("{value}%")
                    .RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None)
                    .MajorTickLines(mt => mt.Width(0))
                    .MinorTickLines(mt => mt.Width(0))
                    .LineStyle(ls => ls.Width(0)).Interval(20).Minimum(0).Maximum(100)
                    ).Title("Inflation - Consumer Price").Tooltip(tt => tt.Enable(true)).Load("load").Render()


            </div>
            <div>
                @Html.EJS().RichTextEditor("rte").ContentTemplate(rteContent).Created("rteCreated").Render()
            </div>
            <div>

                @using (Html.BeginForm())
                {
                    @Html.ValidationSummary(true)
                    <div id="formId" class="form-horizontal e-lib e-formvalidator">
                        <div class="content-wrapper">
                            <div class="form-title"><span>Add Customer Details</span></div>
                            <div class="form-group">
                                <div class="e-float-input">
                                    @Html.EJS().TextBoxFor(model => model.UserName).Placeholder("User Name").FloatLabelType(FloatLabelType.Auto).Render()
                                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="e-float-input">
                                    @Html.EJS().DatePickerFor(model => model.DOB).Placeholder("Date of Birth").Render()
                                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="e-float-input">
                                    @Html.EJS().TextBoxFor(model => model.Address).Multiline(true).Placeholder("Address").FloatLabelType(FloatLabelType.Auto).HtmlAttributes(rows).Render()
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="e-float-input">
                                    @Html.EJS().TextBoxFor(model => model.City).Placeholder("City").FloatLabelType(FloatLabelType.Auto).Render()
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="e-float-input">
                                    @Html.EJS().TextBoxFor(model => model.State).Placeholder("State").FloatLabelType(FloatLabelType.Auto).Render()
                                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="e-row">
                                <div style="width: 220px;margin:0px auto;height: 100px;padding-top: 25px;">
                                    <div style="display: inline-block;">
                                        @Html.EJS().Button("validateSubmit").Content("Add Customer").HtmlAttributes(submitType).IsPrimary(true).Render()
                                    </div>
                                    <div style="float: right;">
                                        @Html.EJS().Button("resetbtn").Content("Clear").HtmlAttributes(resetType).Render()
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
</div>;
}
@section ControlsSection{
    <div id="target" class="col-lg-12 control-section">
        @Html.EJS().Button("normalbtn").Content("Open").Render()
        @Html.EJS().Dialog("defaultDialog").Header("Syncfusion Components inside Dialog").Open("dialogOpen").Close("dialogClose").AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.None }).ContentTemplate(@<div>
            @(Html.EJS().Tab("ej2Tab").ContentTemplate(@Content1).Selected("selected")
            .Render())
        </div>).ShowCloseIcon(true).CloseOnEscape(true).Target("#target").Buttons((List<DialogDialogButton>)ViewData["DefaultButtons"]).Created("created").Width("700px").Render()
    </div>
}

@section PreScripts {
    <script>
        var dialogObj, rteObj, scheduleObj;
        function dialogClose() {
            document.getElementById('normalbtn').style.display = 'inline-block';
        }
        function dialogOpen() {
            document.getElementById('normalbtn').style.display = 'none';
        }
        document.getElementById('normalbtn').onclick = function () {
            dialogObj.show();
        };
        function dlgButtonClick() {
            dialogObj.hide();
        }
        function created() {
            dialogObj = this;
        }
        function rteCreated() {
            rteObj = this;
        }
        function scheduleCreated() {
            scheduleObj = this;
        }
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
        function selected(args) {
            if (args.selectedIndex == 3) {
                rteObj.refresh();
            }
            else if (args.selectedIndex == 1) {
                scheduleObj.refresh();
            }
        }
    </script>
}
<style>
    .control-section {
        padding-left: 10px;
    }
    /* custom code start */
    #target {
        height: 100%;
        min-height: 520px;
    }

    @@media screen and (min-width: 150px) and (max-width: 480px) {
        .control-section {
            margin-bottom: 30px;
        }

        .control-wrapper {
            margin-bottom: 0px;
        }
    }

    #defaultDialog {
        top: 0% !important;
    }

    .e-btn-hide {
        display: none;
    }

    .form-title {
        text-align: center;
        padding: 10px;
        font-size: 16px;
        font-weight: 500;
        color: rgba(0, 0, 0, 0.70);
    }

    .e-error,
    .e-float-text {
        font-weight: 500;
    }

    .e-custom-label {
        font-size: 14px;
        font-weight: 500;
        margin-left: 20px;
    }

    #formId {
        padding-top: 10px;
        border: 1px solid #ccc;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);
        border-radius: 5px;
        background: #f9f9f9;
        height: 267px;
        overflow-y: scroll;
    }

    .material3-dark #formId,
    .material-dark #formId,
    .bootstrap5-dark #formId {
        background: #212529;
    }

    .bootstrap-dark #formId {
        background: #1a1a1a;
    }
    .fabric-dark #formId {
        background: #201f1f;
    }
    .tailwind-dark #formId,
    .tailwind3-dark #formId {
        background: #1f2937;
    }
    .fluent-dark #formId,
    .fluent2-dark #formId,
    .fluent2-highcontrast #formId {
        background: #111111;
    }
    .material-dark .form-title,
    .material3-dark .form-title,
    .bootstrap-dark .form-title,
    .fabric-dark .form-title,
    .tailwind-dark .form-title,
    .tailwind3-dark .form-title,
    .bootstrap5-dark .form-title,
    .fluent-dark .form-title,
    .fluent2-dark .form-title,
    .fluent2-highcontrast .form-title {
        color: rgb(249 249 249);
    }

    .highcontrast form,
    .highcontrast .header {
        color: #fff;
        background: #000000;
    }

    .header {
        color: rgba(0, 0, 0, 0.7);
    }

    table,
    td,
    th {
        padding: 3px;
    }

    .form-horizontal .form-group {
        margin-left: 20px;
        margin-right: 20px;
        margin-bottom: 5px;
    }
    /* custom code end */
</style>
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Components inside Dialog in ASP.NET MVC Dialog control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates how to integrate other ASP.NET MVC UI components within the dialog control. In the below example, The dialog component renders with the Grid, Schedule, Chart, Rich Text Editor, Tabs and Form components.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            Since the dialog is container component, you can integrate other ASP.NET MVC UI components within the dialog. The dialog can be rendered with simple plain-text, HTML string, or ASP.NET MVC UI components. In the above sample, we have used major components such as Grid, Schedule, Chart, and Rich Text Editor inside dialog.
        </p>
    </div>
}


@section Title{
                    <title>ASP.NET MVC Dialog Components inside Dialog Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Components inside Dialog in ASP.NET MVC Dialog Control</h1>
                }
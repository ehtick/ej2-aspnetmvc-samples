@using Syncfusion.EJ2
@using Syncfusion.EJ2.Popups

@section ControlsSection{
    <div class="col-lg-8 control-section" id="target">
        @Html.EJS().Button("dialogButton").Content("Open").Render()
        @Html.EJS().Dialog("modal_dialog").AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.None }).IsModal(true).Open("dialogOpen").Close("dialogClose").Header("Software Update").ContentTemplate(@<div>Your current software version is up to date.</div>).CloseOnEscape(true).Width("335px").Created("created").Target("#target").Buttons((List<DialogDialogButton>)ViewData["ModalButton"]).Render()
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="width:60%;">
                        <div style="font-size:13px;">Close on overlay click</div>
                    </td>
                    <td>
                        @Html.EJS().CheckBox("checkbox").Change("onChange").Checked(false).Render()
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}

<style>
    .control-wrapper {
        height: 250px;
        width: 500px;
    }

    /* custom code start */
    #target {
        min-height: 350px;
        min-height: 350px;
    }

    @@media screen and (min-width: 150px) and (max-width: 480px) {
        .control-section {
            margin-bottom: 30px;
        }
    }
    /* custom code end */
</style>

@section PreScripts {
    <script>
        var dialogObj;
        var btnElement = document.getElementById('dialogButton');
        function dialogClose() {
            btnElement.style.display = 'inline-block';
        }
        function dialogOpen() {
            btnElement.style.display = 'none';
        }
        btnElement.onclick = function () {
            dialogObj.show();
        };
        function created() {
            dialogObj = this;
        }
        function onChange(args) {
            if (args.checked) {
                dialogObj.overlayClick = function () {
                    dialogObj.hide();
                };
            }
            else {
                dialogObj.overlayClick = function () {
                    dialogObj.show();
                };
            }
        }
        function dlgButtonClick() {
            dialogObj.hide();
        }
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates the modal behavior of Dialog control.
            Choose "Close on overlay" option from property panel to decide whether the Dialog will be closed on click on the overlay.
            Click on “Open” button to show the Dialog again if it is closed.
        </p>

    </div>
}
@section Description{
    <div id="description">
        <p>
            A modal prevents the access to the parent application, so the user must interact with the Dialog before continuing
            the parent application.
        </p>

    </div>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Modal in ASP.NET MVC Dialog control. Explore here for more details."/>
                }

@*custom code end*@


@section Title{
                    <title>ASP.NET MVC Dialog Modal Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Modal in ASP.NET MVC Dialog Control</h1>
                }
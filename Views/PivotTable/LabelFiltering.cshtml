@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@using Syncfusion.EJ2.Inputs
@using Syncfusion.EJ2.DropDowns
@section Meta{
    <meta name="description" content="This example demonstrates the Label Filtering in ASP.NET MVC Pivot Table control. Explore here for more details."/>
}
@section ControlsSection{

    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().PivotView("pivotview").Width("100%").Height("300").DataSourceSettings(dataSourceSettings => dataSourceSettings.DataSource((IEnumerable<object>
                )ViewData["Data"]).ExpandAll(false).AllowLabelFilter(true)
                .FormatSettings(formatsettings =>
                {
                formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add();
                })
                .Rows(rows =>
                {
                rows.Name("Country").Add();
                rows.Name("Products").Add();
                })
                .Columns(columns =>
                {
                columns.Name("Year").Add();
                })
                .Values(values =>
                {
                values.Name("In_Stock").Caption("In Stock").Add();
                values.Name("Sold").Caption("Units Sold").Add();
                values.Name("Amount").Caption("Sold Amount").Add();
                })
                .Filters(filters =>
                {
                filters.Name("Product_Categories").Caption("Product Categories").Add();
                })).GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).DataBound("onDataBound").Render()
        </div>
    </div>
    <div class="col-lg-4 property-section pivottable-property-section">
        <table id="property" title="Properties" style="width: 100%;height:100%;">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div>
                            Fields:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div>
                            @Html.EJS().DropDownList("fields").Index(0).DataSource((IEnumerable<object>)ViewData["filterFields"]).Width("100%"
                            ).Change("fieldsChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            Condition:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div class="conditionscls">
                            @Html.EJS().DropDownList("conditions").DataSource((IEnumerable<object>)ViewData["filterOperators"]).Value("DoesNotEquals"
                            ).Change("conditionsChange").Render()
                        </div>
                    </td>
                </tr>
                <tr class="input1cls" style="height: 50px">
                    <td>
                        <div>
                            Value 1:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div class="value1cls">
                            @Html.EJS().TextBox("value1").Width("100%").Value("").Placeholder("Example: 'Germany'").Render()
                        </div>
                    </td>
                </tr>
                <tr class="input2cls" style="height: 50px; display: none">
                    <td>
                        <div>
                            Value 2:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div class="value2cls">
                            @Html.EJS().TextBox("value2").Width("100%").Value("").Placeholder("Example: 'States'").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td colspan="2">
                        <div style="float:right;margin-right: 4px">
                            @Html.EJS().Button("clear").Content("Clear").Render()
                        </div>
                        <div style="float:right;margin-right: 4px">
                            @Html.EJS().Button("apply-btn").Content("Apply").IsPrimary(true).Disabled(true).Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #pivotview {
            width: 100%;
            height: 100%;
        }
        .pivottable-property-section table tr td:first-child {
            width: 20%;
        }
        .pivottable-property-section {
            overflow: auto;
        }
        .sb-sample-content-area {
            min-height: 255px !important;
        }
        .control-section {
            min-height: 255px !important;
        }
    </style>
    <script>
        var isInitialRender = true;
        var fieldCollections = {};
        var operators = ['Equals', 'DoesNotEquals', 'BeginWith', 'DoesNotBeginWith', 'EndsWith',
            'DoesNotEndsWith', 'Contains', 'DoesNotContains', 'GreaterThan',
            'GreaterThanOrEqualTo', 'LessThan', 'LessThanOrEqualTo', 'Between', 'NotBetween'];
        var fields = ['Country', 'Products', 'Year'];
        function fieldsChange(args) {
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            if (fieldCollections[args.value]) {
                operatorddl.value = fieldCollections[args.value].condition;
                valueInput1.value = fieldCollections[args.value].value1;
                valueInput2.value = fieldCollections[args.value].value2;
            }
            else {
                setFilters(args.value, 'DoesNotEquals', '', '');
                operatorddl.value = 'DoesNotEquals';
                valueInput1.value = '';
                valueInput2.value = '';
            }
            updateButtonState();
        }
        function conditionsChange(args) {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            if (args.value === 'Between' || args.value === 'NotBetween') {
                document.querySelector('.input2cls').style.display = '';
            }
            else {
                document.querySelector('.input2cls').style.display = 'none';
            }
            setFilters(fieldsddl.value, args.value, valueInput1.value, valueInput2.value);
            updateButtonState();
        }
        document.getElementById('value1').onkeyup = (e) => {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            setFilters(fieldsddl.value, operatorddl.value, valueInput1.inputPreviousValue, valueInput2.inputPreviousValue);
            updateButtonState();
        }
        document.getElementById('value2').onkeyup = (e) => {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            setFilters(fieldsddl.value, operatorddl.value, valueInput1.inputPreviousValue, valueInput2.inputPreviousValue);
            updateButtonState();
        }
        function onDataBound() {
            fieldCollections = {};
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            for (var i = 0, filters = pivotObj.dataSourceSettings.filterSettings; i < filters.length; i++) {
                var field = filters[i];
                fieldCollections[field.name] = field;
            }
            if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
                pivotObj.layoutRefresh();
                isInitialRender = false;
            }
        }
        function setFilters(fieldName, condition, operand1, operand2) {
            fieldCollections[fieldName] = {
                name: fieldName,
                type: 'Label',
                condition: condition,
                value1: operand1,
                value2: operand2
            };
        }
        function updateButtonState() {
            var applyBtn = document.getElementById('apply-btn').ej2_instances[0];
            applyBtn.disabled = true;
            for (var i = 0, fields_1 = fields; i < fields_1.length; i++) {
                var field = fields_1[i];
                if (fieldCollections[field] && (fieldCollections[field].value1 !== '' || fieldCollections[field].value2 !== '')) {
                    applyBtn.disabled = false;
                    break;
                }
            }
        }
        document.getElementById('apply-btn').onclick = function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            var filterOptions = [];
            for (var i = 0, fields_2 = fields; i < fields_2.length; i++) {
                var field = fields_2[i];
                if (fieldCollections[field] && fieldCollections[field].value1 !== '') {
                    filterOptions.push(fieldCollections[field]);
                }
            }
            if (filterOptions.length === 0) {
                filterOptions = [{
                    name: fieldsddl.value,
                    type: 'Label',
                    condition: operatorddl.value,
                    value1: valueInput1.value.toString(),
                    value2: valueInput2.value.toString()
                }];
            }
            pivotObj.dataSourceSettings.filterSettings = filterOptions;
        }
        document.getElementById('clear').onclick = function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            pivotObj.dataSourceSettings.filterSettings = [];
            valueInput1.value = '';
            valueInput2.value = '';
            fieldCollections = {};
            updateButtonState();
        }
        document.addEventListener('DOMContentLoaded', function () {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            fieldsddl.dataSource = fields;
            operatorddl.dataSource = operators;
        });
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates filtering row and column headers based on their text. The different conditions that can be applied to the text are equals, begins with, ends with, contains, etc.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>In this sample, any field can be selected from the
            <b>Fields </b> dropdown list. Further, choose an option from the
            <b>Conditions</b> dropdown list, enter the values in
            <b>Value1</b> and
            <b>Value2</b> input textbox and apply the same to view the field headers filtered based on the text.
        </p>
        <p>
            Label filtering can be applied either through code-behind or UI. To achieve this in code-behind, use the
            <code>filterSettings</code> object in the pivot table along with the following properties.
        </p>
        <table>
            <tr>
                <td style="vertical-align: top;padding: 10px 0;width: 100px">
                    <code>name :</code>
                </td>
                <td>Specifies the normal field.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>type :</code>
                </td>
                <td>Specifies the filter type and it should be "Label" in this scenario.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>condition :</code>
                </td>
                <td>Specifies the operator type like equals, greater than, less than, etc.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>value1 :</code>
                </td>
                <td> Gets the text to view the filter result. For example, select "DoesNotEquals" and enter "Germany" to exclude this country.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>value2 :</code>
                </td>
                <td>For conditions like "between" and "not between", this option will be enabled. Enter both start and end text to view the filter result. For example, enter "Germany" and "States" to filter the countries within this range.</td>
            </tr>
        </table>
        <br />
        <p>
            To achieve label filtering through UI, navigate to
            <b>"User Interaction > Field List"</b> sample and open the filter dialog to experience the same.
            For API details, refer to the
            <b>"Field List"</b> sample description.
        </p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Pivot Table Label Filtering Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Label Filtering in ASP.NET MVC Pivot Table Control</h1>
                }
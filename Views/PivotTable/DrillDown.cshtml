@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@using Syncfusion.EJ2.DropDowns
@section Meta{
                    <meta name="description" content="This example demonstrates the Drill Down in ASP.NET MVC Pivot Table control. Explore here for more details."/>
                }
@section ControlsSection{

<div class="col-lg-8 control-section" style="overflow:auto">
    <div class="content-wrapper">
        @Html.EJS().PivotView("pivotview").Width("100%").Height("300").DataSourceSettings(dataSourceSettings =>
        dataSourceSettings.DataSource((IEnumerable<object>)ViewData["Data"]).ExpandAll(false)
        .FormatSettings(formatsettings =>
        {
        formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add();
        })
        .Rows(rows =>
        {
        rows.Name("Country").ExpandAll(true).Add();
        rows.Name("Products").Add();
        })
        .Columns(columns =>
        {
        columns.Name("Year").DataType("string").Add();
        columns.Name("Order_Source").Caption("Order Source").Add();
        })
        .Values(values =>
        {
        values.Name("In_Stock").Caption("In Stock").Add();
        values.Name("Sold").Caption("Units Sold").Add();
        values.Name("Amount").Caption("Sold Amount").Add();
        })
        .Filters(filters =>
        {
        filters.Name("Product_Categories").Caption("Product Categories").Add();
        })
        ).GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).DataBound("onDataBound").Render()
    </div>
</div>
<div class="col-lg-4 property-section pivot-property-section">
    <table id="property" title="Properties" style="width: 100%;height:100%;">
        <tbody>
             <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Drill Down:
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("expandall").Width("100%").Index(0).DataSource((IEnumerable<object>)ViewData["drillDownOptions"]).Change("onOptionChange"
                        ).Value("rowHeaders").Fields(new DropDownListFieldSettings { Text = "text", Value = "value" }).Render()
                    </div>
                </td>
            </tr>
            <tr  class="field_cls" style="height: 50px; display: none">
                <td>
                    <div class="hdrlabel">Fields:
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().MultiSelect("expand-fields").DataSource((IEnumerable<Object>)ViewData["drillDownFields"]).Mode(VisualMode.CheckBox).ShowDropDownIcon(true
                        ).Enabled(true).ShowClearButton(false).EnableSelectionOrder(false).Fields(new MultiSelectFieldSettings { Text = "Field" }).Select("onFieldSelect"
                        ).Removed("onFieldRemoved").Placeholder("Select headers").Render()
                    </div>
                </td>
            </tr>
            <tr  class="field_cls_1" style="height: 50px; display: none">
                <td>
                    <div class="hdrlabel">Fields:
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("expand-fields-1").Width("100%").Index(0).DataSource((IEnumerable<object>)ViewData["drillDownFields"]).Change("multiFieldChange"
                        ).Value("Country").Fields(new DropDownListFieldSettings { Text = "Field" }).Placeholder("Select field").Render()
                    </div>
                </td>
            </tr>
            <tr  class="members_cls" style="height: 50px; display: none">
                <td>
                    <div class="hdrlabel">Headers:
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().MultiSelect("expand-members").DataSource((IEnumerable<Object>)ViewData["drillDownValues"]).Mode(VisualMode.CheckBox).ShowDropDownIcon(true
                        ).ShowClearButton(false).EnableSelectionOrder(false).Fields(new MultiSelectFieldSettings { Text = "Member" }).Select("onSelect"
                        ).Removed("onRemoved").Open("onOpen").Placeholder("Select headers").Render()
                    </div>
                </td>
            </tr>
            <tr class="apply_cls" style="height: 50px; display: none">
                <td></td>
                <td>
                    <div style="float:right">
                        @Html.EJS().Button("apply-btn").Content("Apply").IsPrimary(true).Render()
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    .e-multiselect.e-input-group {
        padding: 0px !important;
    }

    .pivot-property-section table tr td:first-child {
        width: 20%;
    }
</style>
<script>
    var isInitialRender = true;
    var isInitial = true;
    var fieldCollections = {};
    var storeMembers = { 'Country': [], 'Year': [] };
    var values = [];
    var isRowSelect = false;
    var isColumnSelect = false;
    var options = [
        { value: 'allHeaders', text: 'All headers' },
        { value: 'rowHeaders', text: 'Row headers' },
        { value: 'columnHeader', text: 'Column headers' },
        { value: 'specificFields', text: 'Specific fields' },
        { value: 'specificHeaders', text: 'Specific headers' }
    ];
    var fields = [
        { Field: 'Country', expandAll: false },
        { Field: 'Year', expandAll: false }
    ];
    function onDataBound(args) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        if (isInitial) {
            /** To fill the members for each fields into the object fieldCollections. */
            var fieldCnt = fields.length - 1;
            while (fieldCnt > -1) {
                var members = Object.keys(pivotObj.engineModule.fieldList[fields[fieldCnt].Field].members);
                var memberCnt = members.length;
                var membersCollection = [];
                for (var i = 0; i < memberCnt; i++) {
                    membersCollection.push({ Member: members[i], Checked: members[i] + '_' + false });
                }
                fieldCollections[fields[fieldCnt].Field] = membersCollection;
                fieldCnt--;
            }
            values = fieldCollections[fields[0].Field];
            membersOrder.dataSource = values;
            membersOrder.dataBind();
            fieldsddl.dataBind();
            isInitial = false;
        }
        if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
            pivotObj.layoutRefresh();
            isInitialRender = false;
        }
    }
    function onOptionChange(args) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        document.querySelector('.field_cls').style.display = 'none';
        document.querySelector('.field_cls_1').style.display = 'none';
        document.querySelector('.members_cls').style.display = 'none';
        document.querySelector('.apply_cls').style.display = 'none';
        if (args.value == 'allHeaders') {
            clear();
            pivotObj.setProperties({ dataSourceSettings: { expandAll: true, drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            pivotObj.refreshData();
        } else if (args.value == 'rowHeaders') {
            clear();
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, true, false);
        } else if (args.value == 'columnHeader') {
            clear();
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, false, true);
        } else if (args.value == 'specificFields') {
            document.querySelector('.field_cls').style.display = '';
        } else if (args.value == 'specificHeaders') {
            document.querySelector('.field_cls_1').style.display = '';
            document.querySelector('.members_cls').style.display = '';
            document.querySelector('.apply_cls').style.display = '';
        }
    }
    function multiFieldChange(args) {
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        var field1 = document.getElementById('expand-fields-1').ej2_instances[0];
        membersOrder.dataSource = fieldCollections[args.itemData.Field.toString()];
        membersOrder.value = getSelectedMembers(args.itemData.Field.toString());
        membersOrder.dataBind();
        field1.dataBind();
    }
    function onFieldSelect(args) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var optionsdll = document.getElementById('expandall').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        membersOrder.value = [];
        if (storeMembers.Country.length > 0 || storeMembers.Year.length > 0) {
            storeMembers = { 'Country': [], 'Year': [] };
            isInitial = true;
        }
        if (args.itemData.Field === 'Country') {
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, true, isColumnSelect);
            isRowSelect = true;
        }
        else if (args.itemData.Field === 'Year') {
            pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: [] }, { name: 'Year', items: [] }] } }, true);
            updateRowColumn(false, isRowSelect, true);
            isColumnSelect = true;
        }
    }
    function onFieldRemoved(args) {
        if (args.itemData.Field === 'Country') {
            updateRowColumn(false, false, isColumnSelect);
            isRowSelect = false;
        }
        else if (args.itemData.Field === 'Year') {
            updateRowColumn(false, isRowSelect, false);
            isColumnSelect = false;
        }
    }
    function onSelect(args) {
        var field1 = document.getElementById('expand-fields-1').ej2_instances[0];
        var applyBtn = document.getElementById('apply-btn').ej2_instances[0];
        setMemberCheckedState(field1.itemData.Field, args.item.textContent, args.item.textContent + '_' + true);
        applyBtn.disabled = false;
        storeMembers[field1.itemData.Field].push(args.itemData.Member);
    }
    function onRemoved(args) {
        var field1 = document.getElementById('expand-fields-1').ej2_instances[0];
        setMemberCheckedState(field1.itemData.Field, args.item.textContent, args.item.textContent + '_' + false);
        index = storeMembers[field1.itemData.Field].indexOf(args.itemData.Member);
        if (storeMembers[field1.itemData.Field].includes(args.itemData.Member)) {
            storeMembers[field1.itemData.Field].splice(index, 1);
        }
    }
    function onOpen(args) {
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var optionsdll = document.getElementById('expandall').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        if (args.popup.element.querySelector(".e-filter-parent")) {
            args.popup.element.querySelector(".e-filter-parent").style.display = 'none';
        }
    }
    function onOrderChange(args) {
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var optionsdll = document.getElementById('expandall').ej2_instances[0];
        if (args.value === 'Ascending') {
            fieldsddl.dataSource[fieldsddl.index].Order = fieldsddl.dataSource[fieldsddl.index].Field + '_asc';
        }
        else {
            fieldsddl.dataSource[fieldsddl.index].Order = fieldsddl.dataSource[fieldsddl.index].Field + '_desc';
        }
        fieldsddl.refresh();
    }
    /** To set the checked status of the members maintained in the object fieldCollections. */
    function setMemberCheckedState(field, member, checkedState) {
        var members = fieldCollections[field];
        var membersLength = members.length - 1;
        while (membersLength > -1) {
            if (members[membersLength].Member === member) {
                members[membersLength].Checked = checkedState;
                break;
            }
            membersLength--;
        }
    }

    /** To get the checked members/status here as string array. */
    function getSelectedMembers(field) {
        var membersColls = [];
        var members = fieldCollections[field];
        var membersLength = members.length - 1;
        while (membersLength > -1) {
            if (members[membersLength].Checked === members[membersLength].Member + '_' + true) {
                membersColls.push(members[membersLength].Member.toString());
            }
            membersLength--;
        }
        return membersColls;
    }

    function updateRowColumn(isExpand, isRowExpand, isColumnExpand) {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        pivotObj.setProperties({
            dataSourceSettings: {
                expandAll: isExpand, rows: [
                    { name: 'Country', expandAll: fieldsddl.dataSource[0].expandAll = isRowExpand },
                    { name: 'Products' }
                ], columns: [
                    { name: 'Year', expandAll: fieldsddl.dataSource[1].expandAll = isColumnExpand },
                    { name: 'Order_Source' }
                ]
            }
        }, true);
        pivotObj.refreshData();
    }

    function clear() {
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        var membersOrder = document.getElementById('expand-members').ej2_instances[0];
        fieldsddl.value = [];
        isRowSelect = false;
        isColumnSelect = false;
        membersOrder.value = [];
        if (storeMembers.Country.length > 0 || storeMembers.Year.length > 0) {
            storeMembers = { 'Country': [], 'Year': [] };
            isInitial = true;
        }
    }
    document.getElementById('apply-btn').onclick = function () {
        var pivotObj = document.getElementById('pivotview').ej2_instances[0];
        var fieldsddl = document.getElementById('expand-fields').ej2_instances[0];
        fieldsddl.value = [];
        isRowSelect = false;
        isColumnSelect = false;
        pivotObj.setProperties({ dataSourceSettings: { drilledMembers: [{ name: 'Country', items: storeMembers.Country }, { name: 'Year', items: storeMembers.Year }] } }, true);
        updateRowColumn(false, false, false);
    };
</script>
}

@section PreScripts {
<script>
    ej.base.enableRipple(false);
</script>
}

@section ActionDescription{
<div id="action-description">
    <p>This sample demonstrates how to drill down on all headers, column headers only, row headers only, specific field(s), and specific member(s) within the specific field(s).</p>
</div>
}

@section Description{
<div id="description">
        <p>In this sample, drill down can be performed based on the option selected from the <b>Drill Down</b> dropdown list. The available options are described in detail below.</p>
    <table>
        <tr>
            <td style="vertical-align: top;padding: 10px 0;width: 150px">
                <code>All headers :</code>
            </td>
            
            <td style="padding-top: 10px;">Allows to expand all headers of row and column axes in the pivot table. 
                It can be achieved by setting the <code>expandAll</code> property to <b>true</b> in the <code>dataSourceSettings</code>.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Row headers :</code>
            </td>
            <td style="padding-top: 2px;">Allows to expand all row headers in the pivot table. 
                It can be achieved by setting the <code>expandAll</code> property to <b>true</b> for row fields only.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Column headers :</code>
            </td>
            <td style="padding-top: 2px;">Allows to expand all column headers in the pivot table. 
                It can be achieved by setting the <code>expandAll</code> property to <b>true</b> for column fields only.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Specific fields :</code>
            </td>
            <td style="padding-top: 3px;">Allows to expand specific field(s) in the pivot table's row or column axes. 
                It can be achieved by setting the <code>expandAll</code> property for the relevant field(s) in the row and column axes to <b>true</b>.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Specific headers :</code>
            </td>
            <td style="padding-top: 3px;">Allows to expand specific header(s) within the respective field available in the pivot table's row or column axes.
                 It can be achieved by specifying the respective field name and its member(s), aka header name(s), inside the <code>drilledMembers</code> property in the <code>dataSourceSettings</code>.</td>
        </tr>
    </table>
</div>
}

@section Title{
                    <title>ASP.NET MVC Pivot Table Drill Down Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Drill Down in ASP.NET MVC Pivot Table Control</h1>
                }
@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@section Meta{
                    <meta name="description" content="This example demonstrates the Conditional Formatting in ASP.NET MVC Pivot Table control. Explore here for more details."/>
                }
@section ControlsSection{

    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @Html.EJS().PivotView("pivotview").Width("100%").Height("300").DataSourceSettings(dataSourceSettings => dataSourceSettings.DataSource((IEnumerable<object>)ViewData["Data"]).ExpandAll(false).EnableSorting(true)
           .DrilledMembers(drilledmembers =>
           {
               drilledmembers.Name("Country").Items((string[])ViewData["drilledMembers"]).Add();
           })
           .Rows(rows =>
           {
               rows.Name("Country").Add();
               rows.Name("Products").Add();
           })
           .Columns(columns =>
           {
               columns.Name("Year").Add();
               columns.Name("Order_Source").Caption("Order Source").Add();
           })
           .Values(values =>
           {
               values.Name("In_Stock").Caption("In Stock").Add();
               values.Name("Sold").Caption("Units Sold").Add();
           })
           .Filters(filters =>
           {
               filters.Name("Product_Categories").Caption("Product Categories").Add();
           })
           .ConditionalFormatSettings( format =>
           {
               format.Conditions(Condition.LessThan).Measure("In_Stock").Value1(5000).Style( style => { style.BackgroundColor("#80cbc4").Color("black").FontFamily("Tahoma").FontSize("12px"); }).Add();
               format.Conditions(Condition.Between).Measure("Sold").Value1(3400).Value2(40000).Style(style => { style.BackgroundColor("#f48fb1").Color("black").FontFamily("Tahoma").FontSize("12px"); }).Add();
           })
           ).GridSettings(new PivotViewGridSettings { ColumnWidth = 100 }).AllowConditionalFormatting(true).ShowFieldList(true).DataBound("dataBound").Render()
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                 <tr style="height: 50px">
                     <td>
                         @Html.EJS().Button("conditional-formatting-btn").Content("APPLY FORMAT").IsPrimary(true).Render()
                     </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        @Html.EJS().Button("conditional-formatting-reset-btn").Content("RESET ALL").IsPrimary(true).Render()
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #pivotview {
            width: 100%;
            height: 100%;
        }
        #conditional-formatting-btn, #conditional-formatting-reset-btn {
            width: 80%;
            margin-left: 20px;
        }
        .e-control.e-btn.e-lib.e-small.e-round.e-format-condition-button.e-icon-btn.e-flat {
        padding: 0 0 4px 0 !important;
    }
    </style>
    <script>
        var isInitialRender = true;
        document.getElementById("conditional-formatting-btn").addEventListener('click', function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            pivotObj.conditionalFormattingModule.showConditionalFormattingDialog();
        });
        document.getElementById("conditional-formatting-reset-btn").addEventListener('click', function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            if (pivotObj.dataSourceSettings.conditionalFormatSettings.length > 0) {
                pivotObj.setProperties({ dataSourceSettings: { conditionalFormatSettings: [] } }, true);
                pivotObj.renderPivotGrid();
            }
            pivotObj.conditionalFormattingModule.destroy();
            document.getElementById('conditional-formatting-reset-btn').blur();
        });
        
        function dataBound() {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
                pivotObj.layoutRefresh();
                isInitialRender = false;
            }
        }
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
   <div id="action-description">
        <p>This sample demonstrates formatting the appearance of pivot table cells with user-defined styles based on applied conditions. The <b>Conditional Formatting</b> dialog is invoked to add conditions and styles for the conditions. The formatting can be added, removed, and reset dynamically as well.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>Conditional formatting works only for cells with values,
            allowing the users to change its appearance such as background color, font color, font family, and font size
            based on specific conditions.
            Conditional formatting can be applied either through UI or code behind. To enable this option in UI, set
            <code>allowConditionalFormatting</code> to true and invoke
            <code>showConditionalFormattingDialog</code> method to view the UI.
            To achieve this in code-behind, set
            <code>allowConditionalFormatting</code> to true and use the
            <code>conditionalFormatSettings</code> object in the pivot table along with the following properties.
            Both options are enabled in this sample.</p>
        <table>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>Measure :</code>
                </td>
                <td>Specifies the value field name for which style will be applied.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>Condition :</code>
                </td>
                <td>Specifies the operator type like equals, greater than, less than, etc.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>Value1 :</code>
                </td>
                <td>Specifies the start value.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>Value2 :</code>
                </td>
                <td>Specifies the end value.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>Style :</code>
                </td>
                <td>Specifies the style for the cell.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>ApplyGrandTotals :</code>
                </td>
                <td>Enabled by default. Allows conditional formatting to be applied to row and column grand totals.</td>
            </tr>
        </table>
        <br />
        <p>Also, user can clear the entire style applied for the value cell using reset all option.</p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Pivot Table Conditional Formatting Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Conditional Formatting in ASP.NET MVC Pivot Table Control</h1>
                }
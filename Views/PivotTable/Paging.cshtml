@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@section Meta{
<meta name="description"
    content="This example demonstrates the Paging in ASP.NET MVC Pivot Table control. Explore here for more details." />
}
@section ControlsSection{

<div class="col-lg-9 control-section" style="overflow:auto;">
    <div class="content-wrapper">
        @Html.EJS().PivotView("PivotView").Width("100%").Height("600").EnablePaging(true).DataSourceSettings(dataSourceSettings => dataSourceSettings.DataSource(dataManger =>
        {
            dataManger.Url("https://ej2services.syncfusion.com/aspnet/development/api/order").CrossDomain(true).Adaptor("WebApiAdaptor");
        }).ExpandAll(true).Columns(columns =>
        {
            columns.Name("ProductName").Caption("Product Name").Add();
        }).Rows(rows =>
        {
            rows.Name("ShipCountry").Caption("Ship Country").Add();
            rows.Name("ShipCity").Caption("Ship City").Add();
        }).Values(values =>
        {
            values.Name("Quantity").Add();
            values.Name("UnitPrice").Caption("Unit Price").Add();
        }).FormatSettings(formatsettings =>
        {
            formatsettings.Name("UnitPrice").Format("C0").Add();
        })).PageSettings(pageSettings => pageSettings.ColumnPageSize(5).RowPageSize(10).CurrentColumnPage(1).CurrentRowPage(1)
        ).PagerSettings(pagerSettings => pagerSettings.Position(PagerPosition.Bottom).EnableCompactView(false).ShowRowPager(true).ShowColumnPager(true)
        ).GridSettings(new PivotViewGridSettings { ColumnWidth = 120 }).DataBound("dataBound").Render()
    </div>
</div>

<div class="col-lg-3 property-section pivot-property-section">
    <table id="property" title="Properties" style="width: 100%;height:100%;" class="pivot-property-panel-table">
        <tbody>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Pager Position
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("Pager_Position").Index(1).DataSource((IEnumerable<object>)ViewData["pagerPositions"]
                        ).Change("onDropDownChange").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Show Pager
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("Pager_View").Index(2).DataSource((IEnumerable<object>)ViewData["pagerViewData"]
                        ).Change("onDropDownChange").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Show Page Size
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("Page_Size").Index(2).DataSource((IEnumerable<object>)ViewData["pageSizes"]
                        ).Change("onDropDownChange").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Compact View
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().CheckBox("Compact_View").Change("onCheckBoxChange").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="hdrlabel">Inverse Pager
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().CheckBox("Inverse").Change("onCheckBoxChange").Render()
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<style>
    .sb-sample-content-area {
        min-height: 255px !important;
    }

    .control-section {
        min-height: 255px !important;
    }

    #PivotViewcontainerwrapper {
        height: auto !important;
    }

    .e-bigger .e-float-input.e-control-wrapper {
        width: 100% !important;
    }

    .pivot-property-panel-table div {
        padding: 0;
    }

    .pivot-property-panel-table {
        margin-left: 10px;
    }
</style>
<script>
    var isInitialRender = true;
    function dataBound() {
        var pivotObj = document.getElementById('PivotView').ej2_instances[0];
        if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
            pivotObj.layoutRefresh();
            isInitialRender = false;
        }
    }
    function onDropDownChange(args) {
        var pivotObj = document.getElementById('PivotView').ej2_instances[0];
        if (args.element.id === 'Pager_Position') {
            pivotObj.pagerSettings.position = args.value;
        } else if (args.element.id === 'Pager_View') {
            if (args.value === 'Row') {
                pivotObj.pagerSettings.showRowPager = true;
                pivotObj.pagerSettings.showColumnPager = false;
            } else if (args.value === 'Column') {
                pivotObj.pagerSettings.showRowPager = false;
                pivotObj.pagerSettings.showColumnPager = true;
            } else {
                pivotObj.pagerSettings.showRowPager = pivotObj.pagerSettings.showColumnPager = true;
            }
        } else {
            if (args.value === 'Row') {
                pivotObj.pagerSettings.showRowPageSize = true;
                pivotObj.pagerSettings.showColumnPageSize = false;
            } else if (args.value === 'Column') {
                pivotObj.pagerSettings.showRowPageSize = false;
                pivotObj.pagerSettings.showColumnPageSize = true;
            } else if (args.value === 'Both') {
                pivotObj.pagerSettings.showRowPageSize = pivotObj.pagerSettings.showColumnPageSize = true;
            } else {
                pivotObj.pagerSettings.showRowPageSize = pivotObj.pagerSettings.showColumnPageSize = false;
            }
        }
    }
    function onCheckBoxChange(args) {
        var pivotObj = document.getElementById('PivotView').ej2_instances[0];
        if (this.element.id === 'Compact_View') {
            pivotObj.pagerSettings.enableCompactView = args.checked;
        } else {
            pivotObj.pagerSettings.isInversed = args.checked;
        }
    }
</script>
}

@section PreScripts {
<script>
    ej.base.enableRipple(false);
</script>
}

@section ActionDescription{
<div id="action-description">
    <p>This sample shows how to use the paging option to break and load a large data source into chunks and display them
        page by page. You can also use the built-in navigation buttons to move between pages.
    </p>
</div>
}

@section Description{
<div id="description">
    <p>The pivot table provides an optimized way to render rows and columns page by page without displaying the entire
        pivot data. To enable paging, set the <code>EnablePaging</code> property to <b>true</b>. You can also configure
        page information for
        row and column, such as page size, current page, and so on, using the <code>PageSettings</code>. The
        <code>PageSettings</code>
        properties are explained in-detail below:
    </p>
    <table>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>CurrentRowPage :</code>
            </td>
            <td>Holds the current page number, row-wise. You can also change the page number at runtime.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 10px 0;width: 180px;">
                <code>CurrentColumnPage :</code>
            </td>
            <td>Holds the current page number, column-wise. You can also change the page number at runtime.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>RowPageSize :</code>
            </td>
            <td>Indicates the number of records to be displayed in each page, row-wise. You can also change the page
                size at runtime.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>ColumnPageSize :</code>
            </td>
            <td>Indicates the number of records to be displayed in each page, column-wise. You can also change the page
                size at runtime.</td>
        </tr>
    </table>
    <br />
    <p>Also, you can customize the paging UI by changing the position, visibility, page size, and other settings for
        row and column using the <code>PagerSettings</code>. The <code>PagerSettings</code> properties are explained
        in-detail below:
    </p>
    <table>
        <tr>
            <td style="vertical-align: top;padding: 10px 0;width: 180px;">
                <code>Position :</code>
            </td>
            <td>Display the pager UI either at top or bottom of the Pivot Table.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>IsInversed :</code>
            </td>
            <td>Toggle and display the row and column pagers.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>ShowRowPager :</code>
            </td>
            <td>Show or hide the row pager in the pager UI.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>ShowColumnPager :</code>
            </td>
            <td>Show or hide the column pager in the pager UI.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>ShowRowPageSize :</code>
            </td>
            <td>Show or hide the pre-defined page sizes in the row pager UI.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>ShowColumnPageSize :</code>
            </td>
            <td>Show or hide the pre-defined page sizes in the column pager UI.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>RowPageSizes :</code>
            </td>
            <td>Allows you to assign a set of pre-defined page sizes in the pager UI's "Rows per page" dropdown, which
                can be used to change the number of records displayed in row at runtime.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>ColumnPageSizes :</code>
            </td>
            <td>Allows you to assign a set of pre-defined page sizes in the pager UI's "Columns per page" dropdown,
                which can be used to change the number of records displayed in column at runtime.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>EnableCompactView :</code>
            </td>
            <td>Allows the paging UI to be displayed with minimal design by hiding all paging information except
                navigation options.</td>
        </tr>
        <tr>
            <td style="vertical-align: top;padding: 4px 0;">
                <code>Template :</code>
            </td>
            <td>Allows you to change the appearance of the pager UI by displaying user-defined HTML elements instead of
                built-in HTML elements.</td>
        </tr>
    </table>
</div>
}

@section Title{
<title>ASP.NET MVC Pivot Table Paging Example - Syncfusion Demos </title>
}
@section Header{
<h1 class='sb-sample-text'>Example of Paging in ASP.NET MVC Pivot Table Control</h1>
}

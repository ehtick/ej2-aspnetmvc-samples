@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@using Syncfusion.EJ2.DropDowns
@section Meta{
                    <meta name="description" content="This example demonstrates the Value Filtering in ASP.NET MVC Pivot Table control. Explore here for more details."/>
                }
@section ControlsSection{

    <div class="col-lg-8 control-section" style="overflow:auto">
        <div class="content-wrapper">
            @Html.EJS().PivotView("pivotview").Width("100%").Height("300").DataSourceSettings(dataSourceSettings => dataSourceSettings.DataSource((IEnumerable<object>
                )ViewData["Data"]).ExpandAll(false).AllowValueFilter(true)
                .FormatSettings(formatsettings =>
                {
                formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add();
                })
                .Rows(rows =>
                {
                rows.Name("Country").Add();
                rows.Name("Products").Add();
                })
                .Columns(columns =>
                {
                columns.Name("Year").Add();
                })
                .Values(values =>
                {
                values.Name("In_Stock").Caption("In Stock").Add();
                values.Name("Sold").Caption("Units Sold").Add();
                values.Name("Amount").Caption("Sold Amount").Add();
                })
                .Filters(filters =>
                {
                filters.Name("Product_Categories").Caption("Product Categories").Add();
                })).GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).DataBound("onDataBound").Render()
        </div>
    </div>
    <div class="col-lg-4 property-section pivottable-property-section">
        <table id="property" title="Properties" style="width: 100%;height:100%;">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div>
                            Fields:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div>
                            @Html.EJS().DropDownList("fields").Index(0).DataSource((IEnumerable<object>)ViewData["filterFields"]
                            ).Change("fieldsChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            Measures:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div>
                            @Html.EJS().DropDownList("measures").Width("100%").DataSource((IEnumerable<object>)ViewData["filterMeasures"]
                            ).Value("In_Stock").Change("measuresChange").Fields(new DropDownListFieldSettings { Text = "text", Value = "value" }).Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div>
                            Condition:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div class="conditionscls">
                            @Html.EJS().DropDownList("conditions").Width("100%").DataSource((IEnumerable<object>)ViewData["filterOperators"]
                            ).Change("conditionsChange").Value("DoesNotEquals").Render()
                        </div>
                    </td>
                </tr>
                <tr class="input1cls" style="height: 50px">
                    <td>
                        <div>
                            Value 1:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div class="value1cls">
                            @Html.EJS().NumericTextBox("value1").Value(0).Width("100%").Placeholder("Example: 9590").Change("value1Change").Render()
                        </div>
                    </td>
                </tr>
                <tr class="input2cls" style="height: 50px; display: none">
                    <td>
                        <div>
                            Value 2:
                        </div>
                    </td>
                    <td style="padding-bottom: 16px">
                        <div class="value2cls">
                            @Html.EJS().NumericTextBox("value2").Value(0).Width("100%").Placeholder("Example: 17500").Change("value2Change").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td colspan="2">
                        <div style="float:right;margin-right: 4px">
                            @Html.EJS().Button("clear").Content("Clear").Render()
                        </div>
                        <div style="float:right;margin-right: 4px">
                            @Html.EJS().Button("apply-btn").Content("Apply").IsPrimary(true).Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #pivotview {
            width: 100%;
            height: 100%;
        }
        .pivottable-property-section table tr td:first-child {
            width: 20%;
        }
        .pivottable-property-section {
            overflow: auto;
        }
        .sb-sample-content-area {
            min-height: 255px !important;
        }
        .control-section {
            min-height: 255px !important;
        }
    </style>
    <script>
        var fieldCollections = {};
        var isInitialRender = true;
        var operators = ['Equals', 'DoesNotEquals', 'GreaterThan', 'GreaterThanOrEqualTo',
            'LessThan', 'LessThanOrEqualTo', 'Between', 'NotBetween'];
        var fields = ['Country', 'Products', 'Year'];
        var measures = [
            { value: 'In_Stock', text: 'In Stock' },
            { value: 'Sold', text: 'Units Sold' },
            { value: 'Amount', text: 'Sold Amount' }
        ];
        function fieldsChange(args) {
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            if (fieldCollections[args.value]) {
                measuresddl.value = fieldCollections[args.value].measure;
                operatorddl.value = fieldCollections[args.value].condition;
            }
            else {
                setFilters(args.value, 'In_Stock', 'DoesNotEquals', null, null);
                operatorddl.value = 'DoesNotEquals';
                measuresddl.value = 'In_Stock';
            }
        }
        function measuresChange(args) {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            setFilters(fieldsddl.value, args.value, operatorddl.value, valueInput1.value, valueInput2.value);
        }
        function conditionsChange(args) {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            if (args.value === 'Between' || args.value === 'NotBetween') {
                document.querySelector('.input2cls').style.display = '';
            }
            else {
                document.querySelector('.input2cls').style.display = 'none';
            }
            setFilters(fieldsddl.value, measuresddl.value, args.value, valueInput1.value, valueInput2.value);
        }
        function value1Change() {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            setFilters(fieldsddl.value, measuresddl.value, operatorddl.value, valueInput1.value, valueInput2.value);
        }
        function value2Change() {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            setFilters(fieldsddl.value, measuresddl.value, operatorddl.value, valueInput1.value, valueInput2.value);
        }
        function onDataBound() {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            fieldCollections = {};
            for (var i = 0, filters = pivotObj.dataSourceSettings.filterSettings; i < filters.length; i++) {
                var field = filters[i];
                fieldCollections[field.name] = field;
            }
            if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
                pivotObj.layoutRefresh();
                isInitialRender = false;
            }
        }
        function setFilters(fieldName, measureName, condition, operand1, operand2) {
            fieldCollections[fieldName] = {
                name: fieldName,
                type: 'Value',
                condition: condition,
                measure: measureName,
                value1: operand1,
                value2: operand2
            };
        }
        document.getElementById('apply-btn').onclick = function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            var filterOptions = [];
            filterOptions = [{
                name: fieldsddl.value,
                type: 'Value',
                measure: measuresddl.value,
                condition: operatorddl.value,
                value1: valueInput1.value === null ? 1 : valueInput1.value,
                value2: valueInput2.value === null ? 1 : valueInput2.value
            }];
            pivotObj.dataSourceSettings.filterSettings = filterOptions;
        }
        document.addEventListener('DOMContentLoaded', function () {
            var fieldsddl = document.getElementById('fields').ej2_instances[0];
            var measuresddl = document.getElementById('measures').ej2_instances[0];
            var operatorddl = document.getElementById('conditions').ej2_instances[0];
            fieldsddl.dataSource = fields;
            measuresddl.dataSource = measures;
            operatorddl.dataSource = operators;
        });
        document.getElementById('clear').onclick = function () {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var valueInput1 = document.getElementById('value1').ej2_instances[0];
            var valueInput2 = document.getElementById('value2').ej2_instances[0];
            pivotObj.dataSourceSettings.filterSettings = [];
            valueInput1.value = '0';
            valueInput2.value = '0';
        };
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates filtering row and column headers based on a specific measure and the grand total. The different conditions that can be applied to the grand total are equals, less than, greater than, between, etc.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this sample, any field can be selected from the
            <b>Fields</b> dropdown list along with value field from
            <b>Measures</b> dropdown list to filter. Further, choose an option from the
            <b>Conditions</b> dropdown list, enter the values in
            <b>Value1</b> and
            <b>Value2</b> input textbox and apply the same to view the field headers filtered based on the grand total.
        </p>
        <p>
            Value filtering can be applied either through code-behind or UI. To achieve this in code-behind, use the
            <code>filterSettings</code> object in the pivot table along with the following properties.
        </p>
        <table>
            <tr>
                <td style="vertical-align: top;padding: 10px 0;width:100px">
                    <code>name :</code>
                </td>
                <td>Specifies the normal field.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>type :</code>
                </td>
                <td>Specifies the filter type and it should be "Value" in this scenario.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>measure :</code>
                </td>
                <td>Specifies the value based field.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>condition :</code>
                </td>
                <td>Specifies the operator type like equals, greater than, less than, etc.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>value1 :</code>
                </td>
                <td>Gets the value to view the filter result. For example, select "DoesNotEquals" and enter "9590" to exclude the grand total with this value.</td>
            </tr>
            <tr>
                <td style="vertical-align: top;padding: 4px 0;">
                    <code>value2 :</code>
                </td>
                <td>For conditions like "between" and "not between", this option will be enabled. Enter both start and end value to view the filter result. For example, enter "9590" and "17500" to filter the grand totals within this range.</td>
            </tr>
        </table>
        <br />
        <p>
            To achieve value filtering through UI, navigate to
            <b>"User Interaction > Field List"</b> sample and open the filter dialog.
            For API details, refer to the
            <b>"Field List"</b> sample description.
        </p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Pivot Table Value Filtering Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Value Filtering in ASP.NET MVC Pivot Table Control</h1>
                }
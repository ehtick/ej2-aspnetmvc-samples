@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView

@section Meta{
            <meta name="description" content="This example demonstrates the LiveData in ASP.NET MVC Pivot Table control. Explore here for more details."/>
                }
@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            <div style="margin-bottom: 10px">
                <h4 style="display: inline-block; font-size: 14px; padding-left: 5px">
                    <strong>Feed Delay(ms)</strong>:
                </h4>
                    @Html.EJS().NumericTextBox("feeddelay").Width("150px").Format("N0").Min(5000).Step(1000).Value(5000).Render()
                    @Html.EJS().Button("update1").Content("Start Updating...").CssClass("update-btn").Render()
                    @Html.EJS().Button("clear").Content("Stop Updating...").CssClass("update-btn").Render()
            </div>
            @Html.EJS().PivotView("PivotView-LiveData").Width("100%").Height("350").Load("onLoad").DataSourceSettings(dataSourceSettings => dataSourceSettings.ExpandAll(false).EnableSorting(true).ShowGrandTotals(false).ShowSubTotals(false).EmptyCellsTextContent("Revising")
            .FormatSettings(formatsettings =>
            {
                formatsettings.Name("Price").Format("C2").Add();
                formatsettings.Name("Open Price").Format("C2").Add();
                formatsettings.Name("Change").Format("###.##'%'").Add();
                formatsettings.Name("Volume").Format("N0").Add();
            })
            .SortSettings(sortSettings =>
            {
                sortSettings.Name("Type").Order(Sorting.Ascending).MembersOrder(ViewData["sortSettings"]).Add();
            })
            .Rows(rows =>
            {
                rows.Name("Country").Add();
            })
            .Columns(columns =>
            {
                columns.Name("Type").Add();
            })
            .Filters(filters =>
            {
                filters.Name("Category").Add();
            })
            .Values(values =>
            {
                values.Name("Volume").Caption("Volume").Add();
                values.Name("Price").Caption("Price").Add();
                values.Name("Change").Type(Syncfusion.EJ2.PivotView.SummaryTypes.Avg).Caption("Change(%)").Add();
            })
            ).DisplayOption(new PivotViewDisplayOption
            {
                View = View.Both
            }).ChartSettings(chartSettings => chartSettings.ChartSeries(chartSeries => chartSeries.Type(ChartSeriesType.Column)).Value("Price").Load("chartOnLoad")
                .LegendSettings(legendSettings => legendSettings.Visible(false))
                .ZoomSettings(zoomSettings => zoomSettings.EnableScrollbar(false).ToolbarItems("@(new string[]{})").EnableSelectionZooming(false))
            ).GridSettings(gridSettings => gridSettings.ColumnWidth(100)).CellTemplate("${getCellContent(data)}").DataBound("dataBound").Render()
        </div>
    </div>

    <style>
        .e-pivotview {
            width: 100%;
            height: 100%;
        }

        .sb-sample-content-area {
            min-height: 255px !important;
        }

        .control-section {
            min-height: 255px !important;
        }

        #feeddelay {
            margin-left: 7px;
        }

        #PivotView-LiveData_chart {
            margin-top: 15px;
        }

        .bg-fade {
            background-color: #FFEBE9 !important;
            color: #FF3740 !important;
        }

        .bg-fade1 {
            background-color: #DFFFE2 !important;
            color: #00A653 !important;
        }

        .bg-fade2 {
            color: rgba(0, 0, 0, 0.87);
        }

        .update-btn {
           margin-left: 10px;
        }

        /* Mobile mode */
        @@media only screen and (max-width: 688px) {
        .update-btn {
           margin: 10px 10px 0 0;
         }
        }
    </style>
    <script>
        var timerID;
        var initial = true;
        var isInitialRender = true;
        var previousPivotValues;
        var colourScheme = ['bg-fade', 'bg-fade1', 'bg-fade2'];
        var REGIONS = [
            {
                "Region": "North America",
                "Countries": ["Canada", "United States", "Mexico"]
            },
            {
                "Region": "Middle East",
                "Countries": ["Turkey", "Saudi Arabia"]
            },
            {
                "Region": "Europe",
                "Countries": ["Russia", "Germany", "France", "United Kingdom", "Italy"]
            },
            {
                "Region": "Africa",
                "Countries": ["South Africa"]
            },
            {
                "Region": "Asia Pacific",
                "Countries": ["Australia", "China", "India", "Indonesia",
                    "Japan", "South Korea"]
            },
            {
                "Region": "South America",
                "Countries": ["Brazil"]
            },
        ];
        var DATA = [
            {
                "Category": "Agriculture",
                "Type": "Corn",
                "Spread": 0.01,
                "Open Price": 379.50,
                "Price": 379.8026,
                "Buy": 379.7976,
                "Sell": 379.8076,
                "Change": 0.3026,
                "Change(%)": 0.0797,
                "Volume": 11266
            },
            {
                "Category": "Agriculture",
                "Type": "Rice",
                "Spread": 0.01,
                "Open Price": 11.245,
                "Price": 10.4154,
                "Buy": 10.4104,
                "Sell": 10.4204,
                "Change": -0.8296,
                "Change(%)": -7.3779,
                "Volume": 220
            },
            {
                "Category": "Agriculture",
                "Type": "Wheat",
                "Spread": 0.01,
                "Open Price": 465.50,
                "Price": 465.52,
                "Buy": 465.50,
                "Sell": 465.50,
                "Change": 0.02,
                "Change(%)": 0.0043,
                "Volume": 4318
            },
            {
                "Category": "Agriculture",
                "Type": "Soybean",
                "Spread": 0.01,
                "Open Price": 1038.00,
                "Price": 1038.6171,
                "Buy": 1038.6121,
                "Sell": 1038.6221,
                "Change": 0.6171,
                "Change(%)": 0.0595,
                "Volume": 20356
            },
            {
                "Category": "Agriculture",
                "Type": "Coffee",
                "Spread": 0.01,
                "Open Price": 125.70,
                "Price": 125.69,
                "Buy": 125.70,
                "Sell": 125.70,
                "Change": -0.01,
                "Change(%)": -0.008,
                "Volume": 1654
            },
            {
                "Category": "Agriculture",
                "Type": "Cocoa",
                "Spread": 0.01,
                "Open Price": 307.00,
                "Price": 307.03,
                "Buy": 307.00,
                "Sell": 307.00,
                "Change": 0.03,
                "Change(%)": 0.001,
                "Volume": 978
            },
        ];
        var generateData = function () {
            const count = 1000;
            const currData = [];
            var j = 0;
            for (var i = 0; i < count; i++) {
                const rand = Math.floor(Math.random() * Math.floor(DATA.length));
                const region = REGIONS[j];
                for (var k = 0; k < region.Countries.length; k++) {
                    const data = Object.assign({}, DATA[rand]);
                    const dataObj = {
                        ...data,
                        Region: region.Region,
                        Country: region.Countries[k]
                    };
                    randomizeObjectData(dataObj);
                    currData.push(dataObj);
                }
                j++;
                j = j > 5 ? 0 : j;
            }
            return currData;
        }
        function dataBound() {
            var pivotObj = document.getElementById('PivotView-LiveData').ej2_instances[0];
            if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
                pivotObj.layoutRefresh();
                isInitialRender = false;
            }
        }
        function onLoad() {
            var pivotObj = document.getElementById('PivotView-LiveData').ej2_instances[0];
            pivotObj.dataSourceSettings.dataSource = generateData();
            this.on('data-ready', () => {
                if (initial) {
                    document.getElementById('update1')?.click();
                    initial = false;
                    var feedDelayInput = document.getElementById("feeddelay").ej2_instances[0];
                    var updateButton = document.getElementById("update1").ej2_instances[0];
                    feedDelayInput.element.addEventListener('keypress', (e) => {
                        if (e && e.key === 'Enter' && feedDelayInput.element.parentElement.classList.contains('e-input-focus')) {
                            feedDelayInput.value = parseInt(feedDelayInput.element.value);
                            feedDelayInput.focusOut();
                            updateButton.element.click();
                        }
                    });
                }
            });
            this.on('destroy', function () {
                if (timerID) {
                    clearInterval(timerID);
                    timerID = undefined;
                }
            });
        }
        function randomizeObjectData(dataObj) {
            const changeP = "Change(%)";
            const res = generateNewPrice(dataObj.Price, dataObj.Volume);
            dataObj.Change = res.Price - dataObj.Price;
            dataObj.Price = res.Price;
            dataObj[changeP] = res.ChangePercent;
            dataObj.Volume = res.Volume;
        }
        function generateNewPrice(oldPrice, oldVolume) {
            var rnd = Math.random();
            rnd = Math.round(rnd * 100) / 100;
            const volatility = 15;
            var newPrice = 0;
            var newVolume = 0;
            var changePercent = 2 * volatility * rnd;
            if (changePercent > volatility) {
                changePercent -= (2 * volatility);
            }
            var changeVolumnPercent = 2 * (volatility - 5) * rnd;
            if (changeVolumnPercent > (volatility - 5)) {
                changeVolumnPercent -= (2 * (volatility - 5));
            }
            var changeAmount = oldPrice * (changePercent / 100);
            newPrice = oldPrice + changeAmount;
            var changeVolume = oldVolume * (changeVolumnPercent / 100);
            newVolume = oldVolume + changeVolume;
            newPrice = Math.round(newPrice * 100) / 100;
            newVolume = Math.round((newVolume * 100) / 100);
            const result = { Price: 0, ChangePercent: 0, Volume: 0 };
            changePercent = Math.round(changePercent * 100) / 100;
            result.Price = newPrice;
            result.ChangePercent = changePercent;
            result.Volume = newVolume;
            return result;
        }
        function updateCellValues() {
            var pivotObj = document.getElementById('PivotView-LiveData').ej2_instances[0];
            if (!ej.base.isNullOrUndefined(pivotObj)) {
                if (pivotObj.pivotValues.length > 0) {
                    if (!previousPivotValues) {
                        previousPivotValues = pivotObj.pivotValues;
                    }
                    previousPivotValues = pivotObj.pivotValues;
                }
                pivotObj.dataSourceSettings.dataSource = generateData();
            }
        };

        document.getElementById('update1').onclick = function () {
            var updateButton = document.getElementById("update1").ej2_instances[0];
            var feedDelayInput = document.getElementById("feeddelay").ej2_instances[0];
            var clearButton = document.getElementById("clear").ej2_instances[0];
            if (!timerID) {
                updateButton.disabled = true;
                feedDelayInput.enabled = false;
                clearButton.disabled = false;
                timerID = setInterval(updateCellValues, feedDelayInput.value);
            }
        };

        document.getElementById('clear').onclick = function () {
            var updateButton = document.getElementById("update1").ej2_instances[0];
            var feedDelayInput = document.getElementById("feeddelay").ej2_instances[0];
            var clearButton = document.getElementById("clear").ej2_instances[0];
            if (timerID) {
                updateButton.disabled = false;
                feedDelayInput.enabled = true;
                clearButton.disabled = true;
                clearInterval(timerID);
                timerID = undefined;
            }
        };

        function getCellContent(args) {
            if (args != null && args.cellInfo) {
                if (args.cellInfo.axis === 'value') {
                    if (args.cellInfo.axis === 'value' && !args.cellInfo.isGrandSum && args.cellInfo.actualText === 'Change') {
                        args.targetCell.classList.add(this.cellColour(args.cellInfo.value));
                    }

                }
            }
            return "";
        }

        function cellColour(value) {
            var colorIndex = value < 0 ? 0 : value > 0 ? 1 : 2;
            return colourScheme[colorIndex];
        }
        ;
        function chartOnLoad(args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');
        }
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates how frequently the pivot table and the pivot chart are updated with real-time data
            at a given time interval.
        </p>
    </div>
}

@section Description{
    <div id="description">
    <p>Both the pivot table and the pivot chart are receiving real-time data and
        periodically updating themselves every 5000 milliseconds. Furthermore, in this demonstration,
    </p>
    <ul>
        <li>
            The <strong>"Feed Delay"</strong> numeric text box can be used to change the time interval.
        </li>
        <li>
            The <strong>"Start Updating..."</strong> button causes the pivot table to automatically update at the
            interval specified in the <strong>"Feed Delay"</strong> numeric text box, which is measured in milliseconds.
        </li>
        <li>
            The pivot table's automatic updating can be stopped by selecting the <strong>"Stop Updating..."</strong>
            button.
        </li>
        <li>
            Displayed the <strong>"Change(%)"</strong> values in the pivot table as red for negative values and
            green for positive values using the cell template concept.
        </li>
    </ul>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Pivot Table LiveData Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of LiveData in ASP.NET MVC Pivot Table Control</h1>
                }

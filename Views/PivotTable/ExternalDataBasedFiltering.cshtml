@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@section Meta{
    <meta name="description" content="This example demonstrates the External Date Range Filtering in ASP.NET MVC Pivot Table control. Explore here for more details." />
}

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            <div style="padding: 0px 10px; display: flex; align-items: center;">
                <strong style="display: inline-block; font-size: 14px; margin-right: 5px;">Start Date:</strong>
                @Html.EJS().DatePicker("start-datepicker").CssClass("pivot-datepicker").Placeholder("Choose a start date").Value(ViewData["startDate"] as DateTime?).Min(ViewData["startMin"] as DateTime?).Max(ViewData["startMax"] as DateTime?).Width("200").Format(ViewData["format"] as string).Start(Syncfusion.EJ2.Calendars.CalendarView.Year).Depth(Syncfusion.EJ2.Calendars.CalendarView.Year).Change("startDateChange").Render()
                <strong style="display: inline-block; font-size: 14px; margin-right: 5px;">End Date:</strong>
                @Html.EJS().DatePicker("end-datepicker").CssClass("pivot-datepicker").Placeholder("Choose an end date").Value(ViewData["endDate"] as DateTime?).Min(ViewData["endMin"] as DateTime?).Max(ViewData["endMax"] as DateTime?).Width("200").Format(ViewData["format"] as string).Start(Syncfusion.EJ2.Calendars.CalendarView.Year).Depth(Syncfusion.EJ2.Calendars.CalendarView.Year).Change("endDateChange").Render()
                <div style="margin-left: 10px;">
                    @Html.EJS().Button("apply").Content("Apply").IsPrimary(true).Render()
                </div>
            </div>
            @Html.EJS().PivotView("PivotView").Width("100%").Height("500").Load("onLoad").DataSourceSettings(dataSourceSettings => dataSourceSettings
            .DataSource(ViewData["dataSource"] as List<object>).ExpandAll(true).EnableSorting(true).FormatSettings(formatsettings =>
                {
                    formatsettings.Name("Amount").Format("C0").Add();
                    formatsettings.Name("OrderDate").Format("dd/MM/yyyy").Type("date").Add();
                })
                .Rows(rows =>
                {
                    rows.Name("OrderDate").Add();
                })
                .Columns(columns =>
                {
                    columns.Name("Country").Add();
                    columns.Name("Product").Add();
                })
                .Values(values =>
                {
                    values.Name("Amount").Caption("Total Sales").Add();
                })
                .DrilledMembers(drilledmembers =>
                {
                    drilledmembers.Name("Country").Items(ViewData["drilledMembers"] as string[]).Add();
                })
                .GroupSettings(groupSettings =>
                {
                    groupSettings.Name("OrderDate").GroupInterval(ViewData["groupMembers"] as string[]).Add();
                })).GridSettings(new Syncfusion.EJ2.PivotView.PivotViewGridSettings { ColumnWidth = 140 }).Render()
        </div>
    </div>


    <style>
        @@media only screen and (max-width: 400px) {
            #pivot-table-section {
                overflow: auto;
            }
        }

        .e-date-wrapper {
            margin: 10px 20px 10px 0px !important;
        }

        .tailwind3 .pivot-datepicker .e-calendar .e-btn.e-today.e-flat.e-primary.e-disabled,
		.tailwind3-dark .pivot-datepicker .e-calendar .e-btn.e-today.e-flat.e-primary.e-disabled {
			background: #a5b4fc !important;
			border-color: #a5b4fc !important;
		}
    </style>
    <script src="~/Scripts/pivotData/data-source.js"></script>
    <script type="text/javascript">
        var startingDate = new Date('2024-01-01');
        var endingDate = new Date('2024-12-01');
        var Pivot_Data = window.dateFilterData;
        function onLoad(args) {
            applyDateFilter();
        }
        function endDateChange(args) {
            endingDate = args.value;
        }
        function startDateChange(args) {
            startingDate = args.value;
        }
        function applyDateFilter(args) {
            var pivotObj = document.getElementById('PivotView').ej2_instances[0];
            if (startingDate && endingDate) {
                startingDate.setHours(0, 0, 0, 0);
                endingDate.setHours(23, 59, 59, 999);
                var pivotData = Pivot_Data.map(function (item) {
                    var newItem = Object.assign({}, item);
                    newItem.OrderDate = new Date(item.OrderDate);
                    return newItem;
                });
                new ej.data.DataManager({ json: pivotData, adaptor: new ej.data.JsonAdaptor() }).executeQuery(
                    new ej.data.Query()
                        .where('OrderDate', 'greaterthanorequal', startingDate)
                        .where('OrderDate', 'lessthanorequal', endingDate)
                ).then(function (e) {
                    pivotObj.dataSourceSettings.dataSource = e.result;
                });
            }
        }
        document.getElementById('apply').onclick = function () {
            applyDateFilter();
        }
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates how to apply an external date range filter to the Pivot Table data source, enhancing
            performance and responsiveness when working with large datasets.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            In this sample, date filtering is performed externally by updating the Pivot Table's data source based on a
            selected date range. Users can choose a <b>Start Date</b> and <b>End Date</b> using date pickers, and the table
            updates to show only the records that fall within that range.
        </p>
        <p>
            This external filtering method improves performance by avoiding in-component filtering. Instead, the data is
            pre-filtered at runtime using a custom <code>applyDateFilter</code> function, which compares the selected date
            range with each record's date in the original dataset. This reduces the processing load on the Pivot Table and
            results in a more responsive user experience.
        </p>
        <p>
            <b> Note:</b> Aggregation in the Pivot Table is performed only on the filtered data. Any records outside the
            selected date range are excluded from the summary calculations.
        </p>
        <p>
            More information on the ASP.NET MVC Pivot Table can be found in this <a target="_blank"
                                                                                    href="https://ej2.syncfusion.com/aspnetmvc/documentation/pivot-table/getting-started#adding-pivot-table-component">
                documentation section
            </a>.
        </p>
    </div>
}

@section Title{
    <title>ASP.NET MVC Pivot Table External Date Range Filtering Example - Syncfusion Demos </title>
}

@section Header{
    <h1 class='sb-sample-text'>Example of External Date Range Filtering in ASP.NET MVC Pivot Table Control</h1>
}
@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.PivotView
@section Meta {
    <meta name="description"
        content="This example demonstrates the Classic(Tabular) Layout in ASP.NET MVC Pivot Table control. Explore here for more details." />
}
@section ControlsSection {
    <div class="tabular-layout-switch">
        <label id="layout-label" for="layout-switch">Classic (Tabular) Layout</label>
        @Html.EJS().Switch("layout-switch").CssClass("pivot-layout-switch").Checked(true).Change("onSwitchChange").Render();
    </div>
    <div class="col-lg-9 control-section" id="pivot-table-section">
        <div class="content-wrapper">
            @Html.EJS().PivotView("pivotview").Width("100%").Height("450").ShowGroupingBar(true).ShowValuesButton(true).DataSourceSettings(dataSourceSettings
                     => dataSourceSettings.DataSource((IEnumerable<object>)ViewData["Data"]).ExpandAll(false).EnableSorting(true)
                     .DrilledMembers(drilledmembers =>
                     {
                         drilledmembers.Name("Country").Items(ViewData["drilledMembers"]).Add();
                     })
                     .FilterSettings(filtersettings =>
                     {
                         filtersettings.Name("Products").Items(ViewData["filtersettings"]).Add();
                     })
                     .FormatSettings(formatsettings =>
                     {
                         formatsettings.Name("Amount").Format("C0").MaximumSignificantDigits(10).MinimumSignificantDigits(1).UseGrouping(true).Add();
                     })
                     .Rows(rows => { rows.Name("Country").Add(); rows.Name("Products").Add(); })
                     .Columns(columns => { columns.Name("Year").Add(); columns.Name("Order_Source").Caption("Order Source").Add(); })
                     .Values(values =>
                     {
                         values.Name("Sold").Caption("Units Sold").Add();
                         values.Name("Amount").Caption("Sold Amount").Add();
                     })).GridSettings(new PivotViewGridSettings { ColumnWidth = 140, Layout = "Tabular" }).Load("onLoad").DataBound("dataBound").Render()
        </div>
    </div>

    <style>
        .sb-sample-content-area {
            min-height: 255px !important;
        }

        .control-section {
            min-height: 255px !important;
        }

        .tabular-layout-switch {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .pivot-layout-switch {
            margin-left: 10px;
        }
    </style>
    <script>
        var isInitialRender = true;
        function dataBound() {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            if (isInitialRender && pivotObj.element.querySelector('.e-valuescontent')) {
                pivotObj.layoutRefresh();
                isInitialRender = false;
            }
        }
        function onLoad() {
            if (ej.base.Browser.isDevice) {
                var pivotObj = document.getElementById('pivotview').ej2_instances[0];
                pivotObj.gridSettings.columnWidth = 100;
            }
        }
        function onSwitchChange(args) {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            pivotObj.gridSettings.layout = pivotObj.gridSettings.layout === 'Tabular' ? 'Compact' : 'Tabular';
        }
    </script>
}

@section PreScripts {
    <script>
        ej.base.enableRipple(false);
    </script>
}

@section ActionDescription {
    <div id="action-description">
        <p>This sample showcases the classic layout option of the Pivot Table, also known as the Excel-like tabular format.
            In this layout, each field from the row and column axes is arranged sequentially, displayed side by side in
            separate rows or columns. Subtotals and grand totals are prominently shown, making it easy to compare and
            analyze data effectively.</p>
    </div>
}

@section Description {
    <div id="description">
        <p>The Pivot Table's classic (tabular) layout displays each field in the row axis side by side in separate columns.
            By
            default, grand totals are displayed at the end of all rows, while subtotals are placed in a separate row beneath
            each group. All other features of the pivot table, such as filtering, sorting, drag-and-drop, expand/collapse
            functionality, and more, remain the same as in the Compact (Excel-like) layout, which serves as the default
            layout
            for the Syncfusion Pivot Table.
        </p>
        <p> This layout can be enabled by setting the <code>layout</code>
            property to <b>Tabular</b> within the <code>gridSettings</code>.
            Using the <b>Classic (Tabular) Layout</b> toggle switch, the pivot table layout can be dynamically switched
            between
            Compact and Classic (Tabular) layouts at runtime.
        </p>
        <p><b>Note:</b> For pivot table reports containing multi-level hierarchies with extensive sublevels, the default
            layout (i.e.,
            compact view) is recommended, as it effectively displays data in a simple and compact manner.
        </p><br />
    </div>
}
@section Title {
    <title>ASP.NET MVC Pivot Table Classic(Tabular) Layout Example - Syncfusion Demos </title>
}
@section Header {
    <h1 class='sb-sample-text'>Example of Classic(Tabular) Layout in ASP.NET MVC Pivot Table Control</h1>
}

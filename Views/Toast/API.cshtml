@using Syncfusion.EJ2
@using Syncfusion.EJ2.Notifications;
@using Syncfusion.EJ2.DropDowns;
@using Syncfusion.EJ2.Buttons;
@using Syncfusion.EJ2.Inputs;

@section ControlsSection{
    <div class="col-lg-12 control-section toast-api-section">
        <div class="control_wrapper">
            @Html.EJS().Toast("toastAPI").Position(p => p.X("Right").Y("Bottom")).BeforeOpen("onBeforeOpen").Created("created").Close("onClose").NewestOnTop(true).TimeOut(5000).Render()
            <div class="row">
                <div class="col-lg-6 padding">
                    <div class="input-form">
                        <div class="e-float-input">
                            <input class="e-input" id="toast_input_title" required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text">Enter the title</label>
                        </div>
                    </div>
                    <div class="input-form">
                        <div class="e-float-input">
                            <textarea class="e-input" id="toast_input_content" rows="3" required=""></textarea>
                            <label class="e-float-text">Enter the content</label>
                        </div>
                    </div>
                    <div class="group-form e-group">
                        @Html.EJS().CheckBox("closeButton").Label("Show Close Button").Change("closeOnChange").Render()
                    </div>
                    <div class="group-form">
                        @Html.EJS().CheckBox("progressBar").Label("Show Progress Bar").Change("OnProgressChange").Render()
                    </div>
                    <div class="group-form">
                        @Html.EJS().CheckBox("newestOnTop").Label("Newest On Top").Change("closeNewestOnChange").Checked(true).Render()
                    </div>
                    <div class="group-form">
                        @Html.EJS().CheckBox("prevDuplicates").Label("Prevent Duplicates").Change("OnPrevDubChange").Render()
                    </div>
                    <div class="group-form">
                        @Html.EJS().CheckBox("actionButtons").Label("Action Buttons").Change("OnactionBtnChange").Render()
                    </div>
                    <div class="input-form">
                        @Html.EJS().DropDownList("Direction").Placeholder("ProgressDirection").FloatLabelType(FloatLabelType.Auto).DataSource((IEnumerable<object>)ViewData["DirectionData"]).Created("directionCreated").Index(0).Change("onDirectionChange").Fields(new DropDownListFieldSettings { Text = "Value", Value = "Id" }).Render()
                    </div>
                    <div class="input-form">
                        <div class="e-float-input e-input-group">
                            <input class="e-input" id="timeOut" name="Digits" value="5000" digits="true" data-digits-message="Please enter digits only." required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text" for="Digits">TimeOut</label>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 padding">
                    <div class="input-form">
                        <h4> Show Animation</h4>
                        <div class="e-float-input">
                            <input class="e-input" id="showDuration" value="400" required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text">Duration</label>
                        </div>
                    </div>
                    <div class="input-form">
                        @Html.EJS().DropDownList("ShowEasing").Placeholder("Select an Easing").DataSource((IEnumerable<object>)ViewData["EasingData"]).Created("showEasingCreated").Index(0).Change("onShowEase").Fields(new DropDownListFieldSettings { Text = "Value", Value = "Id" }).Render()
                    </div>
                    <div class="input-form">
                        @Html.EJS().DropDownList("ShowAnimation").Placeholder("Select an Animation").Width("100%").DataSource((IEnumerable<object>)ViewData["AnimationData"]).Created("showAnimationCreated").Index(0).Change("showChange").Fields(new DropDownListFieldSettings { Text = "Value", Value = "Id" }).Render()
                    </div>
                    <div class="input-form e-group">
                        <h4> Hide Animation</h4>
                        <div class="e-float-input">
                            <input class="e-input" id="hideDuration" value="400" required="">
                            <span class="e-float-line"></span>
                            <label class="e-float-text">Duration</label>
                        </div>
                    </div>
                    <div class="input-form">
                        @Html.EJS().DropDownList("HideEasing").Placeholder("Select an Easing").DataSource((IEnumerable<object>)ViewData["EasingData"]).Created("hideEasingCreated").Index(0).Change("onHideEase").Fields(new DropDownListFieldSettings { Text = "Value", Value = "Id" }).Render()
                    </div>
                    <div class="input-form">
                        @Html.EJS().DropDownList("HideAnimation").Placeholder("Select an Animation").DataSource((IEnumerable<object>)ViewData["AnimationData"]).Created("hideAnimationCreated").Index(1).Change("hideChange").Fields(new DropDownListFieldSettings { Text = "Value", Value = "Id" }).Render()
                    </div>
                </div>
            </div>
            <div class="row center">
                @Html.EJS().Button("toastBtnShow").CssClass("e-btn e-primary").Content("Show Toasts").Render()
                @Html.EJS().Button("toastBtnHide").CssClass("e-btn e-primary e-hide-toast").Content("Hide All").Render()
            </div>
        </div>
    </div>
    <script type="text/javascript">
        var toastObj, showEasingObj, showAnimationObj, hideEasingObj, hideAnimationObj, directionObj;
    var btnEleShow = document.getElementById('toastBtnShow');
    var btnEleHide = document.getElementById('toastBtnHide');
    var prevDuplicates = false;
    function created() {
        toastObj = this;
    }
    function showEasingCreated() {
        showEasingObj = this;
    }
    function directionCreated() {
        directionObj = this;
    }
    function showAnimationCreated() {
        showAnimationObj = this;
    }
    function hideEasingCreated() {
        hideEasingObj = this;
    }
    function hideAnimationCreated() {
        hideAnimationObj = this;
    }

    btnEleShow.onclick = function () { showToast(); };
    btnEleHide.onclick = function () {
        toastObj.hide('All');
    };

    document.onclick = function (e) {
        if (e.target !== btnEleShow) {
            toastObj.hide('All');
        }
    };
    function showToast() {
        var title = (document.getElementById('toast_input_title')).value;
        var content = (document.getElementById('toast_input_content')).value;
        if (title === '' && content === '') {
            content = 'You have created a Toast message';
        }
        var showDuration = parseInt((document.getElementById('showDuration')).value, 10);
        var hideDuration = parseInt((document.getElementById('hideDuration')).value, 10);
        var timeOut = parseInt((document.getElementById('timeOut')).value, 10);
        toastObj.show(
            {
                title: title, content: content, timeOut: timeOut,
                animation: {
                    show: { duration: showDuration },
                    hide: { duration: hideDuration }
                }, target: document.body
            });
    }

   
    setTimeout(
        () => {
            showChange();
        }, 500);
    setTimeout(
        () => {
            hideChange();
        }, 500);

    function onShowEase() {
        toastObj.animation.show.easing = showEasingObj.value;;
    }

    function onDirectionChange() {
        toastObj.progressDirection = directionObj.value;
    }

    function onHideEase() {
        toastObj.animation.hide.easing =hideEasingObj.value;
    }

    function showChange(e) {
        toastObj.animation.show.effect = showAnimationObj.value;
    }

    function hideChange(e) {
        toastObj.animation.hide.effect = hideAnimationObj.value;
    }

    function onClose(e) {
            if (e.toastContainer.childElementCount === 0) {
                btnEleHide.style.display = 'none';
            }
        }

    // Toast beforeOpen Event Function
    function onBeforeOpen(e) {
        btnEleHide.style.display = 'inline-block';
        if (prevDuplicates) {
            e.cancel = preventDuplicate(e);
        }
    }

    // Toast preventDuplicate Function for toast title
    function preventDuplicate(e) {
        var toastEle = e.element;
        var toasts = e.toastObj.element.children;
        for (var i = 0; i < toasts.length; i++) {
            var toastTitle = (toasts[i]).querySelector('.e-toast-title');
            var toastMessage = (toasts[i]).querySelector('.e-toast-message');
            if (toastTitle && toastTitle.isEqualNode(toastEle.querySelector('.e-toast-title'))) {
                return true;
            }
            if (!toastTitle && toastMessage && toastMessage.isEqualNode(toastEle.querySelector('.e-toast-message'))) {
                return true;
            }
        }
        return false;
    }

    function closeOnChange(e) {
        e.checked ? toastObj.showCloseButton = true : toastObj.showCloseButton = false;
    }
    function OnProgressChange(e) {
        e.checked ? toastObj.showProgressBar = true : toastObj.showProgressBar = false;
    }
    function closeNewestOnChange(e) {
        e.checked ? toastObj.newestOnTop = true : toastObj.newestOnTop = false;
    }
    function OnPrevDubChange(e) {
        prevDuplicates = e.checked;
    }
    function onActionBtnClick(e) {
        alert('Action button is clicked');
    }
    function OnactionBtnChange(e) {
        if (e.checked) {
            toastObj.buttons = [{ model: { content: '<div class="e-toast-btn"> Click Here </div>' }, click: onActionBtnClick }];
        } else { toastObj.buttons = []; }
    }
    </script>
    <style>
        /* custom code start */
        .toast-api-section .input-form {
            margin: 33px 0;
        }

        .e-btn.e-hide-toast {
            display: none;
        }

        .toast-api-section .group-form {
            margin: 25px 0;
        }

            .toast-api-section .group-form.e-group {
                margin-top: 35px;
            }

        .toast-api-section .row .padding {
            padding: 15px;
        }

        .toast-api-section .row.center {
            text-align: center;
        }

        .toast-api-section .row {
            padding: 0 15px;
        }
        /* custom code end */
    </style>
}

@section ActionDescription{


    <div id="action-description">
        <p>This sample demonstrates all the API functionalities available in Toast.</p>
    </div>



}
@section Description{


    <div id="description">
        <p>In this sample, with help of text inputs toast header title and content text can be provided.</p>
        <ul>
            <li>
                <code>Action Buttons</code> – Provide support to add a button inside toast to interact with it.
            </li>
            <li>
                <code>Prevent Duplicates</code> – Disable the user to create same toast message multiple times.
            </li>
            <li>
                <code> TimeOut</code> – Allows to set time in millisecond to close toast.
            </li>
            <li>
                <code> Progress Bar</code> – Visualizes the time out of toast as an indicator.
            </li>
            <li>
                <code> Animation</code> – Enables to define the toast show and hide animation.
            </li>
            <li>
                <code>Close button</code> – Show close button to hide toast irrespective of time out.
            </li>
        </ul>
        <p>
            More information about Toast can be found in this
            <a href="https://ej2.syncfusion.com/aspnetmvc/documentation/toast/getting-started/" target="_blank" aria-label="documentation section"> documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>



}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the API in ASP.NET MVC Toast control. Explore here for more details."/>
                }

@*custom code end*@

@section Title{
                    <title>ASP.NET MVC Toast API Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of API in ASP.NET MVC Toast Control</h1>
                }
@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div>
            @(Html.EJS().StockChart("container").Load("load").Title("AAPL stock price by minutes")
                                .Series(sr =>
                                {
                                    sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).DataSource("series1").XName("x").YName("y").Name("google").Add();
                                })
                                .Render())
        </div>
    </div>
      @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
        #container {
            display: block;
        }
        #container_stock_border {
            pointer-events: none;
        }
    </style>
      @*custom code end*@
    <script src="~/Scripts/StockChartData/theme-color.js"></script>
    <script>
        var series1 = [];
        var point1;
        var value = 80;
        var i;
        for (i = 1; i < 1440; i++) {
            if (Math.random() > .5) {
                value += Math.random();
            } else {
                value -= Math.random();
            }
            point1 = { x: new Date(2000, 1, 1, 0, i), y: value.toFixed(1) };
            series1.push(point1);
        }
        var load = function (args) {
            args.stockChart.chartArea = { border: { width: 0 } };
            args.stockChart.border = { width: 1 };
            args.stockChart.indicatorType = [];
            args.stockChart.trendlineType = [];
            args.stockChart.exportType = [];
            args.stockChart.seriesType = [];
            args.stockChart.crosshair = {
                enable: true, lineType: 'Both'
            };
            args.stockChart.periods = [
                { intervalType: 'Minutes', interval: 1, text: '1m' },
                { intervalType: 'Minutes', interval: 30, text: '30m' },
                { intervalType: 'Hours', interval: 1, text: '1H' },
                { intervalType: 'Hours', interval: 12, text: '12H', selected: true },
                { text: '1D' }
            ];
            args.stockChart.primaryXAxis = {
                valueType: 'DateTime', majorGridLines: { color: 'transparent' },
                crosshairTooltip: { enable: true }, edgeLabelPlacement: 'Shift'
            };
            args.stockChart.primaryYAxis = {
                lineStyle: { color: 'transparent' },
                majorTickLines: { color: 'transparent', height: 0 },
                crosshairTooltip: { enable: true }
            };
            loadStockChartTheme(args);
        }
    </script>
}
  @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Intraday in ASP.NET MVC Stock Chart control. Explore here for more details."/>
                }
  @*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes data for intraday using stock chart. Period and range selector help us to navigate different of data.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Stock chart.
        <code>AreaSeries</code> is used to represent selected data value.
    </p>
}



@section Title{
                    <title>ASP.NET MVC Stock Chart Intraday Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Intraday in ASP.NET MVC Stock Chart Control</h1>
                }
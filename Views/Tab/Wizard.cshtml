@using Syncfusion.EJ2
@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2.DropDowns

@section ControlsSection{
    <div class="control-section e-tab-section">
        <div class="e-sample-resize-container">
            <div id="booking" style="display: none">
                <div class="wizard-title">Plan your journey</div>
                <div class="responsive-align">
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item">
                            @Html.EJS().DropDownList("startPoint").Placeholder("From").Width("100%").DataSource(
                                  ViewData["citiesData"]).Fields(new DropDownListFieldSettings { Text = "Name", Value = "Name" }).Render()
                        </div>
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item">
                            @Html.EJS().DropDownList("endPoint").Placeholder("To").Width("100%").DataSource(
                                  ViewData["citiesData"]).Fields(new DropDownListFieldSettings { Text = "Name", Value = "Name" }).Render()
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item">
                            @Html.EJS().DatePicker("date").Placeholder("Journey Date").Width("100%").Min(ViewData["min"]).Max(ViewData["max"]).Value(ViewData["value"]).Render()
                        </div>
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 search-item">
                            @Html.EJS().DropDownList("quota").Placeholder("Ticket type").DataSource(
                                  ViewData["quota"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                        </div>
                    </div>
                    <div class="btn-container">
                        <button id="searchNext" class="e-btn">Search Train</button>
                    </div>
                    <span id="err1"></span>
                </div>
            </div>
            <div id="selectTrain" style="display: none">
                <div class="wizard-title">Select the train from the list </div>
                @Html.EJS().Grid("availableTrain").Columns(ViewData["availabletrain"]).Width("100%").RowSelected("trainSelected").Render()
                <br />
                <div class="btn-container">
                    <button id="goToSearch" class="e-btn">Back</button>
                    <button id="bookTickets" class="e-btn">Continue</button>
                </div>
                <span id="err2"></span>
            </div>
            <div id="details" style="display: none">
                <div class="details-page wizard-title">Enter the passenger details</div>
                <div id="PassengersList">
                    <table id="passenger-table">
                        <colgroup>
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                        </colgroup>
                        <thead>
                            <tr>
                                <th class="name-header">Name</th>
                                <th class="age-header">Age</th>
                                <th class="gender-header">Gender</th>
                                <th class="type-header">Berth Preference</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input id="pass_name1" class="e-input" type="text" placeholder="Passenger Name">
                                </td>
                                <td>
                                    @Html.EJS().NumericTextBox("pass_age1").Format("n0").Value(18).Min(1).Max(100).ShowSpinButton(false).Render()
                                </td>
                                <td>
                                    @Html.EJS().DropDownList("pass_gender1").Text("Male").DataSource(ViewData["gender"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                                </td>
                                <td>
                                    @Html.EJS().DropDownList("pass_berth1").Placeholder("Optional").DataSource(ViewData["berth"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <input id="pass_name2" class="e-input" type="text" placeholder="Passenger Name">
                                </td>
                                <td>
                                    @Html.EJS().NumericTextBox("pass_age2").Format("n0").Value(18).Min(1).Max(100).ShowSpinButton(false).Render()
                                </td>
                                <td>
                                    @Html.EJS().DropDownList("pass_gender2").Text("Male").DataSource(ViewData["gender"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                                </td>
                                <td>
                                    @Html.EJS().DropDownList("pass_berth2").Placeholder("Optional").DataSource(ViewData["berth"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <input id="pass_name3" class="e-input" type="text" placeholder="Passenger Name">
                                </td>
                                <td>
                                    @Html.EJS().NumericTextBox("pass_age3").Format("n0").Value(18).Min(1).Max(100).ShowSpinButton(false).Render()
                                </td>
                                <td>
                                    @Html.EJS().DropDownList("pass_gender3").Text("Male").DataSource(ViewData["gender"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                                </td>
                                <td>
                                    @Html.EJS().DropDownList("pass_berth3").Placeholder("Optional").DataSource(ViewData["berth"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Text" }).Render()
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <br />
                <div class="btn-container">
                    <button id="goBackToBook" class="e-btn">Back</button>
                    <button id="confirmTickets" class="e-btn">Continue</button>
                </div>
                <span id="err3"></span>
            </div>
            <div id="confirm" style="display: none">
                <div class="tab-title1 wizardtitle">Confirm the details and proceed</div>
                @Html.EJS().Grid("ticketDetailGrid").Width("100%").Columns(ViewData["ticketgrid"]).Render()
                <br />
                <div id="amount"></div>
                <br />
                <div class="btn-container">
                    <button id="goBackDetails" class="e-btn">Back</button>
                    <button id="makePayment" class="e-btn">Pay</button>
                </div>
            </div>
            @Html.EJS().Tab("ej2Tab").HeightAdjustMode(HeightStyles.None).Height("auto").Created("tabCreated").Selecting("tabSelecting").Items((List<Syncfusion.EJ2.Navigations.TabItem>)ViewData["headeritems"]).Render()
            <div>
                @Html.EJS().Dialog("alertDialog").Header("Success").Target("#ej2Tab").ShowCloseIcon(true).Width("350").IsModal(true).Created("dlgCreated").Visible(false).Render()
            </div>
        </div>
    </div>
}

@section ActionDescription{
    <p>
        This sample demonstrates simple train reservation wizard that enable/disable Tab items based on sequential validation of each Tab content.
    </p>
}

@section Description{
    <p>
        Tab items can be disabled dynamically by passing the index and boolean value to the <a target="_blank" href="https://ej2.syncfusion.com/documentation/api/tab/#enabletab" aria-label="enableTab">enableTab<span class="sr-only">opens in a new tab</span></a> method.
    </p>
    <p>
        You can design wizard like sample with Tab using the in-built API and customizing the content with proper validations.
    </p>
    <p>
        More information about Tab can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tab/getting-started-asp-mvc/" aria-label="documentation"> documentation <span class="sr-only">opens in a new tab</span></a> section.
    </p>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Wizard in ASP.NET MVC Tabs control. Explore here for more details."/>
                }

<script>
    var tabObj;
    var endPoint;
    var alertDlg;
    var locations;
    var ticketType;
    var startPoint;
    var journeyDate;
    var selectedTrain;
    var availTrainGrid;
    var ticketDetailGrid;

    var cities = [
        { name: "Chicago", fare: 300 },
        { name: "San Francisco", fare: 125 },
        { name: "Los Angeles", fare: 175 },
        { name: "Seattle", fare: 250 },
        { name: "Florida", fare: 150 }
    ];

    function tabCreated() {

        document.getElementById("searchNext").onclick = function (e) { tabNavigations(e); };
        document.getElementById("bookTickets").onclick = function (e) { tabNavigations(e); };
        document.getElementById("confirmTickets").onclick = function (e) { tabNavigations(e); };
        document.getElementById("makePayment").onclick = function (e) { tabNavigations(e); };
        document.getElementById("goToSearch").onclick = function (e) { tabNavigations(e); };
        document.getElementById("goBackToBook").onclick = function (e) { tabNavigations(e); };
        document.getElementById("goBackDetails").onclick = function (e) { tabNavigations(e); };

        tabObj = document.getElementById("ej2Tab").ej2_instances[0];
        startPoint = document.getElementById("startPoint").ej2_instances[0];
        endPoint = document.getElementById("endPoint").ej2_instances[0];
        ticketType = document.getElementById("quota").ej2_instances[0];
        journeyDate = document.getElementById("date").ej2_instances[0];
        availTrainGrid = document.getElementById("availableTrain").ej2_instances[0];
        ticketDetailGrid = document.getElementById("ticketDetailGrid").ej2_instances[0];
    }

    function showDate() {
        journeyDate = document.getElementById("date").ej2_instances[0];
        journeyDate.show();
    }

    function tabSelecting(e) {
        if (e.isSwiped) {
            e.cancel = true;
        }
    }

    function dlgCreated() {
        alertDlg = document.getElementById("alertDialog").ej2_instances[0];
        alertDlg.content = "Your payment was successfully processed";
        alertDlg.buttons = [{
            buttonModel: { content: "Ok", isPrimary: true },
            click: function () {
                alertDlg.hide();
                for (var i = 1; i <= 3; i++) {
                    var name = document.getElementById('pass_name' + i);
                    var berthSelected = document.getElementById('pass_berth' + i);
                    var age = document.getElementById('pass_age' + i);
                    var gender = document.getElementById('pass_gender' + i);
                    name.value = '';
                    age.value = 18;
                    gender.value = 'Male';
                    berthSelected.value = '';
                }
                tabObj.enableTab(0, true);
                tabObj.enableTab(1, false);
                tabObj.enableTab(2, false);
                tabObj.enableTab(3, false);
                tabObj.select(0);
            }
        }];
        alertDlg.dataBind();
        alertDlg.hide();
    }

    function trainSelected(args) {
        selectedTrain = args.data;
    }

    function filterTrains(args) {
        /* Generating trains based on source and destination chosen */
        var result = [];
        var fromCity = startPoint.text;
        var toCity = endPoint.text;
        var count = Math.floor((Math.random() * 3) + 2);
        for (var i = 0; i < count; i++) {
            var details = [];
            details.TrainNo = Math.floor((Math.random() * 20) + 19000);
            details.Name = "Train " + i;
            details.Departure = fromCity;
            details.Arrival = toCity;
            details.Availability = Math.floor((Math.random() * 20) + 20);
            result.push(details);
        }
        availTrainGrid.dataSource = result;
    }
    function finalizeDetails(args) {
        /* Get the passenger details and update table with name and other details for confirmation */
        var reserved = [];
        var passCount = 0;
        for (var i = 1; i <= 3; i++) {
            var name = document.getElementById("pass_name" + i);
            var berthSelected = document.getElementById("pass_berth" + i);
            var gender = document.getElementById("pass_gender" + i);
            if (name.value !== "") {
                var details = [];
                var berth = berthSelected.value;
                details.TrainNo = selectedTrain.TrainNo.toString();
                details.PassName = name.value;
                details.Gender = gender.value;
                details.Berth = (berth === "") ? "Any" : berth;
                reserved.push(details); passCount++;
            }
            var calcFare = 0;
            for (var j in cities) {
                if (startPoint.value == cities[j].name)
                    calcFare = calcFare + cities[j].fare;
                if (endPoint.value == cities[j].name)
                    calcFare = calcFare + cities[j].fare;
            }
            var displayAmt = document.getElementById("amount");
            if (ticketType.value === "Economy Class") {
                displayAmt.innerText = "Total payable amount: $" + passCount * (300 + calcFare)
            } else if (ticketType.value === "Business Class") {
                displayAmt.innerText = "Total payable amount: $" + passCount * (500 + calcFare)
            } else if (ticketType.value === "Common Class") {
                displayAmt.innerText = "Total payable amount: $" + passCount * (150 + calcFare)
            }
        }
        ticketDetailGrid.dataSource = reserved;
    }

    function tabNavigations(args) {
        switch (args.target.id) {
            case "searchNext":
                /* Validate the Source, Destination, Date and Class chosen and proceed only if all the fields are selected */
                if (!ej.base.isNullOrUndefined(startPoint.value) && !ej.base.isNullOrUndefined(endPoint.value) &&
                    !ej.base.isNullOrUndefined(ticketType.value) && !ej.base.isNullOrUndefined(journeyDate.value)) {
                    if (!ej.base.isNullOrUndefined(startPoint.value) && startPoint.value === endPoint.value) {
                        document.getElementById("err1").innerText = "* Arrival point can\"t be same as Departure";
                    }
                    else {
                        tabObj.enableTab(1, true);
                        tabObj.enableTab(0, false);
                        filterTrains(args);
                        document.getElementById("err1").innerText = "";
                        document.getElementById("err2").innerText = "";
                    }
                }
                else {
                    document.getElementById("err1").innerText = "* Please fill all the details before proceeding";
                }
                break;
            case "bookTickets":
                /* Based on the selected station generate Grid content to display trains available */
                if (availTrainGrid.getSelectedRecords() === undefined || availTrainGrid.getSelectedRecords().length === 0) {
                    document.getElementById("err2").innerText = "* Select your convenient train";
                }
                else {
                    tabObj.enableTab(2, true);
                    tabObj.enableTab(1, false);
                    document.getElementById("err2").innerText = "";
                }
                break;
            case "confirmTickets":
                /* Get the Passenger details and validate the fields must not be left empty */
                var name = document.getElementById("pass_name1");
                var age = document.getElementById("pass_age1");
                var gender = document.getElementById("pass_gender1");
                if (name.value === "" || age.value === "" || gender.value === "") {
                    document.getElementById("err3").innerText = "* Please enter passenger details";
                }
                else {
                    tabObj.enableTab(3, true);
                    tabObj.enableTab(2, false);
                    document.getElementById("err3").innerText = "";
                    finalizeDetails(args);
                }
                break;
            case "makePayment":
                alertDlg.show();
                break;
            case "goToSearch":
                /* Go back to change class, date or boarding places */
                selectedTrain = [];
                tabObj.enableTab(0, true);
                tabObj.select(0);
                tabObj.enableTab(1, false);
                break;
            case "goBackToBook":
                /* Change the preferred train chosen already */
                tabObj.enableTab(1, true);
                tabObj.select(1);
                tabObj.enableTab(2, false);
                break;
            case "goBackDetails":
                /* Update passenger detail before confirming the payment */
                tabObj.enableTab(2, true);
                tabObj.select(2);
                tabObj.enableTab(3, false);
                break;
        }
    }
</script>

<style>
    .e-tab-section .e-tab .e-content.e-control {
        overflow-x: hidden;
        overflow-y: auto;
    }

    .e-content .e-item {
        font-size: 12px;
        margin: 10px;
    }

    #amount {
        text-align: right;
        font-size: 15px;
        padding: 15px 0px;
    }

    #passenger-table th {
        text-align: center;
        font-size: 14px;
        font-weight: 400;
        border: 1px solid gainsboro;
    }

    #passenger-table td,
    th {
        padding: 10px;
    }

    #passenger-table td {
        border: 1px solid gainsboro;
    }

    .name-header {
        width: 200px;
    }

    .age-header {
        width: 80px;
    }

    .gender-header {
        width: 120px;
    }

    .type-header {
        width: 150px;
    }

    .btn-container {
        text-align: center;
    }

    .search-item {
        padding-right: 50px;
        padding-bottom: 20px;
    }

    .item-title {
        font-weight: 500;
        padding-top: 10px;
    }

@*custom code start*@
    @@media (max-width: 450px) {
        .e-sample-resize-container {
            height: 450px;
        }
 @*custom code end*@
 
        .responsive-align {
            width: 75%;
            margin: 0 auto;
        }

        .search-item {
            padding: 0 0 20px 0;
            width: 100%;
        }
    }

    #err1,
    #err2,
    #err3 {
        font-weight: bold;
        color: red;
        display: block;
        margin-top: 15px;
    }

    .wizard-title {
        font-size: 15px;
    }

    #PassengersList {
        overflow: auto;
    }

    #passenger-table {
        min-width: 500px;
        width: 100%;
    }

    .e-tab-section {
        padding: 0 15px;
    }
</style>

@section Title{
                    <title>ASP.NET MVC Tabs Wizard Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Wizard in ASP.NET MVC Tabs Control</h1>
                }
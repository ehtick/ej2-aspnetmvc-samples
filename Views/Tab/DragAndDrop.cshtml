@using Syncfusion.EJ2.Navigations;

@section ControlsSection{
    <div id="TabContainer">
        <div class="col-lg-4" style="margin-top: 10px;">
            <div class='property-panel-header'>List of Components</div>
            @Html.EJS().TreeView("Tab_TreeView").AllowDragAndDrop(true).DragArea("#TabContainer").NodeDragStop("onNodeDragStop").NodeDragging("onNodeDrag").CssClass("treeview-external-drag-tab").Fields(field => field.DataSource(ViewData["data"]).Id("id").Text("text")).Render()
        </div>
        <div class="col-lg-8 content-wrapper control-section">
            @(Html.EJS().Tab("ej2Tab")
             .Items(new List<TabItem> {
                new TabItem { Header = (TabHeader)ViewData["headerTextOne"], Content = "#DataGrid" },
                new TabItem { Header = (TabHeader)ViewData["headerTextTwo"], Content = "#Chart" },
                new TabItem { Header = (TabHeader)ViewData["headerTextThree"], Content = "#Schedule" }
             })
             .Height("auto")
             .Created("onTabCreate")
             .DragArea("#TabContainer")
             .Selected("selectedTab")
             .OnDragStart("onTabDragStart")
             .Dragged("onDraggedTab")
             .AllowDragAndDrop(true)
             .Render()
            )
            <div class="content">
                <div style="display: none" id="grid">
                    @Html.EJS().Grid("DataGrid").DataSource((IEnumerable<object>)ViewData["gridData"]).Columns(col =>
                    {
                        col.Field("OrderID").HeaderText("Order ID").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("120").Type("number").Add();
                        col.Field("CustomerID").HeaderText("Customer ID").Width("140").Type("string").Add();
                        col.Field("Freight").HeaderText("Freight").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("120").Format("C").Add();
                        col.Field("OrderDate").HeaderText("Order Date").Width("140").Format("yMd").Add();
                    }).Render()
                </div>
                <div style="display: none" id="chart">
                    @Html.EJS().Chart("Chart").Height("300px").PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)).Series(series =>
                    {
                       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                       XName("month").
                       YName("sales").
                       DataSource(ViewData["chartData"]).Add();
                    }).Render()
                </div>
                <div style="display: none" id="schedule">
                    @(Html.EJS().Schedule("Schedule")
                      .CssClass("Scheduler")
                      .Height("500")
                      .Readonly(true)
                      .EventSettings(e =>
                        e.DataSource(d =>
                           d.Url("https://ej2services.syncfusion.com/production/web-services/api/Schedule")
                           .Adaptor("ODataV4Adaptor")
                           .CrossDomain(true)
                        )
                      )
                      .SelectedDate(new DateTime(2024, 9, 20))
                      .Render()
                    )
                </div>
                <div style="display: none" id="dropdownList">
                    @Html.EJS().DropDownList("Tab_DropdownList").Width("200").Placeholder("Select a game").DataSource((IEnumerable<Object>)ViewData["sportsData"]).CssClass("DropdownList").Render()
                </div>
                <div style="display: none" id="datePicker">
                    @Html.EJS().DatePicker("Tab_DatePicker").Width("200").CssClass("DatePicker").Placeholder("Enter date").Render()
                </div>
                <div style="display: none" id="calendar">
                    @Html.EJS().Calendar("Tab_Calendar").CssClass("Calendar").Render()
                </div>
                <div style="display: none" id="fileUpload">
                    @Html.EJS().Uploader("Tab_FileUpload").CssClass("FileUpload").AutoUpload(false).Render()
                </div>
                <div style="display: none" id="richTextEditor">
                    @Html.EJS().RichTextEditor("Tab_RichTextEditor").Height(340).CssClass("RichTextEditor").ContentTemplate(@<div>
                        <p>
                            The Rich Text Editor control is WYSIWYG ('what you see is what you get') editor that provides the best user experience to create and update the content.
                            Users can format their content using standard toolbar commands.
                        </p>
                        <p><b> Key features:</b></p>

                        <ul>
                            <li><p> Provides &lt; IFRAME &gt; and &lt; DIV &gt; modes </p></li>

                            <li><p> Capable of handling markdown editing.</p></li>

                            <li><p> Contains a modular library to load the necessary functionality on demand.</p></li>

                            <li><p> Provides a fully customizable toolbar.</p></li>

                            <li><p> Provides HTML view to edit the source directly for developers.</p></li>

                            <li><p> Supports third - party library integration.</p></li>

                            <li><p> Allows preview of modified content before saving it.</p></li>

                            <li><p> Handles images, hyperlinks, video, hyperlinks, uploads, etc.</p></li>

                            <li><p> Contains undo / redo manager.</p></li>

                            <li><p> Creates bulleted and numbered lists.</p></li>

                        </ul>
                    </div>).Render()
                </div>
            </div>
        </div>
    </div>
}

@section ActionDescription{
    <p>
        This example illustrates how to reorder tabs and add tabs from an external source(list of components) by drag and drop. Here, you can drag and drop the items from TreeView into Tab.
    </p>
}

@section Description{
    <p>
        In this example, the <code>AllowDragAndDrop</code> property is used to enable drag and drop and the <code>DragArea</code> property is used to define the draggable area.
    </p>
    <p>
        In this example, the list of components is rendered using the <code>Treeview</code> component. We can drag the item from the treeview component to the tab component by using the <code>NodeDragStop</code> event of the treeview component and add the same item with the help of the <code>addTab</code> public method of Tab and remove this item from the treeview by using the <code>removeNodes</code> method.
    </p>
    <p>
        In the same way, we can drag the tab item within the tab component and also add the tab item to the treeview component. Here, we can drop the tab item in the treeview component by using the <code>Dragged</code> event of the tab component. In this case, we can remove the dropped item from tab with the help of the <code>removeTab</code> public method and add the item to the treeview in its <code>addNodes</code> public method.
    </p>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Drag and Drop in ASP.NET MVC Tabs control. Explore here for more details."/>
                }

<script>
    var tabObj;
    var rteObj;
    var chartObj;
    var scheduleObj;
    var treeViewObj;
    var draggedItemHeader;
    var i = 0;
    function onNodeDragStop(args) {
        var dropElement = args.target.closest('#ej2Tab .e-toolbar-item');
        if (dropElement != null) {
            var tabElement = document.querySelector('#ej2Tab');
            var itemPosition = (((args.event.type.indexOf('touch') > -1) ? args.event.changedTouches[0].clientX
                : args.event.clientX) < dropElement.getBoundingClientRect().left + dropElement.offsetWidth / 2) ? 0 : 1; 
            var dropItemIndex = [].slice.call(tabElement.querySelectorAll('.e-toolbar-item')).indexOf(dropElement) + itemPosition;
            var tabContent;
            if (args.draggedNodeData.text === 'DataGrid' || args.draggedNodeData.text === 'Chart') {
                tabContent = document.getElementById(args.draggedNodeData.text);
            }
            else {
                tabContent = document.querySelector('.' + args.draggedNodeData.text);
            }
            var newTabItem = [{ header: { 'text': args.draggedNodeData.text.toString() }, content: (tabContent) }];
            tabObj.addTab(newTabItem, dropItemIndex);
            treeViewObj.removeNodes([args.draggedNode]);
        }
        args.cancel = true;
    }
    function onNodeDrag(args) {
        if (!ej.base.isNullOrUndefined(args.target.closest('.tabContent'))) {
            args.dropIndicator = 'e-no-drop';
        } else if (!ej.base.isNullOrUndefined(args.target.closest('#ej2Tab .e-tab-header'))) {
            args.dropIndicator = 'e-drop-in';
        }
    }
    function onTabCreate() {
        var tabElement = document.getElementById('ej2Tab');
        if (!ej.base.isNullOrUndefined(tabElement)) {
            tabElement.querySelector('.e-tab-header').classList.add('e-droppable');
            tabElement.querySelector('.e-content').classList.add('tabContent');
        }
        tabObj = document.getElementById("ej2Tab").ej2_instances[0];
        treeViewObj = document.getElementById("Tab_TreeView").ej2_instances[0];
    }
    function selectedTab(args) {
        var rteElement = document.getElementById("Tab_RichTextEditor");
        var scheduleElement = document.getElementById("Schedule");
        var chartElement = document.getElementById("Chart");
        if (tabObj.items[args.selectedIndex].header.text === 'RichTextEditor' && (!ej.base.isNullOrUndefined(rteElement) && !ej.base.isNullOrUndefined(rteElement.ej2_instances[0]))) {
            rteObj = rteElement.ej2_instances[0];
            rteObj.refreshUI();
        }
        if (tabObj.items[args.selectedIndex].header.text === 'Scheduler' && (!ej.base.isNullOrUndefined(scheduleElement) && !ej.base.isNullOrUndefined(scheduleElement.ej2_instances[0]))) {
            scheduleObj = scheduleElement.ej2_instances[0];
            scheduleObj.refresh();
        }
        if (tabObj.items[args.selectedIndex].header.text === 'Chart' && (!ej.base.isNullOrUndefined(chartElement) && !ej.base.isNullOrUndefined(chartElement.ej2_instances[0]))) {
            chartObj = chartElement.ej2_instances[0];
            chartObj.refresh();
        }
    }
    function onTabDragStart(args) {
        draggedItemHeader = tabObj.items[args.index].header.text;
    }
    function onDraggedTab(args) {
        var dragTabIndex = Array.prototype.indexOf.call(tabObj.element.querySelectorAll('.e-toolbar-item'), args.draggedItem);
        var dropNode = args.target.closest('#Tab_TreeView .e-list-item');
        if (dropNode != null && !args.target.closest('#ej2Tab .e-toolbar-item')) {
            args.cancel = true;
            var dropContainer = (document.querySelector('.treeview-external-drag-tab')).querySelectorAll('.e-list-item');
            var dropIndex = Array.prototype.indexOf.call(dropContainer, dropNode);
            var newNode = { id: 'list' + i, text: draggedItemHeader };
            var tabContent;
            tabContent = document.getElementsByClassName(draggedItemHeader)[0];
            switch (draggedItemHeader) {
                case 'DropdownList': ;
                    document.querySelector('#dropdownList').appendChild(tabContent);
                    break;
                case 'DatePicker':
                    document.querySelector('#datePicker').appendChild(tabContent);
                    break;
                case 'Calendar':
                    document.querySelector('#calendar').appendChild(tabContent);
                    break;
                case 'FileUpload':
                    document.querySelector('#fileUpload').appendChild(tabContent);
                    break;
                case 'RichTextEditor': ;
                    document.querySelector('#richTextEditor').appendChild(tabContent);
                    break;
                case 'Scheduler':
                    document.querySelector('#schedule').appendChild(tabContent);
                    break;
                case 'DataGrid':
                    tabContent = document.getElementById(draggedItemHeader);
                    document.querySelector('#grid').appendChild(tabContent);
                    break;
                case 'Chart':
                    tabContent = document.getElementById(draggedItemHeader);
                    document.querySelector('#chart').appendChild(tabContent);
                    break;
            }
            tabObj.removeTab(dragTabIndex);
            treeViewObj.addNodes([newNode], 'TreeView', dropIndex);
        }
    }
</script>


<style>
    #ej2Tab .e-content .e-item {
        font-size: 12px;
        padding: 10px;
        text-align: justify;
    }

    #ej2Tab .e-upload {
        width: 300px;
    }

    .property-panel-header {
        text-align: center;
        padding-bottom: 0;
    }

    .treeview-external-drag-tab .e-list-item,
    .e-bigger .treeview-external-drag-tab .e-list-item {
        border: 0.5px solid #E1E7EC;
        line-height: 15px;
        padding: 0 5px;
    }
    .treeview-external-drag-tab.e-treeview .e-ul {
        padding: unset;
    }
    .sb-property-border {
        border-right: none;
    }
    #TabContainer {
        display: flex;
    }
    @@media (max-width: 550px) {
        #TabContainer {
            display: block;
        }
    }
</style>


@section Title{
                    <title>ASP.NET MVC Tabs Drag and Drop Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Drag and Drop in ASP.NET MVC Tabs Control</h1>
                }

@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Navigations;
@using Syncfusion.EJ2.DropDowns;

@section ControlsSection{
<div class="e-tab-section">
    <div class="col-lg-8 content-wrapper control-section">
        <div class="e-sample-resize-container">
            @Html.EJS().Tab("adaptiveTab").Created("tabCreated").HeightAdjustMode(HeightStyles.None).Height("250px").Items((List<Syncfusion.EJ2.Navigations.TabItem>)(List<Syncfusion.EJ2.Navigations.TabItem>)ViewData["adaptiveItems"]).Render()
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tbody>
                <tr>
                    <td style="width: 50%;">
                        <div>Mode</div>
                    </td>
                    <td style="width: 50%; padding-right: 10px;">
                        <div>
                            @Html.EJS().DropDownList("positionList").Width("100%").DataSource(ViewData["positionData"]).Value("Scrollable").Change("changeOverFlowMode").Render()
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%;">
                        <div>Header Placement</div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            @Html.EJS().DropDownList("orientation").Width("90%").DataSource(ViewData["orientationData"]).Value("Top").Change("changeHeaderPosition").Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
}

@section ActionDescription{
    <p>
        This sample demonstrates both <code>scrollable</code> and <code>popup</code> modes of the <code>Tab</code>. Select option from down-down to change the responsive option in property panel.
    </p>
}

@section Description{
    <p>
        The <code>Tab</code> is adaptable to the available space when the tab items exceed the view space.
    </p>
    <p>
        The <code>Tab</code> allows to place the header section inside the Tab component either at <code>top / bottom / left / right</code> position by using <code>headerPlacement</code> property.
    </p>
    <p>
        You can assign overflowMode property value as <code>Scrollable / Popup</code>. By default scrollable mode of tab is enabled when tab item exceeds the view range.
        In this sample, users can change the <code>overflowMode</code> by selecting the dropdown options.
    </p>
    <p>
        More information about Tab can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tab/getting-started-asp-mvc/" aria-label="documentation"> documentation <span class="sr-only">opens in a new tab</span></a> section.
    </p>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Responsive Modes in ASP.NET MVC Tabs control. Explore here for more details."/>
                }

<style>
    #adaptiveTab .e-content .e-item {
        font-size: 12px;
        padding: 10px;
        text-align: justify;
    }

    .container {
        min-width: 350px;
        max-width: 500px;
    }

    .property-panel-content {
        padding: 10px;
    }

@*custom code start*@
    @@media only screen and (min-width: 1824px) {
        .e-sample-resize-container {
            width: 65%;
        }

        .e-bigger .e-sample-resize-container {
            width: 75%;
        }
    }

 @*custom code end*@

    #adaptiveTab .e-tab-text {
        display: inherit;
    }

    @@media screen and (max-width: 481px) {
        .control-section.e-tab-section,
        .container-fluid {
            padding-left: 0;
            padding-right: 0;
        }
    }

    @@media screen and (max-width: 425px) {
        #adaptiveTab {
            overflow: hidden;
        }

        #adaptiveTab .e-item.e-active {
            overflow: scroll;
        }
    }
</style>

<script>
    var tabObj;
    function tabCreated() {
        tabObj = document.getElementById('adaptiveTab').ej2_instances[0];
    }

    // Change event funtion for DropDownList component
    function changeHeaderPosition(e) {
        tabObj.headerPlacement = e.itemData.value;
        tabObj.dataBind();
    }

    // Change event funtion for DropDownList component
    function changeOverFlowMode(e) {
        if (e.itemData.value != null && e.itemData.value === 'Scrollable') {
            tabObj.overflowMode = 'Scrollable';
        } else {
            tabObj.overflowMode = 'Popup';
        }
        tabObj.dataBind();
    }
</script>

@section Title{
                    <title>ASP.NET MVC Tabs Responsive Modes Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Responsive Modes in ASP.NET MVC Tabs Control</h1>
                }
@using Syncfusion.EJ2.InteractiveChat
@using Syncfusion.EJ2
@using Newtonsoft.Json

@section ControlsSection{
    <div class="control-section">
        <div class="stream-aiassistview">
            @Html.EJS().AIAssistView("streamAssistView").ToolbarSettings(new AIAssistViewToolbarSettings() { Items = ViewData["ToolbarItems"], ItemClicked = "toolbarItemClicked" }).PromptSuggestions((string[])ViewData["PromptSuggestionData"]).BannerTemplate("#bannerContent").PromptRequest("onPromptRequest").StopRespondingClick("handleStopResponse").Render()
        </div>
    </div>
    @*custom code start*@
    <style>

        .stream-aiassistview {
            height: 600px;
            width: 60vw;
            margin: 0 auto;
        }

            .stream-aiassistview .banner-content .e-assistview-icon:before {
                font-size: 35px;
            }

            .stream-aiassistview .banner-content {
                display: flex;
                flex-direction: column;
                justify-content: center;
                height: 330px;
                text-align: center;
            }

        @@media only screen and (max-width: 750px) {
            .stream-aiassistview {
                width: 100%;
            }
        }
    </style>
    @*custom code end*@
}

@section PreScripts {
    <script>
        var prompts = @Html.Raw(Json.Encode(ViewData["PromptResponseData"]));
        var suggestions = @Html.Raw(Json.Encode(ViewData["PromptSuggestionData"]));
        var stopStreaming = false;
        function handleStopResponse() {
            stopStreaming = true;
        }

        function onPromptRequest(args) {
            var lastResponse = "";
            var streamingResponse = prompts.find((data) => data.Prompt === args.prompt);
            var defaultResponse = "For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.";
            var responseUpdateRate = 10; // Update scroll and streaming response every 10 characters
            const streamResponse = async (Response) => {
                var i = 0;
                var responseLength = Response.length;
                while (i < responseLength && !stopStreaming) {
                    lastResponse += Response[i];
                    i++;
                    if (i % responseUpdateRate === 0 || i === responseLength) {
                        const htmlResponse = marked(lastResponse);
                        this.addPromptResponse(htmlResponse, i === responseLength);
                        this.scrollToBottom();
                    }
                    await new Promise(resolve => setTimeout(resolve, 15)); // Delay before the next chunk
                }
                this.promptSuggestions = (streamingResponse?.SuggestionData && streamingResponse.SuggestionData.length > 0) ? streamingResponse.SuggestionData : suggestions;
            }

            if (streamingResponse) {
                stopStreaming = false;
                streamResponse(streamingResponse.Response);
            } else {
                this.addPromptResponse(defaultResponse, true);
                this.promptSuggestions = suggestions;
            }
        }


        loadExternalFile();
        function loadExternalFile() {
            var script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.19/marked.js';
            document.getElementsByTagName('head')[0].appendChild(script);
        }

        function toolbarItemClicked(args) {
            if (args.item.iconCss === 'e-icons e-refresh') {
                this.prompts = [];
                this.promptSuggestions = suggestions;
            }
        }
    </script>
    <script id="bannerContent" type="text/x-jsrender">
        <div class="banner-content">
            <div class="e-icons e-assistview-icon"></div>
            <h3>AI Assistance</h3>
            <i>Update real-time responses with chunked streaming updates.</i>
        </div>
    </script>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET MVC AIAssistView control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the streaming response update in the <code>AI AssistView</code> control.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, the <code>AI AssistView</code> control dynamically updates responses in a streaming manner using the <code>addPromptResponse</code> method, while the <code>scrollToBottom</code> method ensures automatic scrolling. The <code>BannerTemplate</code> allows customization of the banner content, and <code>ToolbarSettings</code> enables custom toolbar items, including a right-aligned Refresh button. Additionally, <code>PromptSuggestions</code> offers AI-generated prompt suggestions, while <code>PromptRequest</code> processes prompt requests when triggered.
        </p>
        <p>
            This implementation provides an interactive AI chat experience with real-time streaming updates, enhanced by Markdown-to-HTML conversion using the <code>Marked</code> plugin.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC AIAssistView Default Functionalities Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET MVC AIAssistView Control</h1>
}
@using Syncfusion.EJ2.Inputs
@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2
@section ControlsSection {
    <div id="textarea-api"  class="col-lg-8 control-section api">
        <div class="content-wrapper">
            <div class="api-row">
                @Html.EJS().TextArea("api").Placeholder("Enter your comments").FloatLabelType(FloatLabelType.Auto).Render()
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" class="api-property">

            <tr>
                <td class="left-side"> Rows </td>
                <td>
                    @Html.EJS().NumericTextBox("rows").Format("##").Value(2).Max(10).Min(1).Step(1).Change("rowHandler").Render()
                </td>
            </tr>
            <tr>
                <td class="left-side"> Columns </td>
                <td>
                    @Html.EJS().NumericTextBox("cols").Format("##").Value(20).Max(40).Min(5).Step(1).Change("columnHandler").Render()
                </td>
            </tr>
            <tr>
                <td class="left-side">Enable</td>
                <td>
                    @Html.EJS().CheckBox("enabled").Change("enabledHandler").Checked(true).CssClass("api").Render()
                </td>
            </tr>
            <tr>
                <td class="left-side">Read only</td>
                <td>
                    @Html.EJS().CheckBox("readonly").Change("readonlyHandler").Checked(false).CssClass("api").Render()
                </td>
            </tr>
            <tr>
                <td class="left-side"> MaxLength </td>
                <td>
                    @Html.EJS().NumericTextBox("maxlength").Format("##").Value(-1).Step(1).Change("maxLengthHandler").Render()
                </td>
            </tr>
            <tr>
                <td class="left-side"> Value </td>
                <td>
                    @Html.EJS().TextBox("value").Value("").Placeholder("Enter a value").Change("valueHandler").Render()
                </td>
            </tr>
            <tr>
                <td class="left-side">Show clear icon</td>
                <td>
                    @Html.EJS().CheckBox("clearicon").Change("clearIconHandler").Checked(false).CssClass("api").Render()
                </td>
            </tr>
        </table>
    </div>
}
   @*custom code start*@
<style>
    .content-wrapper div.api-row {
        margin: 30px 150px;
    }

    .api-property .left-side {
        font-size: 14px;
        padding: 8px;
    }

    .api-property.property-panel-table div.api {
        padding-left: 0px;
    }

    #textarea-api .e-multi-line-input {
        max-width: 100%;
    }
</style>
    @*custom code end*@
<script type="text/javascript">
    function enabledHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.enabled = args.checked;
    }
    function readonlyHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.readonly = args.checked;
    }
    function maxLengthHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.maxLength = args.value;
    }
    function rowHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.rows = args.value;
    }
    function columnHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.cols = args.value;
    }
    function valueHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.value = args.value;
    }
    function clearIconHandler(args) {
        var textareaObj = document.getElementById('api').ej2_instances[0];
        textareaObj.showClearButton = args.checked;
    }
</script>
@section ActionDescription{
    <div id="action-description">
        <p>
            This example demonstrates the api functionalities of the textarea control. You can customize the appearance and
            behaviour of textarea component by choosing the corresponding option from the property panel.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>The TextArea has the options to customize the appearance and behaviour of the component dynamically by updating
            the following properties:</p>
        <ul>
            <li>Change the number of rows and columns of textarea by updating "Rows" and "Columns" options.</li>
            <li>To make the textarea read-only, check the "read-only" option.</li>
            <li>Disable the textarea by unchecking the "enabled" option.</li>
            <li>Set the maximum length of characters that can be entered in textarea by customizing the "MaxLength" option.
            </li>
            <li>Update the value of textarea by entering text in "Value" option.</li>
            <li>To make the clear button visible, check the "Show clear icon" option..</li>
        </ul>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the api functionalities in ASP.NET MVC TextArea control. Explore here for more details."/>
                }

@section Title{
                    <title>ASP.NET MVC API Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Api in ASP.NET MVC TextArea Control</h1>
                }
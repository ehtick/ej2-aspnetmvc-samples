@using Syncfusion.EJ2.InteractiveChat
@using Syncfusion.EJ2

@section ControlsSection{
    <div class="control-section chat-ui">
        <div class="default-chatui">
            @Html.EJS().ChatUI("chatUser1").HeaderText("Albert").HeaderIconCss("chat_user1_avatar").UserTyping("userOneTyping").MessageSend("messageSendOne").Created("userOneCreated").HeaderToolbar(new ChatUIToolbarSettings() { Items = ViewData["HeaderToolbar1"] }).Messages((List<ChatUIMessage>)ViewData["ChatMessagesData"]).User(new ChatUIUser() { Id = "user2", User = "Reena", AvatarUrl = "./../Content/chatui/images/reena.png" }).Render()
            @Html.EJS().ChatUI("chatUser2").HeaderText("Reena").HeaderIconCss("chat_user2_avatar").UserTyping("userTwoTyping").MessageSend("messageSendTwo").Created("userTwoCreated").Suggestions((string[])ViewData["DefaultChatSuggestions"]).HeaderToolbar(new ChatUIToolbarSettings() { Items = ViewData["HeaderToolbar2"] }).Messages((List<ChatUIMessage>)ViewData["ChatMessagesData"]).User(new ChatUIUser() { Id = "user1", User = "Albert", AvatarUrl = "./../Content/chatui/images/andrew.png" }).Render()
        </div>
    </div>
    @*custom code start*@
    <style>
        .default-chatui {
            height: 500px;
            width: 65%;
            margin: 0 auto;
            display: flex;
            flex-direction: row;
            gap: 50px;
        }

        .default-chatui .chat_user1_avatar {
            background-image: url('./../Content/chatui/images/andrew.png');
            background-color: unset;
        }

        .default-chatui .chat_user2_avatar {
            background-image: url('./../Content/chatui/images/reena.png');
            background-color: unset;
        }

        @@media only screen and (max-width: 850px) {
            .default-chatui {
                flex-direction: column;
                height: 500px;
                width: 80%;
            }

            .chat-ui.control-section {
                height: 1050px;
            }
        }
    </style>
    @*custom code end*@
}

@section PreScripts {
    <script>
        var defaultChatUIObj1;
        var defaultChatUIObj2;
        function userOneCreated() {
            defaultChatUIObj1 = ej.base.getInstance(document.getElementById('chatUser1'), ejs.interactivechat.ChatUI);
            var dropdownObj = new ej.splitbuttons.DropDownButton({
                items: [
                    { text: 'Mute', iconCss: 'e-icons e-eye-slash' },
                    { separator: true },
                    { text: 'Delete', iconCss: 'e-icons e-trash' }
                ],
                iconCss: 'e-icons e-more-horizontal-1',
                cssClass: 'e-caret-hide',
                select: (args) => {
                    if (['Mute', 'Unmute'].includes(args.item.text)) {
                        args.item.text = args.item.text === 'Mute' ? 'Unmute' : 'Mute';
                    }
                    if (args.item.text === 'Delete') {
                        defaultChatUIObj1.messages = [];
                    }
                }
            }, '#dduser1Menu');
        }

        function userTwoCreated() {
            defaultChatUIObj2 = ej.base.getInstance(document.getElementById('chatUser2'), ejs.interactivechat.ChatUI);
            var dropdownObj = new ej.splitbuttons.DropDownButton({
                items: [
                    { text: 'Mute', iconCss: 'e-icons e-eye-slash' },
                    { separator: true },
                    { text: 'Delete', iconCss: 'e-icons e-trash' }
                ],
                iconCss: 'e-icons e-more-horizontal-1',
                cssClass: 'e-caret-hide',
                select: (args) => {
                    if (['Mute', 'Unmute'].includes(args.item.text)) {
                        args.item.text = args.item.text === 'Mute' ? 'Unmute' : 'Mute';
                    }
                    if (args.item.text === 'Delete') {
                        defaultChatUIObj2.messages = [];
                    }
                }
            }, '#dduser2Menu');
        }

        function messageSendOne(args) {
            defaultChatUIObj1.suggestions = [];
            defaultChatUIObj2.addMessage(args.message);
        }

        function messageSendTwo(args) {
            defaultChatUIObj2.suggestions = [];
            defaultChatUIObj1.addMessage(args.message);
        }

        function userOneTyping(args) {
            handleUserTyping(args, defaultChatUIObj2);
        }

        function userTwoTyping(args) {
            handleUserTyping(args, defaultChatUIObj1);
        }

        function handleUserTyping(args, otherChatUser) {
            if (!args.isTyping) {
                otherChatUser.typingUsers = otherChatUser.typingUsers.filter(userItem => userItem.user !== args.user.user);
            } else {
                if (!otherChatUser.typingUsers.some(userItem => userItem.user === args.user.user)) {
                    otherChatUser.typingUsers = [...otherChatUser.typingUsers, args.user];
                }
            }
        }
    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET MVC ChatUI control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the features of the Chat UI control, designed to simulate a real-time chat interface. It highlights customizable elements like headers, avatars, synchronized messaging update, and real-time typing indicators.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, two Chat UI web controls are used to represent users <b>Albert</b> and <b>Reena</b>, each with a unique header, avatar, and toolbar. Messages are instantly synchronized between the two users through the <code>messageSend</code> event, while typing indicators are shown in the other chat interface via the <code>userTyping</code> event, adding a more interactive feel.
            This example demonstrates how to use the Chat UI control to display chat messages for multiple users. The chat interface allows switching between users' conversations, with bot responses triggered by user input. A header toolbar is included, and a splitter layout displays the chat alongside a list view for easy navigation.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC ChatUI Default Functionalities Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET MVC ChatUI Control</h1>
}
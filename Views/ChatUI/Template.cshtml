@using Syncfusion.EJ2.InteractiveChat
@using Syncfusion.EJ2
@using Newtonsoft.Json

@section ControlsSection{
    <div class="control-section">
        <div class="template-chatui">
            @Html.EJS().ChatUI("chatTemplate").HeaderText("Order Assistant").HeaderIconCss("chat-bot").ShowTimeBreak(true).ShowFooter(false).AutoScrollToBottom(true).EmptyChatTemplate("#emptyChatTemplate").MessageTemplate("#messageTemplate").TimeBreakTemplate("#timeBreakTemplate").MessageSend("onMessageSend").Created("onCreated").User(new ChatUIUser() { Id = "admin", User = "Alice", AvatarUrl = "./../Content/chatui/images/bot.png" }).Render()
        </div>
    </div>
    @*custom code start*@
    <style>
        .template-chatui {
            height: 500px;
            width: 40%;
            margin: 0 auto;
        }

        .template-chatui .chat-bot {
            background-image: url('./../Content/chatui/images/bot.png');
            background-color: unset;
        }

        .template-chatui .emptyChatText {
            font-size: 16px;
            font-style: italic;
        }

        .template-chatui .emptychat-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
            align-items: center;
            padding: 10px;
        }

        .template-chatui .e-right .message-items {
            border-radius: 16px 16px 2px 16px;
        }

        .template-chatui .e-left .message-items {
            border-radius: 16px 16px 16px 2px;
        }

        .template-chatui .message-user {
            height: 30px;
            width: 30px;
            margin-right: 3px;
        }

        .template-chatui .e-left .message-template,
        .template-chatui .e-right .message-template {
            display: flex;
            align-items: flex-end;
        }

        .template-chatui .message-items.e-card {
            line-height: 20px;
            box-shadow: none;
            background: none;
        }

        body[class*="material3"] .template-chatui .message-items.e-card {
            border: 1px solid rgb(230, 227, 227);
        }

        .template-chatui .message-items.e-card:hover {
            background-color: unset;
        }

        .template-chatui .e-left .message-template {
            flex-direction: row;
        }

        .template-chatui .e-right .message-template {
            flex-direction: column;
        }

        .template-chatui .message-text {
            margin: 5px;
            padding: 4px;
            font-size: 14px;
        }

        .template-chatui .message-suggestions {
            margin: 10px 30px;
            display: flex;
            gap: 5px;
        }

        .template-chatui .suggestion-button {
            border-radius: 8px;
            cursor: pointer;
            padding: 5px 12px;
            font-size: 13px;
        }

        @@media only screen and (max-width: 850px) {
            .template-chatui {
                width: 70%;
            }

            .template-chatui .message-suggestions {
                flex-direction: column;
                width: 80%;
            }

            .template-chatui .message-suggestions .suggestion-button {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
        }
    </style>
    @*custom code end*@
}

@section PreScripts {
    <script>
    var chatUIObj;
    var templateMessageData = @Html.Raw(JsonConvert.SerializeObject(ViewData["TemplateMessagedata"]))
    function onCreated() {
        chatUIObj = ej.base.getInstance(document.getElementById('chatTemplate'), ejs.interactivechat.ChatUI);
        setTimeout(() => {
            var message = {
                author: { id: 'bot', user: 'Bot', avatarUrl: './../Content/chatui/images/bot.png' },
                text: templateMessageData[0].text,
                suggestions: templateMessageData[0].suggestions
            };
            chatUIObj.addMessage(message);
            bindClickAction();
        }, 1500);
    }

    function bindClickAction() {
        chatUIObj.element.querySelectorAll('.suggestion-button').forEach(suggestion => {
            suggestion.addEventListener('click', () => handleSuggestionClick(suggestion));
        });
    }

    function handleSuggestionClick(suggestion) {
        const message = templateMessageData.find((message) => message.text === suggestion.innerText);
        if (message) {
            chatUIObj.addMessage(message.text);
            setTimeout(() => {
                var messageModel = {
                    author: { id: 'bot', user: 'Bot', avatarUrl: './../Content/chatui/images/bot.png' },
                    text: message.reply,
                    suggestions: message.suggestions
                };
                chatUIObj.addMessage(messageModel);
                bindClickAction();
                if (message.suggestions.length === 0) { chatUIObj.showFooter = true; }
            }, 500);
            suggestion.parentElement.innerHTML = '';
        }
    }

    function onMessageSend(args) {
        setTimeout(() => {
            var defaultResponse = "Unfortunately, I don't have information on that. Use any real-time data streaming service to provide chat updates.";
            var message = {
                author: { id: 'bot', user: 'Bot', avatarUrl: './../Content/chatui/images/bot.png' },
                text: defaultResponse
            };
            chatUIObj.addMessage(message);
        }, 500);
    }

    function formatDate(messageDate) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const dateToCompare = new Date(messageDate);
        dateToCompare.setHours(0, 0, 0, 0);
        return dateToCompare.getTime() === today.getTime() ? 'Today' : messageDate.toDateString();
    }

    function renderSuggestion(message) {
        return message.suggestions.map(suggestion => `<button class="suggestion-button e-btn e-primary e-outline">${suggestion}</button>`).join('');
    }

    </script>
    <script id="emptyChatTemplate" type="text/x-jsrender">
        <div class="emptychat-content">
            <h3><span class="e-icons e-comment-show"></span></h3>
            <div class="emptyChatText" style="font-size: 16px;">Just a second, we're preparing your chat...</div>
        </div>
    </script>
    <script id="messageTemplate" type="text/x-jsrender">
        <div class="message-wrapper">
            <div class="message-template">
                ${if(message.author.id !== 'admin')}
                <img class="message-user" src="${message.author.avatarUrl}" alt="${message.author.user}">
                ${/if}
                <div class="message-items e-card">
                    <div class="message-text">${message.text}</div>
                </div>
            </div>
            <div class="suggestion-container">
                ${if(message.suggestions && message.suggestions.length > 0 && message.author.id !== 'admin')}
                <div class="message-suggestions">${renderSuggestion(message)}</div>
                ${/if}
            </div>
        </div>
    </script>
    <script id="timeBreakTemplate" type="text/x-jsrender">
        <div class="timebreak-template">
            ${formatDate(messageDate)}
        </div>
    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Template in ASP.NET MVC Chat UI control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the template functionality of the Chat UI control, showing how you can customize various elements of the chat interface. It highlights the ability to adjust the appearance of message items, time breaks, and empty chat screens using templates.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, a bot provides order tracking updates by customizing each message using the templates. The <code>messageTemplate</code> property controls the layout of messages, including the avatar, message content, and suggestions. The <code>timeBreakTemplate</code> adjusts the display of time breaks, showing either "Today" or the specific date.
        </p>
        <p>
            The bot sends a default response when a message is sent, and suggestions appear below the message. When a suggestion is clicked, the bot replies with a new message or set of suggestions, demonstrating how templates enhance the interaction flow within the Chat UI control.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC Chat UI Template Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Template in ASP.NET MVC Chat UI Control</h1>
}
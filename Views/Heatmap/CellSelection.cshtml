@using Syncfusion.EJ2;
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Heatmap control shows how to select the cell." />
}
@section ControlsSection{
    <div class="col-md-9 control-section">
        <div id="container" style="height:300px" align="center">
            @Html.EJS().HeatMap("container").TitleSettings(ts =>
            ts.Text("Top export products 2014-2018, Value in USD million")).XAxis(xAxis =>
            xAxis.Labels(ViewData["xLabels"])).YAxis(yaxis =>
            yaxis.Labels(ViewData["yLabels"])).AllowSelection(true).PaletteSettings(ps => ps.Palette(palette =>
            {
                palette.Color("#3C5E62").Add();
                palette.Color("#86C843").Add();

            })).CellSelected("cellSelected").LegendSettings(ls=>ls.Visible(false)).ShowTooltip(true).Load("load").DataSource(ViewData["dataSource"]).Render()
        </div>
        <div id="container1" style="height:300px" align="center">
            @Html.EJS().Chart("container1").PrimaryXAxis(
            px => {
                px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg=>mg.Width(0)).
                Interval(1);
            }).PrimaryYAxis(
           py => {
               py.
               MajorGridLines(mg=>mg.Width(0)).MajorTickLines(mt=>mt.Width(0)).LineStyle(ls=>
               ls.Width(0)).LabelStyle(ls=>ls.Color("transparent"));
           }).Tooltip(
           tooltip => {
               tooltip.Enable(true);
           }).ChartArea(area => area.Border(br => br.Width(0))).Series(series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl=>dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource1"]).Width(2).Name("Cereals").Add();
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl => dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource2"]).Width(2).Name("Meat").Add();
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl => dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource3"]).Width(2).Name("Spices").Add();
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl => dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource4"]).Width(2).Name("Tea").Add();
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl => dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource5"]).Width(2).Name("Edible Oil").Add();
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl => dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource6"]).Width(2).Name("Dairy Products").Add();
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.DataLabel(dl => dl.Visible(false))).XName("x").YName("y")
               .DataSource(ViewData["dataSource7"]).Width(2).Name("Wheat").Add();
           }).Load("chartLoad").Render()
        </div>
    </div>

    <div class="col-md-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 40%;">
                        <div>
                            <button id="clearSelection">Clear Selection</button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    <script>
        var cellSelected = function (args) {
            var data = args.data
            var length = data.length;
            var xAxis = [];
            var flag = []
            var series = [];
            var chart = document.getElementById('container1').ej2_instances[0];
            for (let i = 0; i < length; i++) {
                if (xAxis.indexOf(data[i].xLabel) === -1) {
                    xAxis.push(data[i].xLabel);
                    flag.push(false);
                }
            }
            for (var i = 0; i < length; i++) {
                var index = xAxis.indexOf(data[i].xLabel);
                if (!flag[index]) {
                    flag[index] = true;
                    var column = {};
                    column.type = 'Column';
                    column.xName = 'x';
                    column.yName = 'y';
                    column.width = 2;
                    column.name = data[i].xLabel;
                    column.marker = { dataLabel: { visible: false } };
                    column.dataSource = [];
                    var columnData = {};
                    columnData.x = data[i].yLabel;
                    columnData.y = data[i].value;
                    column.dataSource.push(columnData);
                    series.push(column);
                }
                else {
                    var columnData = {};
                    columnData.x = data[i].yLabel;
                    columnData.y = data[i].value;
                    series[index].dataSource.push(columnData);
                }
            }
            chart.series = series;
            chart.refresh();
        };

        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.heatmap.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
            selectedTheme = selectedTheme.toLowerCase();
        };
        var chartLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));

        };
        var button = new ej.buttons.Button();
        button.appendTo('#clearSelection');
        document.getElementById('clearSelection').onclick = () => {
            var heatMap = document.getElementById('container').ej2_instances[0];
            var chart = document.getElementById('container1').ej2_instances[0];
            heatMap.clearSelection();
            chart.series = [{
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Cereals",
                "dataSource": [{ "x": "2014", "y": 2.9 }, { "x": "2015", "y": 5.2 }, { "x": "2016", "y": 3.4 }, { "x": "2017", "y": 5.6 }, { "x": "2018", "y": 4.4 }],
                "marker": { "dataLabel": { "visible": false } }
            },
            {
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Meat",
                "dataSource": [{ "x": "2014", "y": 6.6 }, { "x": "2015", "y": 4.8 }, { "x": "2016", "y": 8 }, { "x": "2017", "y": 3.9 }, { "x": "2018", "y": 6.5 }],
                "marker": { "dataLabel": { "visible": false } }
            },
            {
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Spices",
                "dataSource": [{ "x": "2014", "y": 5.1 }, { "x": "2015", "y": 4.6 }, { "x": "2016", "y": 5.4 }, { "x": "2017", "y": 3.9 }, { "x": "2018", "y": 4.3 }],
                "marker": { "dataLabel": { "visible": false } }
            },
            {
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Tea",
                "dataSource": [{ "x": "2014", "y": 5.2 }, { "x": "2015", "y": 4.3 }, { "x": "2016", "y": 3.9 }, { "x": "2017", "y": 6.2 }, { "x": "2018", "y": 6.4 }],
                "marker": { "dataLabel": { "visible": false } }
            },
            {
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Edible Oil",
                "dataSource": [{ "x": "2014", "y": 7 }, { "x": "2015", "y": 3 }, { "x": "2016", "y": 1.9 }, { "x": "2017", "y": 5.9 }, { "x": "2018", "y": 3.5 }],
                "marker": { "dataLabel": { "visible": false } }
            },
            {
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Dairy Products",
                "dataSource": [{ "x": "2014", "y": 7.8 }, { "x": "2015", "y": 5.9 }, { "x": "2016", "y": 3.9 }, { "x": "2017", "y": 4.3 }, { "x": "2018", "y": 4.5 }],
                "marker": { "dataLabel": { "visible": false } }
            },
            {
                "type": "Column", "xName": "x", "width": 2, "yName": "y", "name": "Wheat",
                "dataSource": [{ "x": "2014", "y": 6.5 }, { "x": "2015", "y": 4.3 }, { "x": "2016", "y": 3.9 }, { "x": "2017", "y": 5.2 }, { "x": "2018", "y": 3.9 }],
                "marker": { "dataLabel": { "visible": false } }
            }
            ];
            chart.refresh();
        };

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the revenue from the top exported products between the year 2014 and 2018, valued in USD million
    </p>
}
@section Description{
    <p>
        In this example, you can see how to select the cell in heat map and render the column chart based on selected data.
    <p>

    <p>
        Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <br>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Heatmap component features are segregated into individual feature-wise modules. To use a tooltip, inject the <code>Tooltip</code> module
        using the <code>Heatmap.Inject(Tooltip)</code> method, and use a legend by injecting the <code>Legend</code> module using the
        <code>Heatmap.Inject(Legend)</code> method.
    </p>
}

@using Syncfusion.EJ2;
@section Meta{
    <meta name="description" content="This demo for Essential JS2 Heatmap control demonstrates applying gradient colors or solid colors for the heatmap cells" />
}
@section ControlsSection{
    <div>
        <div class="col-md-8 control-section">
            <div class="content-wrapper">
                <div id="container" style="width:92%">
                    @Html.EJS().HeatMap("container").PaletteSettings(ps =>
                         ps.Palette(palette =>
                         {
                             palette.Value(4.3).Color("#FFFFDA").Add();
                             palette.Value(7).Color("#EDF8B6").Add();
                             palette.Value(9).Color("#CAE8B4").Add();
                             palette.Value(15).Color("#78D1BD").Add();
                             palette.Value(18).Color("#36BCC6").Add();
                             palette.Value(25).Color("#208FC6").Add();
                             palette.Value(30).Color("#253494").Add();
                             palette.Value(32).Color("#081D58").Add();
                         }).Type(Syncfusion.EJ2.HeatMap.PaletteType.Fixed)).Load("load").LegendSettings(ls =>
                      ls.Position(Syncfusion.EJ2.HeatMap.LegendPosition.Bottom).EnableSmartLegend(true).Width("400px")).CellSettings(cs =>
                      cs.Border(ViewData["border"]).ShowLabel(false)).TitleSettings(ts => ts.Text("U.S. Government Energy Consumption by Agency (Trillion Btu)").TextStyle(ViewData["textStyle"])).XAxis(
                         xAxis =>
                         {
                             xAxis.LabelRotation(45)
                            .LabelIntersectAction(Syncfusion.EJ2.HeatMap.LabelIntersectAction.None)
                            .Labels(ViewData["xlabels"]);
                         }).YAxis(yaxis => yaxis.Labels(ViewData["yLabels"])).DataSource(ViewData["dataSource"]).Render()
                </div>
            </div>
        </div>
        <div class="col-md-4 property-section">
            <table id="property" title="Properties" style="width: 100%">
                <tbody>
                    <tr style="height: 50px">
                        <td style="width: 60%">
                            <div>Palette Type:</div>
                        </td>
                        <td style="width: 40%;">
                            <div class="row">
                                <input id="fixed" type="radio">
                            </div>
                            <div class="row">
                                <input id="gradient" type="radio">
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td style="width: 60%">
                            <div style="margin-top: 22px">Enable Smart Legend:</div>
                        </td>
                        <td style="width: 40%;">
                            <div>
                                <div class="row" style="margin-left: -22px">
                                    <input id="smartLegend" type="checkbox">
                                </div>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    <script>
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.heatmap.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));
        };
        var fixedRadioButton = new ej.buttons.RadioButton({
            label: 'Fixed', name: 'paletteType',
            change: function () { valueXChange(); }, value: 'Fixed', checked: true
        });
        fixedRadioButton.appendTo('#fixed');

        var gradientradioButton = new ej.buttons.RadioButton({
            label: 'Gradient', name: 'paletteType',
            change: function () { valueXChange(); }, value: 'Gradient'
        });
        gradientradioButton.appendTo('#gradient');

        var smartLegend = new ej.buttons.CheckBox({
            name: 'enableSmartLegend',
            change: function () { valueChange(); }, checked: true
        });
        smartLegend.appendTo('#smartLegend');

        function valueXChange() {
            var heatMap = document.getElementById('container').ej2_instances[0];
            smartLegend.disabled = fixedRadioButton.checked ? false : true;
            heatMap.paletteSettings.type = fixedRadioButton.checked ? 'Fixed' : 'Gradient';
        }

        function valueChange() {
            var heatMap = document.getElementById('container').ej2_instances[0];
            heatMap.legendSettings.enableSmartLegend = smartLegend.checked;
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes the energy consumption in trillion British thermal units (btu) by the various public sectors in US government over the years. The data label is disabled in this sample, the tooltip displays the data point values.  In property panel, the options are available to change palette type in Heatmap by means of radio button.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to change the palette type between <code>Fixed </code> and <code>Gradient </code> types in Heatmap. The palette type can be defined using the <code>type </code> property in <code>paletteSettings </code>. Legend is enabled in this example, when changing the palette mode, the legend type will be automatically switched between gradient legend and list type legend.
    </p>
    <p>
        Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <br>
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        Heatmap component features are segregated into individual feature-wise modules. To use a tooltip, inject the <code>Tooltip </code> module using the <code>Heatmap.Inject(Tooltip) </code> method, and use a legend by injecting the <code>Legend </code> module using the <code>Heatmap.Inject(Legend) </code> method.
    </p>
}

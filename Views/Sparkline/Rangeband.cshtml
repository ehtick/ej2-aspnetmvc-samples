@using Syncfusion.EJ2;

@section ControlsSection{
    @{
        var data = new[] {
             new {  id= 1, name= "Product A",previousYear= 10, lastYear= 20 },
             new {  id= 2, name= "Product B",previousYear= 20, lastYear= 30 },
             new {  id= 3, name= "Product C",previousYear= 30, lastYear= 20 },
             new {  id= 4, name= "Product D",previousYear= 40, lastYear= 10 },
             new {  id= 5, name= "Product E",previousYear= 20, lastYear= 30 },
};

    }
    <div class="col-lg-8 control-section">
        <div id="spark-container" class="row">
            <div class="cols-sample-area" align="center">
                <p>
                    <font size=4px> Sales Growth Comparison with various Products</font>
                </p>
                <script type="text/x-template" id="columnTemplate1">
                    <div id="sparkline2010${id}" />
                </script>
                <script type="text/x-template" id="columnTemplate2">
                    <div id="sparkline2011${id}" />
                </script>
                <div id="Grid">
                    @Html.EJS().Grid("Grid").Created("created").DataSource(data).AllowSelection(false).EnableColumnVirtualization(false).EnableHover(true).Height("400px").Columns(column =>
               {
                   column.Field("name").HeaderText("Name").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("150").Add();
                   column.HeaderText("2010").Template("#columnTemplate1").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Width("200").Add();
                   column.HeaderText("2011").Template("#columnTemplate2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Width("200").Add();
               }).Render()
                </div>
            </div>
        </div>
    </div>

    <style>
        td {
            padding: 10px;
        }

        .e-headertext {
            font-weight: bolder;
        }

        #range-min > * {
            padding: 0px !important;
        }

        #range-max > * {
            padding: 0px !important;
        }
    </style>
    <div class="col-lg-4 property-section">
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        <br>
        <table id="property" style="width:100%" title="Properties">
            <tbody>
                <tr style="height: 30px ">
                    <td style="width: 50% ">
                        Range Band Min 1
                    </td>
                    <td style="width: 50% ">
                        <div id="range-min"></div>
                    </td>
                </tr>
                <tr style="height: 30px ">
                    <td style="width: 50% ">
                        Range Band Max 3
                    </td>
                    <td style="width: 50% ">
                        <div id="range-max"></div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script src="~/Scripts/Sparkline/theme-color.js"></script>
    <script type="text/javascript">
        var lineData = [
            [0, 6, 4, 1, 3, 2, 5],
            [5, 4, 6, 3, 1, 2, 0],
            [6, 4, 0, 3, 2, 5, 1],
            [4, 6, 3, 0, 1, 2, 5],
            [3, 5, 6, 4, 0, 1, 2],
            [1, 3, 4, 2, 5, 0, 6],
            [2, 4, 0, 3, 5, 6, 1],
            [5, 4, 6, 3, 1, 2, 0],
            [0, 6, 4, 1, 3, 2, 5],
            [6, 4, 0, 3, 2, 5, 1],
            [4, 6, 3, 0, 1, 2, 5],
            [3, 5, 6, 4, 0, 1, 2],
            [1, 3, 4, 2, 5, 0, 6],
            [2, 4, 0, 3, 5, 6, 1],
            [5, 4, 6, 3, 1, 2, 0],
            [0, 6, 4, 1, 3, 2, 5],
            [6, 4, 0, 3, 2, 5, 1],
            [4, 6, 3, 0, 1, 2, 5],
            [2, 4, 0, 3, 5, 6, 1],
            [3, 5, 6, 4, 0, 1, 2],
            [1, 3, 4, 2, 5, 0, 6]
        ];
        var firstSparkLines = [];
        var secondSparkLines = [];

        function created(args) {
            setTimeout(() => {
                for (var i = 1; i <= 5; i++) {
                    var first = new ej.charts.Sparkline({
                        load: function (args) {
                            loadSparkLineTheme(args);
                        },
                        height: '50px',
                        width: '150px',
                        lineWidth: 2,
                        fill: '#0d3c9b',
                        dataSource: lineData[0],
                        rangeBandSettings: [
                            {
                                startRange: 1, endRange: 3, color: '#bfd4fc'
                            }
                        ]
                    });
                    first.dataSource = lineData[i];
                    firstSparkLines.push(first);
                    first.appendTo('#sparkline2010' + i);
                    var second = new ej.charts.Sparkline({
                        load: function (args) {
                            loadSparkLineTheme(args);
                        },
                        height: '50px',
                        width: '150px',
                        lineWidth: 2,
                        fill: '#0d3c9b',
                        dataSource: lineData[0],
                        rangeBandSettings: [
                            {
                                startRange: 1, endRange: 3, color: '#bfd4fc'
                            }
                        ]
                    });
                    second.dataSource = lineData[i + 5];
                    second.appendTo('#sparkline2011' + i);
                    secondSparkLines.push(second);
                }
            }, 1000);

        }

        var sliderChange1;
        var sliderChange2;
        var slider1 = new ej.inputs.Slider({
            value: 1,
            change: sliderChange1,
            max: 6, min: 0, type: 'MinRange',
        }, '#range-min');
        var slider2 = new ej.inputs.Slider({
            value: 3,
            change: sliderChange2,
            max: 6, min: 0, type: 'MinRange',
        }, '#range-max');
        slider1.change = sliderChange1 = function (e) {
            changeRangeMin(e.value);
        };
        slider2.change = sliderChange2 = function (e) {
            changeRangeMax(e.value);
        };
        var changeRangeMin = function (min) {
            for (var i = 1; i < 6; i++) {
                var first = ej.base.getInstance('#sparkline2010' + i, ej.charts.Sparkline);
                var second = ej.base.getInstance('#sparkline2011' + i, ej.charts.Sparkline);
                first.rangeBandSettings[0].startRange = min;
                second.rangeBandSettings[0].startRange = min;
                first.refresh();
                second.refresh();
            }
        };
        var changeRangeMax = function (max) {
            for (var i = 1; i < 6; i++) {
                var first = ej.base.getInstance('#sparkline2010' + i, ej.charts.Sparkline);
                var second = ej.base.getInstance('#sparkline2011' + i, ej.charts.Sparkline);
                first.rangeBandSettings[0].endRange = max;
                second.rangeBandSettings[0].endRange = max;
                first.refresh();
                second.refresh();
            }
        };
    </script>

}
@section ActionDescription{
    <p>
        This sample depicts the range band feature and its customization options available in sparklines.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Range Band in ASP.NET MVC Sparkline Charts control. Explore here for more details."/>
                }
@section Description{
    <p>
        In this example, you can see how to render sparkline with range band and the customization options available in range band. Here, the sparklines are placed inside the data grid control.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Sparkline Charts Range Band Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Range Band in ASP.NET MVC Sparkline Charts Control</h1>
                }
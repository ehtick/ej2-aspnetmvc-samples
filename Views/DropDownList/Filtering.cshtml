@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using EJ2MVCSampleBrowser.Models
@using Newtonsoft.Json
@section ControlsSection{
    <div class="col-lg-9 control-section" style="height: 400px;">
        <div class='control-wrapper'>
            <div style='padding-top:75px;'>
                @Html.EJS().DropDownList("country").Placeholder("Select a country").FilterBarPlaceholder("Search").AllowFiltering(true).DataSource(
                  (IEnumerable<Countries>)ViewData["data"]).Filtering("onfiltering").Fields(new DropDownListFieldSettings { Text = "Name", Value = "Code" }).DebounceDelay(300).Render()
            </div>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tr>
                <td style="padding-top: 10px">
                    <label class="example-label">Debounce Delay</label>
                    @Html.EJS().NumericTextBox("numeric").Format("n0").Value(300).Min(1).Change("change").Render()
                </td>
            </tr>
        </table>
    </div>

    @*custom code start*@
    <style>
        .control-wrapper {
            margin: 0 auto;
            width: 250px;
        }
    </style>
    @*custom code end*@
    <script type="text/javascript">
        function onfiltering(e) {
            var query = new ej.data.Query();
            query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
            e.updateData(@Html.Raw(JsonConvert.SerializeObject(ViewData["data"])), query);
        }
        function change(args) {
            var dropdownListObj = document.getElementById('country').ej2_instances[0];
            dropdownListObj.debounceDelay = args.value;
        }
    </script>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Filtering in ASP.NET MVC Dropdown List control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the filtering functionalities of the DropDownList. Click the DropDownList element and then type a character in the search box. It will display the
            filtered list items based on the typed characters.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The DropDownList has built-in support to filter the data source, when <code>allowFiltering</code> is enabled. It performs
            when characters are typed in the search box. In the <code>filtering</code> event, you can filter down the data source and
            return the resulted data to DropDownList via <code>updateData</code> method to display its list items. The debounce delay, in milliseconds, for filtering items in the DropDownList component can be set using the <code>DebounceDelay</code> property.
        </p>
        <p>This sample illustrates that, query the data source and pass the resulted data to DropDownList through the <code>updateData</code> method in <code>filtering</code> event.</p>
        <p>
            More information on the filtering feature configuration can be found in the
            <a href="http://ej2.syncfusion.com/aspnet/documentation/?syntax=razor" target="_blank" aria-label="documentation section"> documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC Dropdown List Filtering Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Filtering in ASP.NET MVC Dropdown List Control</h1>
}
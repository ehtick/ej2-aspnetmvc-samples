@using EJ2MVCSampleBrowser.Models
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2
@section ControlsSection{
    <div class="col-lg-12 control-section">
        <div class='control-wrapper'>
            <div class="padding-top">

                @Html.EJS().DropDownList("country").Change("countrychange").Placeholder("Select a country").PopupHeight("auto").DataSource((IEnumerable<Country>)ViewData["country"]).Fields(new DropDownListFieldSettings { Text = "CountryName", Value = "CountryId" }).Render()


            </div>
            <div class="padding-top">

                @Html.EJS().DropDownList("state").Change("statechange").Placeholder("Select a state").Enabled(false).PopupHeight("auto").DataSource((IEnumerable<State>)ViewData["state"]).Fields(new DropDownListFieldSettings { Text = "StateName", Value = "StateId" }).Render()

            </div>
            <div class="padding-top">

                @Html.EJS().DropDownList("city").Placeholder("Select a city").Enabled(false).PopupHeight("auto").DataSource((IEnumerable<Cities>)ViewData["cities"]).Fields(new DropDownListFieldSettings { Text = "CityName", Value = "CityId" }).Render()
            

            </div>
        </div>
    </div>

    @*custom code start*@
    <style>
        .control-wrapper {
            margin: 0 auto;
            width: 250px;
        }

        .control-section .padding-top {
            padding-top: 35px
        }
    </style>
    @*custom code end*@
    <script type="text/javascript">
        function countrychange() {
            // disable the state DropDownList
            var state = document.getElementById('state').ej2_instances[0];
            var city = document.getElementById('city').ej2_instances[0];
            var country = document.getElementById('country').ej2_instances[0];
            state.enabled = true;
            //frame the query based on selected value in country DropDownList.
            var tempQuery = new ej.data.Query().where('CountryId', 'equal', country.value);
            // set the framed query based on selected value in country DropDownList.
            state.query = tempQuery;
            // set null value to state DropDownList text property
            state.text = null;
            //  bind the property changes to state DropDownList
            state.dataBind();
            // set null value to city DropDownList text property
            city.text = null;
            // disable the city DropDownList
            city.enabled = false;
            // bind the property changes to City DropDownList
            city.dataBind();
        }
        function statechange() {
            var city = document.getElementById('city').ej2_instances[0];
            var state = document.getElementById('state').ej2_instances[0];
            city.enabled = true;
            //Query the data source based on state DropDownList selected value
            var tempQuery = new ej.data.Query().where('StateId', 'equal', state.value);
            //set the framed query based on selected value in city DropDownList.
            city.query = tempQuery;
            //clear the existing selection
            city.text = null;
            //bind the property change to city DropDownList
            city.dataBind();

        }
    </script>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Cascading in ASP.NET MVC Dropdown List control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the cascading functionalities of the DropDownList. Choose a country from
            the countries DropDownList, then respective states will be loaded in the second DropDownList
            and the same has to be done between states and cities DropDownList.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The <code>Cascading</code> DropDownList is the series of DropDownList, where the value of one DropDownList depends on
            the another DropDownList value. This can be configured by using the <code>change</code> event of parent DropDownList.
            Within that change event handler, you should load the data to child DropDownList based on the selected value of parent
            DropDownList.
        </p>

        <p>
            In this sample, if a country is selected from countries DropDownList, the respective states will be loaded in the second DropDownList
            and the same has to be done between states and cities DropDownList.
        </p>
        <p>
            More information on the Cascading feature configuration can be found in the
            <a href="http://ej2.syncfusion.com/aspnet/documentation/?syntax=razor" target="_blank" aria-label="documentation section"> documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Dropdown List Cascading Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Cascading in ASP.NET MVC Dropdown List Control</h1>
                }
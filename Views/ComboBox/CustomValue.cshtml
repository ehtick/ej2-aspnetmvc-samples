@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2
@using EJ2MVCSampleBrowser.Models
@section ControlsSection{
    <div class="control-section">
        <div class='control-wrapper'>
            <div style='padding-top:75px;'>


                @Html.EJS().ComboBox("country").Placeholder("Select a country").AllowFiltering(true).Filtering("onfiltering").PopupHeight("300px").Width("300px").DataSource((IEnumerable<Countries>)ViewData["data"]).NoRecordsTemplate("<div>"
             + "<div id=\"nodata\"> No matched item, do you want to add it as new item in list?</div>"
              + "<button id=\"btn\" class=\"e-control e-btn\">Add New Item</button></div>").Fields(new ComboBoxFieldSettings { Text = "Name", Value = "Code" }).Render()
            </div>
        </div>
    </div>
    <script type="text/javascript">
        function onfiltering(e) {
            var country = document.getElementById('country').ej2_instances[0];
            var query = new ej.data.Query();
            // frame the query based on search string with filter type.
            query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
            // pass the filter data source, filter query to updateData method.
            e.updateData(country.dataSource, query);
            if (document.getElementById('nodata')) {
                // bind click event to button which is shown in popup element when the typed character(s) is not present in the list
                document.getElementById('btn').onclick = function() {
                    // get the typed characters
                    var customValue = (document.getElementById('country')).value;
                    // make new object based on typed characters
                    var newItem = { 'Name': customValue, 'Code': customValue };
                    // new object added to data source.
                    (country.dataSource).push(newItem);
                    // close the popup element.
                    country.hidePopup();
                    // pass new object to addItem method.
                    country.addItem(newItem);
                    // select the newly added item.
                    country.value = customValue;
                };
            }

        }
    </script>

    @*custom code start*@

    <style>
        .control-wrapper {
            margin: 0 auto;
            width: 250px;
        }

        #nodata {
            height: 55px;
            opacity: .7;
        }
    </style>
    @*custom code end*@
}
@section Meta{
                    <meta name="description" content="This example demonstrates the CustomValue in ASP.NET MVC ComboBox control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the custom value functionalities of the ComboBox. When the typed character(s) is not present in the list, a button will be shown in the popup list.
            By clicking on this button, the custom value character is added in the existing list as a new item.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The ComboBox allows the user to give input as <code>custom value</code> which is not required to
            present in the predefined set of values. By default, this support is enabled by <code>allowCustom</code>
            property. In this case, both text field and value field are considered as same. The custom value will be
            sent to post back handler when a form is about to be submitted.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC ComboBox CustomValue Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of CustomValue in ASP.NET MVC ComboBox Control</h1>
                }
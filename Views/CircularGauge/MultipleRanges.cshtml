@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="control-section">
        @Html.EJS().CircularGauge("container").Load("gaugeLoad").AnimationDuration(2000).Background("transparent").Axes(axes => axes
        .Radius("90%").StartAngle(230).EndAngle(130).Minimum(-30).Maximum(120).HideIntersectingLabel(true).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("Inherit")).Offset(50).Position(Position.Inside).AutoAngle(true))
        .Pointers(pointer => pointer.Value(22.5).Radius("45%").PointerWidth(7).Color("#F7B194").Cap(cap => cap.Radius(10).Color("White").Border(border => border.Color("#F7B194").Width(4))).NeedleTail(needleTail => needleTail.Length("25%").Color("#F7B194")).Animation(animation => animation.Enable(false)).Add())
        .Ranges(ranges =>
           {
               ranges.Start(-30).End(-20).StartWidth("35").EndWidth("35").Radius("90%").Color("#58ABD5").Add();
               ranges.Start(-20).End(-10).StartWidth("35").EndWidth("35").Radius("90%").Color("#58ABD5").Add();
               ranges.Start(-10).End(0).StartWidth("35").EndWidth("35").Radius("90%").Color("#58ABD5").Add();
               ranges.Start(0).End(10).StartWidth("35").EndWidth("35").Radius("90%").Color("#58D2D5").Add();
               ranges.Start(10).End(20).StartWidth("35").EndWidth("35").Radius("90%").Color("#9DD55A").Add();
               ranges.Start(20).End(30).StartWidth("35").EndWidth("35").Radius("90%").Color("#9DD55A").Add();
               ranges.Start(30).End(40).StartWidth("35").EndWidth("35").Radius("90%").Color("#F1D158").Add();
               ranges.Start(40).End(50).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(50).End(60).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(60).End(70).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(70).End(80).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(80).End(90).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(90).End(100).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(100).End(110).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
               ranges.Start(110).End(120).StartWidth("35").EndWidth("35").Radius("90%").Color("#F48C6F").Add();
           })
        .LineStyle(lineStyle => lineStyle.Width(0).Color("transparent"))
        .MinorTicks(minorTick => minorTick.Width(0).Color("transparent")).MajorTicks(majorTick => majorTick.Width(0).Interval(10).Color("transparent"))
        .Annotations(annotation => annotation.Angle(180).ZIndex("1").Radius("20%").Content("<div style='font-size:18px;margin-left: 5px;color:#9DD55A'> 22.5\\u00b0C </div>").Add())
        .Add()).Render()
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        function gaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows temperature variations in a circular gauge using multiple ranges. In addition, the needle pointer and annotation help in displaying the temperature that has been measured.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Multiple Range in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure multiple ranges in the circular gauge. The
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeRange.html" aria-label="Ranges">Ranges<span class="sr-only">opens in a new tab</span></a> collection can be used to define multiple ranges, each of which points to a different start and end value.
        </p>
        <p>
            More information on the ranges can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/gauge-ranges" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}



@section Title{
    <title>ASP.NET MVC Circular Gauge Multiple Range Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Multiple Range in ASP.NET MVC Circular Gauge Control</h1>
}
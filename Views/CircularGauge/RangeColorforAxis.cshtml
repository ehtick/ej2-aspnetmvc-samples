@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="control-section" align="center">
        @Html.EJS().CircularGauge("container").Load("gaugeLoad").AnimationDuration(2000).Background("transparent").Axes(axes => axes
        .Radius("100%").StartAngle(0).EndAngle(0).Direction(GaugeDirection.AntiClockWise).LabelStyle(labelStyle => labelStyle.Position(Position.Outside)
        .Font(font => font.FontFamily("inherit")).Offset(2).UseRangeColor(true).HiddenLabel(HiddenLabel.First)).LineStyle(lineStyle => lineStyle.Width(0).Color("transparent"))
        .MinorTicks(minorTicks => minorTicks.Height(8).Width(1).UseRangeColor(true).Interval(2).Position(Position.Outside))
        .MajorTicks(majorTicks => majorTicks.Height(25).Width(1).UseRangeColor(true).Interval(10).Position(Position.Outside))
        .Pointers(pointers => pointers.Radius("0").Cap(cap => cap.Radius(0))).Ranges(ranges =>
        {
            ranges.Start(0).End(35).StartWidth("55").EndWidth("55").Radius("90%").Color("#F8A197").Add();
            ranges.Start(35).End(70).StartWidth("55").EndWidth("55").Radius("90%").Color("#C45072").Add();
            ranges.Start(70).End(100).StartWidth("55").EndWidth("55").Radius("90%").Color("#1B679F").Add();
        }).Add()).Render()
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        function gaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows the basic rendering of the circular gauge, which includes an axis and a range. Here, the appropriate range color is applied to its respective axis labels, minor ticks, and major ticks.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Range Color for Axis in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the range and axis in the circular gauge with the same color. To accomplish this, set the
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeLabel.html#Syncfusion_EJ2_CircularGauge_CircularGaugeLabel_UseRangeColor" aria-label="UseRangeColor">
                UseRangeColor
            <span class="sr-only">opens in a new tab</span></a> property in
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeLabel.html" aria-label="LabelStyle">
                LabelStyle
            <span class="sr-only">opens in a new tab</span></a>,
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeTick.html" aria-label="MajorTicks">
                MajorTicks
            <span class="sr-only">opens in a new tab</span></a> and
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeTick.html" aria-label="MinorTicks">MinorTicks<span class="sr-only">opens in a new tab</span></a> to <b>true</b>.
        </p>
    </div>
}



@section Title{
    <title>ASP.NET MVC Circular Gauge Range Color for Axis Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Range Color for Axis in ASP.NET MVC Circular Gauge Control</h1>
}
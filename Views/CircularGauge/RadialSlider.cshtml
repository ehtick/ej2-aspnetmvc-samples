@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="control-section" align="center">
        @Html.EJS().CircularGauge("container").Load("gaugeLoad").Background("transparent").DragMove("dragMove").EnablePointerDrag(true).Axes(axes => axes
        .Radius("80%").StartAngle(0).EndAngle(0).LabelStyle(labelStyle => labelStyle.Font(font => font.Size("0px")).Offset(-1))
        .Pointers(pointer => pointer.Value(30).Type(PointerType.Marker).MarkerShape(GaugeShape.Circle).Color("#2C75DC").Radius("97%").MarkerHeight(25).MarkerWidth(25).Animation(animation => animation.Enable(false)).Add())
        .Ranges(ranges =>
        {
            ranges.Start(0).End(30).StartWidth("12").EndWidth("12").Radius("100%").Color("#2C75DC").Add();
            ranges.Start(30).End(100).StartWidth("12").EndWidth("12").Radius("100%").Color("#BFD6F5").Add();
        })
        .LineStyle(lineStyle => lineStyle.Width(0).Color("transparent"))
        .MinorTicks(minorTick => minorTick.Height(0).Width(0).Color("transparent")).MajorTicks(majorTick => majorTick.Interval(0).Width(0).Color("transparent"))
        .Annotations(annotation => annotation.Radius("0%").Angle(180).ZIndex("1").Content("<div style='font-style: oblique; margin-left: 8px;font-size: 20px;'><span>30%</span></div>").Add())
        .Add()).Render()
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        var circulargauge;
        var pointerValue = 30;
        function gaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            circulargauge = sender.gauge;
        }
        function dragMove(sender) {
            this.pointerValue = Math.round(sender.currentValue);
            circulargauge.axes[0].pointers[0].animation.enable = false;
            if (this.pointerValue != null) {
                circulargauge.setPointerValue(0, 0, this.pointerValue);
                circulargauge.setRangeValue(0, 0, 0, this.pointerValue);
                circulargauge.setRangeValue(0, 1, this.pointerValue, 100);
                circulargauge.setAnnotationValue(0, 0, '<div style="font-style: oblique;font-size: 20px;margin-top: 0px; margin-left: 8px"><span>' + Math.ceil(this.pointerValue) + '%</span></div>');
            }
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates how to create a range slider component by utilizing the functions available in the circular gauge.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Custom Labels in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure a new range slider in the circular gauge. It is possible to achieve this by combining ranges and a marker pointer. The marker pointer has been made interactive, so the value changes as you drag it.
        </p>
        <p>
            More information on the circular gauge can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/getting-started" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}



@section Title{
    <title>ASP.NET MVC Circular Gauge Radial Slider Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Radial Slider in ASP.NET MVC Circular Gauge Control</h1>
}
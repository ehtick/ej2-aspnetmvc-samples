@using Syncfusion.EJ2
@section ControlsSection{
    <style>
        td {
            width: 40%;
        }
    </style>
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().CircularGauge("container").Background("transparent").Load("onGaugeLoad").Axes(axes => {
            axes.Radius("95%").Maximum(160).Minimum(0).HideIntersectingLabel(true).LineStyle(lineStyle => lineStyle.Width(1.5)).StartAngle(220).EndAngle(140)
            .LabelStyle(labelStyle => labelStyle.Position(Syncfusion.EJ2.CircularGauge.Position.Inside).AutoAngle(true).Font(font => font.FontFamily("inherit")))
            .Pointers(pointer => pointer.Value(80).Radius("100%").MarkerHeight(15).MarkerWidth(15).Type(Syncfusion.EJ2.CircularGauge.PointerType.Marker).MarkerShape(Syncfusion.EJ2.CircularGauge.GaugeShape.Triangle).Add())
            .MinorTicks(majorTick => majorTick.Position(Syncfusion.EJ2.CircularGauge.Position.Inside).Height(5).Width(2))
            .MajorTicks(majorTick => majorTick.Position(Syncfusion.EJ2.CircularGauge.Position.Inside).Width(2).Height(10).Interval(20)).Add();
            axes.Radius("95%").Maximum(240).Minimum(0).HideIntersectingLabel(true).LineStyle(lineStyle => lineStyle.Width(1.5).Color("#E84011")).StartAngle(220).EndAngle(140)
            .LabelStyle(labelStyle => labelStyle.Position(Syncfusion.EJ2.CircularGauge.Position.Outside).AutoAngle(true).Offset(5).Font(font => font.FontFamily("inherit")))
            .Pointers(pointer => pointer.Value(120).Radius("100%").Color("#E84011").MarkerHeight(15).MarkerWidth(15).Type(Syncfusion.EJ2.CircularGauge.PointerType.Marker).MarkerShape(Syncfusion.EJ2.CircularGauge.GaugeShape.InvertedTriangle).Add())
            .MinorTicks(majorTick => majorTick.Position(Syncfusion.EJ2.CircularGauge.Position.Outside).Color("#E84011").Height(5).Width(2))
            .MajorTicks(majorTick => majorTick.Position(Syncfusion.EJ2.CircularGauge.Position.Outside).Color("#E84011").Width(2).Height(10).Interval(20)).Add();
            }).Render()
        </div>
    </div>
    <div class="col-md-4 property-section">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <table title="Properties" style="width: 100%;">
                    <colgroup>
                        <col span="1" style="width: 45%;">
                        <col span="1" style="width: 40%;">
                        <col span="1" style="width: 10%;">
                    </colgroup>
                    <tbody>
                        <tr style="height: 50px">
                            <td>
                                <div style="font-size: 14px; margin-top: -6px"> Axis </div>
                            </td>
                            <td>
                                <div style="margin-top: -5px;height : 30px">
                                    @Html.EJS().DropDownList("axisIndex").Index(0).Width("135%").DataSource((IEnumerable<object>)ViewData["axis"]).Value("Axis 1").Change("valueChange").Render()
                                </div>
                            </td>
                        </tr>
                        <tr style="height: 50px">
                            <td>
                                <div style="font-size: 14px; margin-top: -6px"> Direction </div>
                            </td>
                            <td>
                                <div style="margin-top: -5px;height : 30px">
                                    @Html.EJS().DropDownList("axisDirection").Index(0).Width("135%").DataSource((IEnumerable<object>)ViewData["axisDirection"]).Value("Clockwise").Change("axisDirectionValueChange").Render()
                                </div>
                            </td>
                        </tr>
                        <tr style="height: 50px">
                            <td>
                                <div style="font-size: 14px; margin-top: -3px">Start Angle </div>
                            </td>
                            <td>
                                <div>
                                    <input type="range" id="startAngle" value="220" min="0" max="360">
                                </div>
                            </td>
                            <td style="text-align:center;">
                                <div>
                                    <span id='start'>220</span>
                                </div>
                            </td>
                        </tr>
                        <tr style="height: 50px">
                            <td>
                                <div style="font-size: 14px; margin-top: -3px">End Angle </div>
                            </td>
                            <td>
                                <div>
                                    <input type="range" id="endAngle" value="140" min="0" max="360">
                                </div>
                            </td>
                            <td style="text-align:center;">
                                <div>
                                    <span id='end'>140</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
        input.e-input.e-bigger, textarea.e-input.e-bigger, .e-bigger input.e-input, .e-bigger textarea.e-input, .e-input-group.e-bigger, .e-bigger .e-input-group, .e-input-group.e-control-wrapper.e-bigger, .e-bigger .e-input-group.e-control-wrapper {
            height: 100%;
            font-size: 14px;
            align-items: center;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
    var circulargauge;
    function onGaugeLoad(sender) {
        @* custom code start *@
        var selectedTheme = themeName ? themeName : 'Material';
        sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
        @* custom code end *@
        circulargauge = sender.gauge;
    }
    var axisIndex = 0;
    var axis;
        var direction;

        function valueChange() {
            axis = document.getElementById('axisIndex').ej2_instances[0];
            direction = document.getElementById('axisDirection').ej2_instances[0];
            axisIndex = axis.value == "Axis 1" ? 0 : 1;
            direction.value = circulargauge.axes[axisIndex].direction == "ClockWise" ? "Clockwise" : "Anti-clockwise";
            var startAngle = circulargauge.axes[axisIndex].startAngle;
            var endAngle = circulargauge.axes[axisIndex].endAngle;
            document.getElementById('start').innerHTML = startAngle;
            document.getElementById('end').innerHTML = endAngle;
            document.getElementById('startAngle').value = startAngle.toString();
            document.getElementById('endAngle').value = endAngle.toString();
        }
        function axisDirectionValueChange() {
            var axisDirection = document.getElementById('axisDirection').ej2_instances[0];
            circulargauge.axes[axisIndex].direction = axisDirection.value.toString() == 'Anti-clockwise' ? "AntiClockWise" : "ClockWise";
            circulargauge.axes[0].pointers[0].animation.enable = false;
            circulargauge.axes[1].pointers[0].animation.enable = false;
        }
        document.getElementById('startAngle').onpointermove = document.getElementById('startAngle').ontouchmove =
            document.getElementById('startAngle').onchange = function () {
                var value = parseInt(document.getElementById('startAngle').value, 10);
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.axes[1].pointers[0].animation.enable = false;
                circulargauge.axes[axisIndex].startAngle = value;
                document.getElementById('start').innerHTML = value;
                circulargauge.axes[axisIndex].labelStyle.hiddenLabel =
                    ej.circulargauge.isCompleteAngle(circulargauge.axes[axisIndex].startAngle, circulargauge.axes[axisIndex].endAngle) ?
                        'First' : 'None';
            };
        document.getElementById('endAngle').onpointermove = document.getElementById('endAngle').ontouchmove =
            document.getElementById('endAngle').onchange = function () {
                var value = parseInt(document.getElementById('endAngle').value, 10);
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.axes[1].pointers[0].animation.enable = false;
                circulargauge.axes[axisIndex].endAngle = value;
                document.getElementById('end').innerHTML = value;
                circulargauge.axes[axisIndex].labelStyle.hiddenLabel =
                    ej.circulargauge.isCompleteAngle(circulargauge.axes[axisIndex].startAngle, circulargauge.axes[axisIndex].endAngle) ?
                        'First' : 'None';
            };
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates the multiple axes in the circular gauge as well as the options for changing the direction, start, and end angle of an axis.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Multiple Axes in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure multiple axes in the circular gauge. To render multiple axes in the circular gauge, use the axes collection, and each axis can be customized with pointers and ticks.
        </p>
        <p>
            More information on the multiple axes can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/gauge-axes#multiple-axes" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}

@section Title{
    <title>ASP.NET MVC Circular Gauge Multiple Axes Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Multiple Axes in ASP.NET MVC Circular Gauge Control</h1>
}
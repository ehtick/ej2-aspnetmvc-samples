@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <div class="col-md-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().CircularGauge("container").Load("onGaugeLoad").EnablePointerDrag(true).DragEnd("onDragEnd").DragMove("onDragMove").Background("transparent").Axes(axes => axes.EndAngle(140).StartAngle(220)
            .LineStyle(lineStyle => lineStyle.Width(0).Color("transparent")).Radius("80%")
            .Minimum(0).Maximum(120).MajorTicks(majorTicks => majorTicks.UseRangeColor(true)).MinorTicks(minorTicks => minorTicks.UseRangeColor(true))
            .LabelStyle(labelStyle => labelStyle.UseRangeColor(true).Font(font => font.FontFamily("inherit")))
            .Ranges(range =>
            {
                 range.Start(0).End(40).StartWidth("8").EndWidth("8").Radius("108%").Color("#30B32D").Add();
                 range.Start(40).End(100).StartWidth("8").EndWidth("8").Radius("108%").Color("#E5C31C").Add();
                 range.Start(100).End(120).StartWidth("8").EndWidth("8").Radius("108%").Color("#F03E3E").Add();
            })
            .Pointers(pointer =>
            {
                pointer.Type(Syncfusion.EJ2.CircularGauge.PointerType.Marker).Value(70).MarkerShape(Syncfusion.EJ2.CircularGauge.GaugeShape.InvertedTriangle).Radius("110%").MarkerHeight(20).Color("#E5C31C").MarkerWidth(20).Add();
                pointer.Value(70).Radius("60%").Cap(cap => cap.Radius(10).Border(border => border.Width(5).Color("#E5C31C"))).NeedleTail(needleTail => needleTail.Length("0%").Color("#E5C31C")).Color("#E5C31C").MarkerWidth(5).Add();
            }).Annotations(annotations => annotations.Content("<div style='font-size: 14px; color:#E5C31C;font-weight: lighter;font-style: oblique;'><span>70 MPH</span></div>").Angle(180).ZIndex("1").Radius("45%").Add()).Add()).Render()
        </div>
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div style="font-size: 14px">Pointer Value </div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-left:-10px">
                            <input type="range" id="value" value="70" min="0" max="120" style="width:90%">
                        </div>
                    </td>
                    <td>
                        <div style="text-align:center; width: 20px;">
                            <span id='pointerValue' style="margin-left:-10px;font-size:14px">70</span>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div id="enablePointer" style="font-size: 14px">Allow Pointer Drag</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-left: -15px; margin-top: -8px">
                            @Html.EJS().CheckBox("enable").Change("onChange").Checked(true).Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div id='enableRange' style="font-size: 14px">Allow Ranges Drag</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-left: -15px; margin-top: -5px">
                            @Html.EJS().CheckBox("enable1").Change("onEnableRangeDragChange").Checked(false).Render()
                        </div>
                    </td>
                </tr>

            </tbody>
        </table>
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }

        .e-view.fabric .drag,
        .e-view.tailwind .drag {
            margin-top: 10px;
        }
        .e-view.fluent2 #property .e-checkbox-wrapper, .e-view.fluent2-dark #property .e-checkbox-wrapper, .e-view.fluent2-highcontrast #property .e-checkbox-wrapper {
            padding-left: 0px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        var content = '<div style="font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique;"><span>';
        var pointerValue;
        var circulargauge;
        function onGaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            circulargauge = sender.gauge;
        }
        function onDragEnd(args) {
            pointerValue = Math.round(args.currentValue);
            if (isNaN(args.rangeIndex)) {
                setPointersValue(circulargauge, pointerValue);
            }
        }

        function onChange(args) {
            circulargauge.enablePointerDrag = args.checked;
        }

        function onEnableRangeDragChange(args) {
            circulargauge.enableRangeDrag = args.checked;
        }

        function onDragMove(args) {
            if (isNaN(args.rangeIndex)) {
                pointerValue = Math.round(args.currentValue);
                document.getElementById('pointerValue').innerHTML = pointerValue;
                document.getElementById('value').value = pointerValue.toString();
                circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');
            }
        }

        function setPointersValue(circulargauge, pointerValue) {
            var color = ej.circulargauge.getRangeColor(pointerValue, (circulargauge.axes[0].ranges), circulargauge.axes[0].pointers[0].color);
            circulargauge.axes[0].pointers[0].color = color;
            circulargauge.axes[0].pointers[1].color = color;
            circulargauge.axes[0].pointers[0].animation.enable = false;
            circulargauge.axes[0].pointers[1].animation.enable = false;
            circulargauge.axes[0].pointers[0].needleTail.color = color;
            circulargauge.axes[0].pointers[1].needleTail.color = color;
            circulargauge.axes[0].pointers[0].cap.border.color = color;
            circulargauge.axes[0].pointers[1].cap.border.color = color;
            circulargauge.setPointerValue(0, 1, pointerValue);
            circulargauge.setPointerValue(0, 0, pointerValue);
            content = '<div style="font-size: 14px;color:' + color + ';font-weight: lighter;font-style: oblique;"><span>';
            circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');
        }
        document.getElementById('value').ontouchmove = document.getElementById('value').onpointermove =
            document.getElementById('value').onchange = function () {
                var pointerValue = parseInt(document.getElementById('value').value, 10);
                setPointersValue(circulargauge, pointerValue);
                document.getElementById('pointerValue').innerHTML = pointerValue;
            };

    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates dragging a pointer and a range in a circular gauge. End-user can drag the pointer and the range by enabling the pointer drag and range drag options.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Pointer & Ranges Drag in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to move the pointer and range in the circular gauge via drag action. The
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGauge.html#Syncfusion_EJ2_CircularGauge_CircularGauge_EnablePointerDrag" aria-label="EnablePointerDrag">EnablePointerDrag<span class="sr-only">opens in a new tab</span></a> property can be used to enable or disable the pointer drag functionality. Similarly, the
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGauge.html#Syncfusion_EJ2_CircularGauge_CircularGauge_EnableRangeDrag" aria-label="EnableRangeDrag">EnableRangeDrag<span class="sr-only">opens in a new tab</span></a> property can be used to enable or disable the range drag functionality.
        </p>
        <p>
            More information on the pointer drag can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/gauge-pointers#dragging-pointer" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>. Likewise, the range drag information can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/gauge-ranges#dragging-ranges" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}

@section Title{
    <title>ASP.NET MVC Circular Gauge Pointer & Ranges Drag Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Pointer & Ranges Drag in ASP.NET MVC Circular Gauge Control</h1>
}
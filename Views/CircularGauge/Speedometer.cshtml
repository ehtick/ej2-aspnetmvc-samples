@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <script id='pointerValue' type="text/x-template">
        <div id='templateWrap'>
            <div class='annotation'>
                <div id='pointerannotation' style="width:90px;text-align:center;font-size:20px;font-family:Roboto">${pointers[0].value} km/h</div>
            </div>
        </div>
    </script>
    <div class="col-md-8 control-section" align="center">
        @Html.EJS().CircularGauge("container").Load("gaugeLoad").Title("Speedometer").Background("transparent").TitleStyle(titleStyle => titleStyle.Size("18px").FontFamily("inherit")).CenterY("75%").Axes(axes => axes
        .Radius("120%").StartAngle(270).EndAngle(90).Minimum(0).Maximum(120).Pointers(pointers => pointers.Animation(animation => animation.Enable(false)).Value(40)
        .Radius("80%").Color("#757575").PointerWidth(7).Cap(cap => cap.Radius(8).Color("#757575").Border(border => border.Width(0)))
        .NeedleTail(needleTail => needleTail.Color("#757575").Length("15%")).Add()).Ranges(
        range =>
        {
            range.Start(0).End(20).StartWidth("5").EndWidth("10").Radius("102%").Color("#82b944").Add();
            range.Start(20).End(40).StartWidth("10").EndWidth("15").Radius("102%").Color("#a1cb43").Add();
            range.Start(40).End(60).StartWidth("15").EndWidth("20").Radius("102%").Color("#ddec12").Add();
            range.Start(60).End(80).StartWidth("20").EndWidth("25").Radius("102%").Color("#ffbc00").Add();
            range.Start(80).End(100).StartWidth("25").EndWidth("30").Radius("102%").Color("#ff6000").Add();
            range.Start(100).End(120).StartWidth("30").EndWidth("35").Radius("102%").Color("red").Add();
        }).MinorTicks(minorTick => minorTick.Width(0).Color("transparent")).MajorTicks(majorTick => majorTick.Width(0).Color("transparent")).LineStyle(lineStyle => lineStyle.Width(0))
        .LabelStyle(labelStyle => labelStyle.UseRangeColor(false).Position(Position.Outside).AutoAngle(true).Font(font => font.Size("13px").FontFamily("inherit")))
        .Annotations(annotations => annotations
        .Content("#pointerValue").Angle(0).ZIndex("1").Radius("30%").Add()).Add()).Render()
    </div>
    <div class="col-md-4 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left: 10px">
            <tbody>
                <tr style="height: 27px;">
                    <td>
                        <div class="property-text" style="margin-top: 5px; margin-left: -20px; font-size: 14px"> Combine Ranges</div>
                    </td>
                    <td>
                        <div style="margin-left: 15px">
                            @Html.EJS().CheckBox("combineRange").Change("onChange").Checked(false).Render()
                        </div>
                    </td>
                </tr>
                <tr style="height:21px;">
                    <td>
                        <div class="property-text" style="margin-top: 10px; margin-left: -20px; font-size: 14px"> Gap Between Ranges</div>
                    </td>
                    <td>
                        <div style="margin-left: 15px">
                            @Html.EJS().CheckBox("range").Change("onRangeChange").Checked(false).Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <svg style="height:0px;width:0px">
        <defs>x
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style="stop-color:#82b944;stop-opacity:1" />
                <stop offset="50%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
                <stop offset="100%" style="stop-color:red;stop-opacity:1" />
            </linearGradient>
        </defs>
    </svg>
    <script type="text/javascript">
        var circulargauge;
        function gaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            circulargauge = sender.gauge;
        }

        function onChange(args) {
            var showCheckBox = document.getElementById('range').ej2_instances[0];
            if (args.checked === true) {
                showCheckBox.disabled = true;
                circulargauge.axes[0].ranges = [{
                    start: 0,
                    end: 120,
                    startWidth: 5, endWidth: 35,
                    radius: '102%',
                    color: 'url(#grad1)',
                }];
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.refresh();
            }
            else {
                showCheckBox.disabled = false;
                circulargauge.axes[0].ranges = [
                    {
                        start: 0,
                        end: 20,
                        startWidth: 5, endWidth: 10,
                        radius: '102%',
                        color: '#82b944',
                    },
                    {
                        start: 20,
                        end: 40,
                        startWidth: 10, endWidth: 15,
                        radius: '102%',
                        color: '#a1cb43',
                    }, {
                        start: 40,
                        end: 60,
                        startWidth: 15, endWidth: 20,
                        radius: '102%',
                        color: '#ddec12',
                    },
                    {
                        start: 60,
                        end: 80,
                        startWidth: 20, endWidth: 25,
                        radius: '102%',
                        color: '#ffbc00',
                    },
                    {
                        start: 80,
                        end: 100,
                        startWidth: 25, endWidth: 30,
                        radius: '102%',
                        color: '#ff6000',
                    },
                    {
                        start: 100,
                        end: 120,
                        startWidth: 30, endWidth: 35,
                        radius: '102%',
                        color: 'red',
                    }
                ];
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.refresh();
            }
        }
        function onRangeChange(args) {
            if (args.checked) {
                circulargauge.axes[0].rangeGap = 5;
            }
            else {
                circulargauge.axes[0].rangeGap = null;
            }
            circulargauge.axes[0].pointers[0].animation.enable = false;
            circulargauge.refresh();
        }

        var gaugeInterval = setInterval(function () {
            var newVal = circulargauge.axes[0].pointers[0].value + (Math.floor(Math.random() * (10 - (-10))) - 10);
            if (newVal <= 0) {
                newVal = 5;
            }
            if (document.getElementById('container')) {
                circulargauge.axes[0].pointers[0].animation.enable = true;
                circulargauge.setPointerValue(0, 0, newVal);
                if (!ej.base.isNullOrUndefined(document.getElementById('pointerannotation'))) {
                    document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';
                }
            }
            else {
                clearInterval(this.gaugeInterval);
            }
        }, 1000);
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample depicts the appearance of a speedometer rendered using the circular gauge. The pointer value is dynamically updated with random values in this case.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to make a circular gauge look like a speedometer. Using the options in the properties panel, a gap can be added between ranges or ranges can be combined to form a single range.
        </p>
        <p>
            More information on the circular gauge can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/getting-started" aria-label="documentation">documentation<span class="sr-only">opens in a new tab</span></a> section.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC Circular Gauge Speedometer Example - Syncfusion Demos </title>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Speedometer in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Header{
    <h1 class='sb-sample-text'>Example of Speedometer in ASP.NET MVC Circular Gauge Control</h1>
}
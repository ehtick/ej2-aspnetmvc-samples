@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <style>
        td {
            width: 40%;
        }
    </style>
    <div class="control-section">
        <div class="col-md-8">
        @Html.EJS().CircularGauge("container").Background("transparent").Load("onGaugeLoad").Axes(axes => axes
        .Radius("80%").Maximum(170).Minimum(0).LineStyle(lineStyle => lineStyle.Width(2).Color("#9E9E9E")).StartAngle(210).EndAngle(150).LabelStyle(labelStyle => labelStyle.Position(Position.Outside).AutoAngle(true).Font(font => font.FontFamily("inherit").Size("10px")))
        .Pointers(pointer => pointer.Type(PointerType.RangeBar).Value(145).Radius("60%").Color("#8BC34A").PointerWidth(7).RoundedCornerRadius(10).Animation(animation => animation.Enable(false)).Add())
        .MinorTicks(majorTicks => majorTicks.Position(Position.Inside).Color("#757575").Height(5).Width(2).Interval(10)).MajorTicks(majorTicks => majorTicks.Position(Position.Inside).Color("#757575").Width(2).Height(10).Interval(20))
        .Annotations(annotations => annotations.Content("<div id=content style='color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;'>145</div>").Angle(0).ZIndex("1").Radius("0%").Add())        
        .Add()).Render();
    </div>


    <div class="col-md-4 property-section">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <table id="table" title="Properties" style="width: 100%;">
                    <colgroup>
                        <col span="1" style="width: 47%;">
                        <col span="1" style="width: 40%;">
                        <col span="1" style="width: 10%;">
                    </colgroup>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size: 14px; margin-top: -6px"> Ticks </div>
                        </td>
                        <td>
                            <div style='margin-top: -5px;height : 30px'>
                                @Html.EJS().DropDownList("Ticks").Index(0).Width("120%").DataSource((IEnumerable<object>)ViewData["ticks"]).Value("Major Ticks").Change("valueChange").Render()
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size: 14px; margin-top: -5px"> Tick Position </div>
                        </td>
                        <td>
                            <div style='margin-top: -5px;height : 30px'>
                                @Html.EJS().DropDownList("TickPosition").Index(0).Width("120%").DataSource((IEnumerable<object>)ViewData["tickPosition"]).Value("Inside").Change("tickPositionValueChange").Render()
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size: 14px; margin-top: -5px"> Label Position </div>
                        </td>
                        <td>
                            <div style='margin-top: -5px;height : 30px'>
                                @Html.EJS().DropDownList("LabelPosition").Index(0).Width("120%").DataSource((IEnumerable<object>)ViewData["labelPosition"]).Value("Outside").Change("labelPositionValueChange").Render()
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size: 14px;">Tick Offset </div>
                        </td>
                        <td>
                            <div style="width:90%">
                                <input type="range" id="tickOffset" value="0" min="0" max="50">
                            </div>
                        </td>
                        <td style="text-align:center;">
                            <div>
                                <span id='offset' style="margin-left:-25px">0</span>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size: 14px;">Tick Height </div>
                        </td>
                        <td>
                            <div style="width:90%">
                                <input type="range" id="tickHeight" value="10" min="1" max="50">
                            </div>
                        </td>
                        <td style="text-align:center;">
                            <div>
                                <span id='height' style="margin-left:-25px">10</span>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div style="font-size: 14px;">Label Offset </div>
                        </td>
                        <td>
                            <div style="width:90%">
                                <input type="range" id="labelOffset" value="0" min="0" max="50">
                            </div>
                        </td>
                        <td style="text-align:center;">
                            <div>
                                <span id='labelOffsetValue' style="margin-left:-25px">0</span>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td>
                            <div id="enablePointer" style="font-size: 14px; margin-top: -2px">Show Last Label </div>
                        </td>
                        <td>
                            <div style="margin-top: -5px">
                                @Html.EJS().CheckBox("enable").Change("onChange").Checked(false).Render()
                            </div>
                        </td>
                    </tr>

                </table>
            </div>
        </div>
    </div>
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
        .fluent .enable .fluentdark .enable {
            margin-top: 0px;
        }
        input.e-input.e-bigger, textarea.e-input.e-bigger, .e-bigger input.e-input, .e-bigger textarea.e-input, .e-input-group.e-bigger, .e-bigger .e-input-group, .e-input-group.e-control-wrapper.e-bigger, .e-bigger .e-input-group.e-control-wrapper {
            height: 100%;
            font-size: 14px;
            align-items: center;
        }
        .e-view.fluent2 #table .e-checkbox-wrapper .e-icons, .e-view.fluent2-dark #table .e-checkbox-wrapper .e-icons, .e-view.fluent2-highcontrast #table .e-checkbox-wrapper .e-icons {
            margin-left: 0px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        var circulargauge;
        function onGaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            circulargauge = sender.gauge;
        }
        var ticks;
        var tickPosition;
        var labelPosition;
        var isMajorTicks = true;
        function valueChange() {
            ticks = document.getElementById('Ticks').ej2_instances[0];
            tickPosition = document.getElementById('TickPosition').ej2_instances[0];
            var tick;
            isMajorTicks = ticks.value.toString() === 'Major Ticks';
            if (isMajorTicks) {
                tick = circulargauge.axes[0].majorTicks;
            }
            else {
                tick = circulargauge.axes[0].minorTicks;
            }
            tickPosition.value = tick.position;
            document.getElementById('tickOffset').value = tick.offset.toString();
            document.getElementById('tickHeight').value = tick.height.toString();
            document.getElementById('offset').innerHTML = tick.offset;
            document.getElementById('height').innerHTML = tick.height;
        }
        function tickPositionValueChange() {
            tickPosition = document.getElementById('TickPosition').ej2_instances[0];
            var value = tickPosition.value.toString();
            if (isMajorTicks) {
                circulargauge.axes[0].majorTicks.position = value;
            }
            else {
                circulargauge.axes[0].minorTicks.position = value;
            }
        }
        function labelPositionValueChange() {
            labelPosition = document.getElementById('LabelPosition').ej2_instances[0];
            circulargauge.axes[0].labelStyle.position = labelPosition.value.toString();
            circulargauge.refresh();
        }
        function onChange(args) {
            circulargauge.axes[0].showLastLabel = args.checked;
        }

        document.getElementById('tickOffset').onpointermove = document.getElementById('tickOffset').ontouchmove =
            document.getElementById('tickOffset').onchange = function () {
                var value = parseInt(document.getElementById('tickOffset').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.offset = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.offset = value;
                }
                document.getElementById('offset').innerHTML = value;
            };
        document.getElementById('tickHeight').onpointermove = document.getElementById('tickHeight').ontouchmove =
            document.getElementById('tickHeight').onchange = function () {
                var value = parseInt(document.getElementById('tickHeight').value, 10);
                if (isMajorTicks) {
                    circulargauge.axes[0].majorTicks.height = value;
                }
                else {
                    circulargauge.axes[0].minorTicks.height = value;
                }
                document.getElementById('height').innerHTML = value;
            };
        document.getElementById('labelOffset').onpointermove = document.getElementById('labelOffset').ontouchmove =
            document.getElementById('labelOffset').onchange = function () {
                var value = parseInt(document.getElementById('labelOffset').value, 10);
                circulargauge.axes[0].labelStyle.offset = value;
                document.getElementById('labelOffsetValue').innerHTML = value;
            };

    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates how to customize the ticks and labels on an axis. The position, offset, and height of the ticks and labels can be changed.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Ticks and Labels in ASP.NET MVC Circular Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the ticks and labels of an axis in the circular gauge. Labels are units that are used to display the values on the axis. Labels can be customized using
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeLabel.html" aria-label="LabelStyle"> LabelStyle<span class="sr-only">opens in a new tab</span></a>. Ticks are used to represent values on the axis. Ticks can be customized using
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeTick.html" aria-label="MajorTicks"> MajorTicks<span class="sr-only">opens in a new tab</span></a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.CircularGauge.CircularGaugeTick.html">MinorTicks<span class="sr-only">opens in a new tab</span></a>.
        </p>
        <p>
            More information on the ticks and labels can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/circular-gauge/gauge-axes" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC Circular Gauge Ticks and Labels Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Ticks and Labels in ASP.NET MVC Circular Gauge Control</h1>
}
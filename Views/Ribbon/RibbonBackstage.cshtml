@using Syncfusion.EJ2
@using Syncfusion.EJ2.Ribbon
@using Syncfusion.EJ2.Navigations
@using EJ2MVCSampleBrowser.Models

@{
    List<MenuItem> pasteOptions = new List<MenuItem>() { new MenuItem { Text = "Keep Source Format" }, new MenuItem { Text = "Merge Format" }, new MenuItem { Text = "Keep Text Only" } };
    List<MenuItem> findOptions = new List<MenuItem>() { new MenuItem { Text = "Find", IconCss = "e-icons e-search" }, new MenuItem { Text = "Advanced Find", IconCss = "e-icons e-search" }, new MenuItem { Text = "Go to", IconCss = "e-icons e-arrow-right" } };
    List<MenuItem> selectOptions = new List<MenuItem>() { new MenuItem { Text = "Select All" }, new MenuItem { Text = "Select Objects" } };
    List<MenuItem> dictateOptions = new List<MenuItem>() { new MenuItem { Text = "Chinese" }, new MenuItem { Text = "English" }, new MenuItem { Text = "German" }, new MenuItem { Text = "French" } };
    List<MenuItem> tableOptions = new List<MenuItem>() { new MenuItem { Text = "Insert Table" }, new MenuItem { Text = "Draw Table" }, new MenuItem { Text = "Convert Table" }, new MenuItem { Text = "Excel Spreadsheet" } };
    List<MenuItem> shapeOptions = new List<MenuItem>() { new MenuItem { Text = "Lines" }, new MenuItem { Text = "Rectangles" }, new MenuItem { Text = "Basic Arrows" }, new MenuItem { Text = "Basic Shapes" }, new MenuItem { Text = "FlowChart" } };
    List<MenuItem> headerOptions = new List<MenuItem>() { new MenuItem { Text = "Insert Header" }, new MenuItem { Text = "Edit Header" }, new MenuItem { Text = "Remove Header" } };
    List<MenuItem> footerOptions = new List<MenuItem>() { new MenuItem { Text = "Insert Footer" }, new MenuItem { Text = "Edit Footer" }, new MenuItem { Text = "Remove Footer" } };
    List<MenuItem> pageOptions = new List<MenuItem>() { new MenuItem { Text = "Insert Top of page" }, new MenuItem { Text = "Insert Bottom of page" }, new MenuItem { Text = "Format Page Number" }, new MenuItem { Text = "Remove Page Number" } };
    List<MenuItem> linkOptions = new List<MenuItem>() { new MenuItem { Text = "Insert Link", IconCss = "e-icons e-link" }, new MenuItem { Text = "Recent Links", IconCss = "e-icons e-clock" }, new MenuItem { Text = "Bookmarks", IconCss = "e-icons e-bookmark" } };
    string[] pictureOptions = new string[] { "This Device", "Stock Images", "Online Images" };

    List<string> fontSize = new List<string>() { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72", "96" };
    List<string> fontStyle = new List<string>() { "Algerian", "Arial", "Calibri", "Cambria", "Cambria Math", "Courier New", "Candara", "Georgia", "Impact", "Segoe Print", "Segoe Script", "Segoe UI", "Symbol", "Times New Roman", "Verdana", "Windings" };

    List<MenuItem> fileOptions = new List<MenuItem>()
    {
        new MenuItem { Text = "New", IconCss = "e-icons e-file-new", Id="new" },
        new MenuItem { Text = "Open", IconCss = "e-icons e-folder-open", Id="Open" },
        new MenuItem { Text = "Rename", IconCss = "e-icons e-rename", Id="rename" },
        new MenuItem { Text = "Save as", IconCss = "e-icons e-save", Id="save",
            Items= new List<MenuItem>()
            {
                new MenuItem { Text = "Microsoft Word (.docx)", IconCss = "sf-icon-word", Id="word" },
                new MenuItem { Text = "Microsoft Word 97-2003(.doc)", IconCss = "sf-icon-word", Id="word97" },
                new MenuItem { Text = "Download as PDF", IconCss = "e-icons e-export-pdf", Id="pdf" },
            }
        }
    };

    List<RibbonGroupButtonItem> groupButtonMultiple = new List<RibbonGroupButtonItem>() {

      new RibbonGroupButtonItem { IconCss = "e-icons e-bold", Content = "Bold", Selected = true, Click="function(){updateContent('Bold')}" },
      new RibbonGroupButtonItem {IconCss = "e-icons e-italic", Content = "Italic", Click="function(){updateContent('Italic')}" },
      new RibbonGroupButtonItem {IconCss = "e-icons e-underline", Content = "Underline", Click="function(){updateContent('Underline')}" },
      new RibbonGroupButtonItem { IconCss = "e-icons e-strikethrough", Content = "Strikethrough", Click="function(){updateContent('Strikethrough')}" },
      new RibbonGroupButtonItem { IconCss = "e-icons e-change-case", Content = "Change Case", Click="function(){updateContent('Change Case')}" }
    };

    List<RibbonGroupButtonItem> groupButtonSingle = new List<RibbonGroupButtonItem>() {

      new RibbonGroupButtonItem { IconCss = "e-icons e-align-left", Selected = true, Click="function(){updateContent('Align Left')}" },
      new RibbonGroupButtonItem {IconCss = "e-icons e-align-center", Click="function(){updateContent('Align Center')}" },
      new RibbonGroupButtonItem {IconCss = "e-icons e-align-right", Click="function(){updateContent('Align Right')}" },
      new RibbonGroupButtonItem { IconCss = "e-icons e-justify", Click="function(){updateContent('Justify')}" }
    };

    List<BackstageItem> backstageItems = new List<BackstageItem>() {
        new BackstageItem { Id = "home", Text = "Home", IconCss = "e-icons e-home", Content = processBackstageContent("home") },
        new BackstageItem { Id = "new", Text = "New", IconCss = "e-icons e-file-new", Content = processBackstageContent("new") },
        new BackstageItem { Id = "open", Text = "Open", IconCss = "e-icons e-folder-open", Content = processBackstageContent("open") },
        new BackstageItem { Separator = true },
        new BackstageItem { Text = "Info", Content = processBackstageContent("info") },
        new BackstageItem { Text = "Save as", Content = processBackstageContent("save") },
        new BackstageItem { Text = "Export", Content = processBackstageContent("export") },
        new BackstageItem { Text = "Print", BackStageItemClick = "backstageClickHandler" },
        new BackstageItem { Text = "Share", Content = processBackstageContent("share") },
        new BackstageItem { Separator = true, IsFooter = true },
        new BackstageItem { Text = "Account", IsFooter = true, Content = processBackstageContent("account") },
        new BackstageItem { Text = "Feedback", IsFooter = true, Content = processBackstageContent("feedback") }
    };
    BackStageMenu backstageSettings = new BackStageMenu() { Text = "File", Visible = true, BackButton = new BackstageBackButton { Text = "Close" }, Items = backstageItems };
    }

@functions {
    RibbonData backstageData = new RibbonData() { };
    string processBackstageContent(string item)
    {
        string homeContentTemplate = "<div class='home-wrapper'>{{newSection}}{{recentSection}}</div>";
        string newSection = "<div class='new-wrapper'><div class='section-title'> New </div><div class='category_container'><div class='doc_category_image'></div> <span class='doc_category_text'> New document </span></div></div>";
        string recentSection = "<div class='block-wrapper'><div class='section-title'> Recent </div>{{recentWrapper}}</div>";
        string recentWrapper = "<div class='section-content'><table><tbody><tr><td> <span class='doc_icon e-icons {{icon}}'></span> </td><td><span style='display: block; font-size: 14px'> {{title}} </span><span style='font-size: 12px'> {{description}} </span></td></tr></tbody></table></div>";
        string blockSection = "<div class='block-wrapper'> <div class='section-title'> {{blockTitle}} </div> {{blockSection}} </div>";
        string content = "";
        string recentDocUpdatedString = "";
        switch (item)
        {
            case "home":
                {
                    int documentCount = 0;
                    foreach (var docs in backstageData.RecentDocuments)
                    {
                        if (documentCount >= 3)
                        {
                            break;
                        }
                        recentDocUpdatedString += recentWrapper.Replace("{{icon}}", "e-notes").Replace("{{title}}", docs.FileName).Replace("{{description}}", docs.Location);
                        documentCount++;
                    }
                    string updatedRecentSection = recentSection.Replace("{{recentWrapper}}", recentDocUpdatedString);
                    content = homeContentTemplate.Replace("{{newSection}}", newSection).Replace("{{recentSection}}", updatedRecentSection);
                    break;
                }
            case "new":
                {
                    content = newSection;
                    break;
                }
            case "open":
                {
                    foreach (var doc in backstageData.RecentDocuments)
                    {
                        recentDocUpdatedString += recentWrapper.Replace("{{icon}}", "e-notes").Replace("{{title}}", doc.FileName).Replace("{{description}}", doc.Location);
                    }
                    string updatedRecentSection = recentSection.Replace("{{recentWrapper}}", recentDocUpdatedString);
                    content = updatedRecentSection;
                    break;
                }
            default:
                {
                    foreach (var doc in backstageData.DataOptions[item])
                    {
                        recentDocUpdatedString += recentWrapper.Replace("{{icon}}", doc.Icon).Replace("{{title}}", doc.Title).Replace("{{description}}", doc.Description);
                    }
                    string updatedBlockSection = blockSection.Replace("{{blockSection}}", recentDocUpdatedString).Replace("{{blockTitle}}", char.ToUpper(item[0]) + item.Substring(1));
                    content = updatedBlockSection;
                    break;
                }
        }
        return content;
    }
}

    @section ControlsSection{
    <div class="col-lg-12 control-section ribbon-backstage-section">
        <div id="ribbonContainer">
            <div id="ribbon">
                @Html.EJS().Ribbon("backstage-ribbon").BackStageMenu(backstageSettings).Created("ribbonCreated").LauncherIconClick("function(args){launcherIconClick(args)}").Tabs(tab =>
           {
               tab.Header("Home").Groups(group =>
               {
                   group.Id("clipboard").Header("Clipboard").ShowLauncherIcon(true).GroupIconCss("e-icons e-paste").Collections(collection =>
                   {
                       collection.Items(items =>
                       {
                           items.Type(RibbonItemType.SplitButton).Disabled(true).Id("pastebtn").AllowedSizes(RibbonItemSize.Large).SplitButtonSettings(splitButton =>
                           {
                               splitButton.IconCss("e-icons e-paste").Items(pasteOptions).Content("Paste").Select("function(args){updateContent('Paste -> ' + args.item.text)}").Click("function(){updateContent('Paste')}");
                           }).Add();
                       }).Add();
                       collection.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-cut").Content("Cut").Clicked("function(){updateContent('Cut');enablePaste();}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-copy").Content("Copy").Clicked("function(){updateContent('Copy');enablePaste();}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-format-painter").Content("Format Painter").Clicked("function(){updateContent('Format Painter')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   group.Header("Font").OverflowHeader("More Font Options").IsCollapsible(false).EnableGroupOverflow(true).Orientation(ItemOrientation.Row).GroupIconCss("e-icons e-bold").CssClass("font-group").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.ComboBox).ComboBoxSettings(comboBox =>
                           {
                               comboBox.DataSource(fontStyle).Label("Font Style").Index(3).AllowFiltering(true).Width("115px").PopupWidth("150px").Change("function(args){ if (args.itemData) { updateContent('Font Style -> ' + args.itemData.text)}}");
                           }).Add();
                           items.Type(RibbonItemType.ComboBox).ComboBoxSettings(comboBox =>
                           {
                               comboBox.DataSource(fontSize).Label("Font Size").Index(3).AllowFiltering(true).Width("65px").PopupWidth("85px").Change("function(args){ if (args.itemData) { updateContent('Font Size -> ' + args.itemData.text)}}");
                           }).Add();
                       }).Add();
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.GroupButton).AllowedSizes(RibbonItemSize.Small).GroupButtonSettings(groupButton =>
                           {
                               groupButton.Selection(RibbonGroupButtonSelection.Multiple).Header("Format Styles").Items(groupButtonMultiple);
                           }).Add();
                           items.Type(RibbonItemType.ColorPicker).AllowedSizes(RibbonItemSize.Small).DisplayOptions(Syncfusion.EJ2.Ribbon.DisplayMode.Simplified | Syncfusion.EJ2.Ribbon.DisplayMode.Classic).ColorPickerSettings(colorPicker =>
                           {
                               colorPicker.Value("#123456").Change("function(args){updateContent(args.currentValue.hex + ' color')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   group.Header("Paragraph").Orientation(ItemOrientation.Row).GroupIconCss("e-icons e-align-center").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).AllowedSizes(RibbonItemSize.Small).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-decrease-indent").Content("Decrease Indent").Clicked("function(){updateContent('Decrease Indent')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).AllowedSizes(RibbonItemSize.Small).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-increase-indent").Content("Increase Indent").Clicked("function(){updateContent('Increase Indent')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).AllowedSizes(RibbonItemSize.Small).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-paragraph").Content("Paragraph").Clicked("function(){updateContent('Paragraph Mark')}");
                           }).Add();
                       }).Add();
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.GroupButton).AllowedSizes(RibbonItemSize.Small).GroupButtonSettings(groupButton =>
                           {
                               groupButton.Selection(RibbonGroupButtonSelection.Single).Header("Alignment").Items(groupButtonSingle);
                           }).Add();
                       }).Add();
                   }).Add();
                   group.Header("Editing").Orientation(ItemOrientation.Column).GroupIconCss("e-icons e-edit").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.SplitButton).SplitButtonSettings(splitButton =>
                           {
                               splitButton.IconCss("e-icons e-search").Content("Find").Items(findOptions).Select("function(args){updateContent('Find -> ' + args.item.text)}").Click("function(){updateContent('Find')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.Content("Replace").IconCss("e-icons e-replace").Clicked("function(){updateContent('Replace')}");
                           }).Add();
                           items.Type(RibbonItemType.SplitButton).SplitButtonSettings(splitButton =>
                           {
                               splitButton.IconCss("e-icons e-mouse-pointer").Content("Select").Items(selectOptions).Select("function(args){updateContent('Select -> ' + args.item.text)}").Click("function(){updateContent('Select')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   group.Header("Voice").IsCollapsible(false).GroupIconCss("sf-icon-dictate").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.SplitButton).AllowedSizes(RibbonItemSize.Large).SplitButtonSettings(splitButton =>
                           {
                               splitButton.Content("Dictate").IconCss("sf-icon-dictate").Items(dictateOptions).Select("function(args){updateContent('Dictate -> ' + args.item.text)}").Click("function(){updateContent('Dictate')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   group.Header("Editor").IsCollapsible(false).GroupIconCss("sf-icon-editor").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).AllowedSizes(RibbonItemSize.Large).ButtonSettings(button =>
                           {
                               button.Content("Editor").IconCss("sf-icon-editor").Clicked("function(){updateContent('Editor')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   group.Header("Reuse Files").IsCollapsible(false).GroupIconCss("sf-icon-reuse").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).Disabled(true).AllowedSizes(RibbonItemSize.Large).ButtonSettings(button =>
                           {
                               button.Content("Reuse Files").IconCss("sf-icon-reuse").Clicked("function(){updateContent('Reuse Files')}");
                           }).Add();
                       }).Add();
                   }).Add();
               }).Add();
               tab.Header("Insert").Groups(groups =>
               {
                   groups.Header("Tables").IsCollapsible(false).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.DropDown).AllowedSizes(RibbonItemSize.Large).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("e-icons e-table").Content("Table").Items(tableOptions).Select("function(args){updateContent('Table -> ' + args.item.text)}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Id("illustration").Header("Illustrations").OverflowHeader("Illustrations").ShowLauncherIcon(true).EnableGroupOverflow(true).Orientation(ItemOrientation.Row).GroupIconCss("e-icons e-image").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Id("pictureddl").Type(RibbonItemType.DropDown).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("e-icons e-image").Content("Pictures").Target("#listView");
                           }).Add();
                           items.Type(RibbonItemType.DropDown).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("sf-icon-shapes").Content("Shapes").Items(shapeOptions).Select("function(args){updateContent('Shapes -> ' + args.item.text)}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-3d-model").Content("3D Models").Clicked("function(){updateContent('3D Models')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-smart-art").Content("SmartArt").Clicked("function(){updateContent('SmartArt')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-chart").Content("Chart").Clicked("function(){updateContent('Chart')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-screenshot").Content("Screenshot").Clicked("function(){updateContent('Screenshot')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Id("header_footer").Header("Header & Footer").ShowLauncherIcon(true).Orientation(ItemOrientation.Column).GroupIconCss("e-icons e-table").Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.DropDown).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("e-icons e-header").Content("Header").Items(headerOptions).Select("function(args){updateContent('Header -> ' + args.item.text)}");
                           }).Add();
                           items.Type(RibbonItemType.DropDown).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("e-icons e-footer").Content("Footer").Items(footerOptions).Select("function(args){updateContent('Footer -> ' + args.item.text)}");
                           }).Add();
                           items.Type(RibbonItemType.DropDown).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("e-icons e-page-numbering").Content("Page Number").Items(pageOptions).Select("function(args){updateContent('Page Numbering -> ' + args.item.text)}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Header("Comments").IsCollapsible(false).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).AllowedSizes(RibbonItemSize.Large).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-comment-add").Content("New Comment").Clicked("function(){updateContent('New Comment')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Header("Links").GroupIconCss("e-icons e-link").IsCollapsible(false).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.DropDown).AllowedSizes(RibbonItemSize.Large).DropDownSettings(dropDown =>
                           {
                               dropDown.IconCss("e-icons e-link").Content("Link").Items(linkOptions).Select("function(args){updateContent('Link -> ' + args.item.text)}");
                           }).Add();
                       }).Add();
                   }).Add();
               }).Add();
               tab.Header("View").Groups(groups =>
               {
                   groups.Header("Views").GroupIconCss("e-icons e-print").Orientation(ItemOrientation.Row).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-read").Content("Read Mode").Clicked("function(){updateContent('Read Mode')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("e-print e-icons").Content("Print Layout").Clicked("function(){updateContent('Print Layout')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-web-layout").Content("Web Layout").Clicked("function(){updateContent('Web Layout')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Header("Zoom").GroupIconCss("e-icons e-zoom-to-fit").Orientation(ItemOrientation.Row).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-zoom-in").Content("Zoom In").Clicked("function(){updateContent('Zoom In')}");
                           }).Add();
                           items.Type(RibbonItemType.Button).ButtonSettings(button =>
                           {
                               button.IconCss("e-icons e-zoom-out").Content("Zoom Out").Clicked("function(){updateContent('Zoom Out')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Header("Show").IsCollapsible(false).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.CheckBox).CheckBoxSettings(checkBox =>
                           {
                               checkBox.Label("Ruler").Checked(false).Change("function(){updateContent('Ruler')}");
                           }).Add();
                           items.Type(RibbonItemType.CheckBox).CheckBoxSettings(checkBox =>
                           {
                               checkBox.Label("Gridlines").Checked(false).Change("function(){updateContent('Gridlines')}");
                           }).Add();
                           items.Type(RibbonItemType.CheckBox).CheckBoxSettings(checkBox =>
                           {
                               checkBox.Label("Navigation Pane").Checked(true).Change("function(){updateContent('Navigation Pane')}");
                           }).Add();
                       }).Add();
                   }).Add();
                   groups.Header("Dark Mode").IsCollapsible(false).Collections(collections =>
                   {
                       collections.Items(items =>
                       {
                           items.Type(RibbonItemType.Button).AllowedSizes(RibbonItemSize.Large).ButtonSettings(button =>
                           {
                               button.IconCss("sf-icon-mode").Content("Dark Mode").Clicked("function(){updateContent('Dark Mode')}");
                           }).Add();
                       }).Add();
                   }).Add();
               }).Add();
           }).Render()
            </div>
            <div id="ribbonPlaceHolder">
                <div class="content1"></div>
                <div class="content2"></div>
                <div class="content3"></div>
                <div class="content4"></div>
            </div>
            <div id="pictureList">
                @Html.EJS().ListView("listView").ShowHeader(true).HeaderTitle("Insert Picture From").DataSource(pictureOptions).Select("function(args){updateContent('Pictures -> ' + args.text)}").Render()
            </div>
        </div>
    </div>
}

<script>
    var isPasteDisabled = true;
    var isBackstageOpened = false;
    var ribbon;

    function enablePaste() {
        if (!isPasteDisabled) { return; }
        var ribbon = document.getElementById('backstage-ribbon').ej2_instances[0];
        ribbon.enableItem('pastebtn')
        isPasteDisabled = false;
    }

    function ribbonCreated() {
        ribbon = this;
        if (!isBackstageOpened) {
            ribbon.element.querySelector('.e-ribbon-backstage').addEventListener('click', onBackstageOpen);
        }
    }

    function handleClickInsideBackstageContent(e) {
        e.stopPropagation();
        var cName = e.target.className;
        if (cName !== "section-title" && cName !== "home-wrapper" && cName !== "new-wrapper" && cName !== "block-wrapper" && cName !== "e-ribbon-backstage-content") {
            ribbon.ribbonBackstageModule.hideBackstage();
            ej.notifications.ToastUtility.show({
                target: "#ribbonPlaceHolder",
                position: { X: "Right" },
                showCloseButton: true,
                content: "Backstage content is interacted and closed."
            });
            ribbon.element.querySelector('.e-ribbon-backstage-content').removeEventListener('click', handleClickInsideBackstageContent);
        }
    }

    function onBackstageOpen() {
        isBackstageOpened = true
        ribbon.element.querySelector('.e-ribbon-backstage-content').addEventListener('click', handleClickInsideBackstageContent);
    }

    function backstageClickHandler() {
        ribbon.ribbonBackstageModule.hideBackstage();
        ej.notifications.ToastUtility.show({
            target: "#ribbonPlaceHolder",
            position: { X: "Right" },
            showCloseButton: true,
            content: "Print action is selected."
        });
    }

    function launcherIconClick(args) {
        if (args.groupId == "clipboard") {
            updateContent("Clipboard LauncherIcon");
        }
        else if (args.groupId == "illustration") {
            updateContent("Illustration LauncherIcon");
        }
        else if (args.groupId == "header_footer") {
            updateContent("Header & Footer LauncherIcon");
        }
    }

    function selectMenuItem(args) {
        if (args.item.id == "word" || args.item.id == "word97" || args.item.id == "pdf") {
            updateContent("File -> Save as -> " + args.item.text);
        } else {
            updateContent("File -> " + args.item.text);
        }
    }

    function updateContent(args) {
        ej.notifications.ToastUtility.show({
            target: "#ribbonPlaceHolder",
            cssClass: "e-toast-info",
            height: 25,
            width: 'auto',
            timeOut: 2000,
            newestOnTop: true,
            animation: { show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } },
            position: { X: "Right" },
            showCloseButton: true,
            content:  "Last clicked item is " + args
        });
    }
</script>

<style>
    #pictureList {
        display: none;
        border: 1px;
        box-shadow: 0 0 2px;
    }

    #pictureddl-popup #pictureList {
        display: block;
    }

    #ribbonContainer {
        padding: 20px;
        background-color: #dbdadacc;
        display: flex;
        flex-direction: column;
        height: 550px;
    }

    #ribbon {
        box-sizing: border-box;
    }

    #ribbonPlaceHolder .e-toast-close-icon {
        position: absolute;
        top: 50%;
        right: 2px;
        transform: translateY(-50%);
        margin: 0;
    }

    #ribbonPlaceHolder {
        flex-grow: 1;
        background-color: transparent;
        box-sizing: border-box;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
    }

    #ribbonPlaceHolder .content1 {
        background-color: #3a9ae5;
        width: 150px;
        height: 60%;
    }

    #ribbonPlaceHolder .content2 {
        background-color: #9d9c9a;
        width: calc(100% - 160px);
        height: 60%;
    }

    #ribbonPlaceHolder .content3 {
        background-color: #7f7e7d;
        width: 150px;
        height: calc(40% - 10px);
    }

    #ribbonPlaceHolder .content4 {
        background-color: #c8c6c4;
        width: calc(100% - 160px);
        height: calc(40% - 10px);
    }

    #ribbonPlaceHolder .e-toast-content {
        padding-right: 25px;
    }

    body[class*="dark"] #ribbonContainer,
    body[class*="high"] #ribbonContainer {
        background: #a7a7a742;
    }

    .e-bigger #pictureList .e-list-header {
        background-color: white;
    }

    body[class*="dark"].e-bigger #pictureList .e-list-header,
    body[class*="high"].e-bigger #pictureList .e-list-header {
        background-color: #212529;
    }
    .e-bigger #pictureList ul {
        padding: 0px;
        margin-top: 0px;
    }

    .font-group .e-ribbon-group-content {
        justify-content: center;
    }

    #header_footer .e-ribbon-group-overflow-ddb {
        min-width: 10ch;
    }

    @@font-face {
        font-family: 'ribbon';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    [class^="sf-icon-"], [class*=" sf-icon-"] {
        font-family: 'ribbon' !important;
        speak: none;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .sf-icon-3d-model:before {
        content: "\e700";
    }

    .sf-icon-shapes:before {
        content: "\e701";
    }

    .sf-icon-dictate:before {
        content: "\e702";
    }

    .sf-icon-chart:before {
        content: "\e703";
    }

    .sf-icon-screenshot:before {
        content: "\e704";
    }

    .sf-icon-smart-art:before {
        content: "\e706";
    }

    .sf-icon-share:before {
        content: "\e707";
    }

    .sf-icon-read:before {
        content: "\e708";
    }

    .sf-icon-web-layout:before {
        content: "\e709";
    }

    .sf-icon-mode:before {
        content: "\e70b";
    }

    .sf-icon-draft:before {
        content: "\e70c";
    }

    .sf-icon-reuse:before {
        content: "\e70f";
    }

    .sf-icon-editor:before {
        content: "\e70a";
    }

    .sf-icon-word:before {
        content: "\e70d";
    }

    /* Sample level styles */
    #ribbonContainer .e-ribbon-backstage-content > div:first-child {
      width: 550px;
      padding: 25px;
      height: 510px;
    }

    #home_content .new-wrapper {
        margin-bottom: 15px;
    }

    .section-title {
        font-size: 22px;
    }

    .new-docs {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
    }

    .category_container {
        width: 150px;
        padding: 15px;
        text-align: center;
        cursor: pointer;
    }

    .doc_category_image {
        width: 80px;
        height: 100px;
        background-color: #fff;
        border: 1px solid rgb(125, 124, 124);
        text-align: center;
        overflow: hidden;
        margin: 0px auto 10px;
    }

    .doc_category_text {
        font-size: 16px;
    }

    .section-content {
        padding: 12px 0px;
        cursor: pointer;
    }

    .doc_icon {
        font-size: 16px;
        padding: 0px 10px;
    }

    /* Hover styles */
    .category_container:hover,
    .section-content:hover {
        background-color: #dfdfdf;
        border-radius: 5px;
        transition: all 0.3s;
    }

    body[class*="dark"] .category_container:hover,
    body[class*="dark"] .section-content:hover,
    body[class*="high"] .category_container:hover,
    body[class*="high"] .section-content:hover {
        background-color: #4d4b4b;
    }

    /* Responsive queries */
    @@media screen and (max-width: 760px) {
        #ribbonContainer .e-ribbon-backstage-content > div:first-child {
            width: 400px;
        }
    }
    @@media screen and (max-width: 550px) {
        #ribbonContainer .e-ribbon-backstage-content > div:first-child {
            width: 200px;
            padding: 10px;
        }
    }
</style>

@section Meta{
                    <meta name="description" content="This example demonstrates the Ribbon Backstage in ASP.NET MVC Ribbon control. Explore here for more details."/>
                }
@section ActionDescription{
<div id="action-description">
    <p>This sample showcases the basic ribbon backstage view.</p>
</div>
}
@section Description{
<div id="description">
    <p>The Ribbon backstage is a place for handling files, settings, and document-related tasks. It simplifies user interactions with documents and app preferences, improving efficiency and organization.</p>
</div>
}
@section Title{
                    <title>ASP.NET MVC Ribbon Ribbon Backstage Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Ribbon Backstage in ASP.NET MVC Ribbon Control</h1>
                }
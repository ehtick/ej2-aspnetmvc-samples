@using Syncfusion.EJ2
@using Syncfusion.EJ2.Inputs
@using EJ2MVCSampleBrowser.Models
@section ControlsSection{
    <div class="control-section">
        <div class="control-wrapper">
            <div class='sliderwrap'>
                <label class="userselect">Currency Slider</label>
                <div id='currency'>
                    @Html.EJS().Slider("slider01").Min(0).Max(100).Value(ViewData["currencyValue"]).Created("onCreated").Enabled(true).Tooltip(new SliderTooltipData { Placement = TooltipPlacement.Before, IsVisible = true, Format = "C2" }).Ticks(new SliderTicksData { Placement = Placement.After, LargeStep = 20, SmallStep = 5, ShowSmallTicks = true,Format = "C2" }).Type(SliderType.Range).Render()

                </div>
            </div>
            <div class='sliderwrap'>
                <label class="userselect">Kilometer Slider</label>
                <div id='kilometer'>
                    @Html.EJS().Slider("slider02").Min(900).Max(2100).Value(ViewData["kilometerValue"]).Enabled(true).Tooltip(new SliderTooltipData { Placement = TooltipPlacement.Before, IsVisible = true, Format = "00##.## km" }).Ticks(new SliderTicksData { Placement = Placement.After, LargeStep = 400, SmallStep = 100, ShowSmallTicks = true, Format = "00##.## km" }).Type(SliderType.Range).Render()
                </div>
            </div>
            <div class='sliderwrap'>
                <label class="userselect">Time Slider</label>
                <div id='time'>
                    @Html.EJS().Slider("default03").Min(1373693400000).Max(1373736600000).Value(ViewData["timeValue"]).Enabled(true).TooltipChange("tooltipChangeHandler").RenderingTicks("renderingTicksHandler").Tooltip(new SliderTooltipData { Placement = TooltipPlacement.Before, IsVisible = true }).Ticks(new SliderTicksData { Placement = Placement.After, LargeStep = 10800000, SmallStep = 3600000, ShowSmallTicks = true }).Type(SliderType.Range).Render()


                </div>
            </div>
        </div>
    </div>



    <style>
        .control-section .control-wrapper {
            width: 80%;
            margin: 0 auto;
            min-width: 185px;
        }

        .sliderwrap {
            margin-top: 40px;
        }

        .e-bigger .content-wrapper {
            width: 80%;
        }

        .sliderwrap label {
            padding-bottom: 26px;
            font-size: 13px;
            font-weight: 500;
            margin-top: 15px;
            text-align: left;
            width: 100%;
        }

        .userselect {
            -webkit-user-select: none;
            /* Safari 3.1+ */
            -moz-user-select: none;
            /* Firefox 2+ */
            -ms-user-select: none;
            /* IE 10+ */
            user-select: none;
            /* Standard syntax */
        }

        body.fluent2-highcontrast .sliderwrap .e-scale,
        body.fluent2 .sliderwrap .e-scale,
        body.fluent2-dark .sliderwrap .e-scale {
            top: 2px;
        }

        body.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,
        body.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,
        body.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick
        body.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {
            top: 0px;
        }
    </style>

    <script type="text/javascript">
        function tooltipChangeHandler(args) {
            // Splitting the range values from the tooltip using space into an array.
            let totalMiliSeconds = args.text.split(' ');
            // First part is the first handle value
            let firstPart = totalMiliSeconds[0];
            // Second part is the second handle value
            let secondPart = totalMiliSeconds[2];
            /**
             * toLocaleTimeString is predefined javascript date function, which is used to
             * customize the date in different format
             */
            let custom = { hour: '2-digit', minute: '2-digit' };
            firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);
            secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);
            // Assigning our custom text to the tooltip value.
            args.text = firstPart + ' - ' + secondPart;
        }

        function renderingTicksHandler(args) {
            let totalMiliSeconds = Number(args.value);
            /**
             * toLocaleTimeString is predefined javascript date function, which is used to
             * customize the date in different format
             */
            let custom = { hour: '2-digit', minute: '2-digit' };
            // Assigning our custom text to the tick value.
            args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);
        }

    function onCreated() {
        if(document.getElementById('right-pane')) {
        document.getElementById('right-pane').addEventListener('scroll', onScroll);
        }
    }

    function onScroll() {
        var slider = [document.getElementById("slider01").ej2_instances[0], document.getElementById("slider02").ej2_instances[0], document.getElementById("default03").ej2_instances[0]];
        slider.forEach(function (slider) {
            // Refreshing each slider tooltip object position
            slider.refreshTooltip(slider.tooltipTarget);
        });
    }
    </script>

}

@section Meta{
                    <meta name="description" content="This example demonstrates the Formatting in ASP.NET MVC Range Slider control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the formatting of Ticks and Tooltip of Slider. Drag the thumb over the bar for selecting the
            formatted values between min and max.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The format feature used to customize the units of Slider values to desired format. The formatted values will also be
            applied to the ARIA attributes of the slider
        </p>
        <p>In this demo, we have demonstrated Slider with Currency, Kilometer and Time formatting.</p>
        <ul>
            <li>
                Currency Slider – In this sample, Ticks and Tooltip are formatted to currency using format API in both tooltip and
                ticks.
            </li>
            <li>
                Kilometer Slider – In this sample, Ticks and Tooltip are formatted to Kilometer using format API in both tooltip
                and ticks.
            </li>
            <li>
                Time Slider – In this sample, Ticks and Tooltip are formatted to Time using change event in Tooltip and renderingTicks
                event in Ticks
            </li>
        </ul>
        <p>
            For more information, we can refer the
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/range-slider/format/" aria-label="Format">Format<span class="sr-only">opens in a new tab</span></a> section from the documentation.
        </p>

        </ul>
    </div>
}


@section Title{
                    <title>ASP.NET MVC Range Slider Formatting Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Formatting in ASP.NET MVC Range Slider Control</h1>
                }

@using Syncfusion.EJ2
@using Syncfusion.EJ2.Inputs
@using Syncfusion.EJ2.DropDowns
@using EJ2MVCSampleBrowser.Models
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control-wrapper">
            <div class='sliderwrap'>
                <label class="userselect">Default Slider</label>
                <div id='default'>
                    @Html.EJS().Slider("slider01").Min(0).Max(100).Value(30).Enabled(true).Created("onCreated").Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before, ShowOn = TooltipShowOn.Focus }).ShowButtons(true).Render()
                </div>
            </div>
            <div class='sliderwrap'>
                <label class="userselect">Range Slider</label>
                <div id='range'>
                    @Html.EJS().Slider("slider02").Min(0).Max(100).Enabled(true).Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before, ShowOn = TooltipShowOn.Focus }).ShowButtons(true).Type(SliderType.Range).Value(ViewData["sliderValue"]).Render()
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Placement</div>
                    </td>
                    <td style="width: 50%;padding: 5px">
                        @Html.EJS().DropDownList("placement").Index(0).Change("placementChange").Placeholder("Placement Position").DataSource((IEnumerable<Object>)ViewData["placement"]).Fields(new DropDownListFieldSettings { Text = "text", Value = "id" }).Render()
                    </td>
                </tr>

                <tr id="slider-showon">
                    <td style="width: 50%">
                        <div class="userselect">ShowOn</div>
                    </td>
                    <td style="width: 50%;padding : 5px">
                        @Html.EJS().DropDownList("showOn").Index(1).Change("showOnChange").Placeholder("ShowOn Position").DataSource((IEnumerable<Object>)ViewData["showon"]).Fields(new DropDownListFieldSettings { Text = "text", Value = "id" }).Render()
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>

        function placementChange() {
            var dropdown = document.getElementById('placement').ej2_instances[0];
            var defaultObj = document.getElementById('slider01').ej2_instances[0];
            var range = document.getElementById('slider02').ej2_instances[0];

            defaultObj.tooltip = { placement: dropdown.value };
            defaultObj.dataBind();
            range.tooltip = { placement: dropdown.value };
            range.dataBind();
        }
        function showOnChange() {
            var dropdown = document.getElementById('showOn').ej2_instances[0];
            var defaultObj = document.getElementById('slider01').ej2_instances[0];
            var range = document.getElementById('slider02').ej2_instances[0];

            defaultObj.tooltip = { showOn: dropdown.value };
            defaultObj.dataBind();
            range.tooltip = { showOn: dropdown.value };
            range.dataBind();
        }

        function onCreated() {
        if(document.getElementById('right-pane')) {
        document.getElementById('right-pane').addEventListener('scroll', onScroll);
        }
        }
        function onScroll() {
        var slider = [document.getElementById("slider01").ej2_instances[0], document.getElementById("slider02").ej2_instances[0]];
        slider.forEach(function (slider) {
            // Refreshing each slider tooltip object position
            slider.refreshTooltip(slider.tooltipTarget);
        });
    }

    </script>
    <style>
        .control-section .control-wrapper {
            width: 80%;
            margin: 0 auto;
            min-width: 185px;
        }

        .sliderwrap {
            margin-top: 45px;
        }
        .material #property tr#slider-showon {
            display: none;
        }
        .e-bigger .content-wrapper {
            width: 80%;
        }

        .sliderwrap label {
            padding-bottom: 50px;
            font-size: 13px;
            font-weight: 500;
            margin-top: 15px;
        }

        .userselect {
            -webkit-user-select: none;
            /* Safari 3.1+ */
            -moz-user-select: none;
            /* Firefox 2+ */
            -ms-user-select: none;
            /* IE 10+ */
            user-select: none;
            /* Standard syntax */
        }

    </style>

}

@section Meta{
                    <meta name="description" content="This example demonstrates the Tooltip in ASP.NET MVC Range Slider control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the rendering of Slider component with Tooltip. Drag the thumb over the bar for selecting the
            values between min and max to enable the Tooltip.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>Slider component displays the tooltip to indicate the current value to the user.</p>
        <p>In this demo, we have demonstrated Tooltip with Default and Range Slider.</p>
        <p>
            Buttons can be used to increment or decrement the slider value. Buttons can be enabled in Slider using showButtons property
        </p>
        <p>The dragInterval is used to drag both handles using the range bar which is also applicable only to the range slider.</p>
        <p>
            Tooltip position and opening behavior can be customized through the placement and showOn properties from property pane.
        </p>

    </div>
}


@section Title{
                    <title>ASP.NET MVC Range Slider Tooltip Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Tooltip in ASP.NET MVC Range Slider Control</h1>
                }
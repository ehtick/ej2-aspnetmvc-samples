@using Syncfusion.EJ2
@using Syncfusion.EJ2.Inputs
@using EJ2MVCSampleBrowser.Models
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control-wrapper">
            <table class="slider_table">
                <tr>
                    <td>
                        <div class="sliderwrap">
                            <div id='default'></div>
                            @Html.EJS().Slider("default").Min(0).Max(100).Value(30).Created("onCreated").Enabled(true).Orientation(SliderOrientation.Vertical).Ticks( new SliderTicksData { Placement = Placement.Before, LargeStep = 20, SmallStep = 5, ShowSmallTicks = true }).Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before }).Render()
                        </div>
                    </td>
                    <td>
                        <div class="sliderwrap">
                            <div id='minrange'></div>
                            @Html.EJS().Slider("minrange").Min(0).Max(100).Value(30).Enabled(true).Type(SliderType.MinRange).Orientation(SliderOrientation.Vertical).Ticks(new SliderTicksData { Placement = Placement.Before, LargeStep = 20, SmallStep = 5, ShowSmallTicks = true }).Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before }).Render()
                        </div>
                    </td>
                    <td>
                        <div class="sliderwrap">
                            <div id='range'></div>
                            @Html.EJS().Slider("range").Min(0).Max(100).Value(ViewData["sliderValue"]).Enabled(true).Type(SliderType.Range).Orientation(SliderOrientation.Vertical).Ticks(new SliderTicksData { Placement = Placement.Before, LargeStep = 20, SmallStep = 5, ShowSmallTicks = true }).Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before }).Render()
                        </div>
                    </td>
                    <td>
                        <div class="sliderwrap">
                            <div id='reversible'></div>
                            @Html.EJS().Slider("reversible").Min(100).Max(0).Value(ViewData["sliderValue"]).Enabled(true).Type(SliderType.Range).Orientation(SliderOrientation.Vertical).Ticks(new SliderTicksData { Placement = Placement.Before, LargeStep = 20, SmallStep = 5, ShowSmallTicks = true }).Tooltip(new SliderTooltipData { IsVisible = true, Placement = TooltipPlacement.Before }).Render()
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td style="width: 50%">
                        <div class="userselect">Ticks</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div style="padding-left: 0;padding-top: 0">
                            @Html.EJS().CheckBox("ticks").Checked(true).Change("ticksChange").Render()
                        </div>
                    </td>
                </tr>

                <tr id="slider-showon">
                    <td style="width: 50%">
                        <div class="userselect">Tooltip</div>
                    </td>
                    <td style="width: 50%;padding-right: 10px">
                        <div style="padding-left: 0;padding-top: 0">
                            @Html.EJS().CheckBox("tooltip").Checked(true).Change("tooltipChange").Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>



    <script>
        var defaultObj;
        var minrangeObj;
        var range;
        var reverse;

        window.onload = function () {
            defaultObj = document.getElementById('default').ej2_instances[0];
            minrangeObj = document.getElementById('minrange').ej2_instances[0];
            range = document.getElementById('range').ej2_instances[0];
            reverse = document.getElementById('reversible').ej2_instances[0];
        }
        function ticksChange(args) {
            if (args.checked) {
                defaultObj.ticks = { placement: "Before", largeStep: 20, smallStep: 5, showSmallTicks: true };
                defaultObj.dataBind();
                minrangeObj.ticks = { placement: "Before", largeStep: 20, smallStep: 5, showSmallTicks: true };
                minrangeObj.dataBind();
                range.ticks = { placement: "Before", largeStep: 20, smallStep: 5, showSmallTicks: true };
                range.dataBind();
                reverse.ticks = { placement: "Before", largeStep: 20, smallStep: 5, showSmallTicks: true };
                reverse.dataBind();
            } else {
                defaultObj.ticks = { placement: "None", largeStep: 20, smallStep: 5, showSmallTicks: true };
                defaultObj.dataBind();
                minrangeObj.ticks = { placement: "None", largeStep: 20, smallStep: 5, showSmallTicks: true };
                minrangeObj.dataBind();
                range.ticks = { placement: "None", largeStep: 20, smallStep: 5, showSmallTicks: true };
                range.dataBind();
                reverse.ticks = { placement: "None", largeStep: 20, smallStep: 5, showSmallTicks: true };
                reverse.dataBind();
            }
        }
        function tooltipChange(args) {
            if (args.checked) {
                defaultObj.tooltip = { placement: "Before", isVisible: true };
                defaultObj.dataBind();
                minrangeObj.tooltip = { placement: "Before", isVisible: true };
                minrangeObj.dataBind();
                range.tooltip = { placement: "Before", isVisible: true };
                range.dataBind();
                reverse.tooltip = { placement: "Before", isVisible: true };
                reverse.dataBind();
            } else {
                defaultObj.tooltip = { placement: "Before", isVisible: false };
                defaultObj.dataBind();
                minrangeObj.tooltip = { placement: "Before", isVisible: false };
                minrangeObj.dataBind();
                range.tooltip = { placement: "Before", isVisible: false };
                range.dataBind();
                reverse.tooltip = { placement: "Before", isVisible: false };
                reverse.dataBind();
            }

        }

        function onCreated() {
            if (document.getElementById('right-pane')) {
                document.getElementById('right-pane').addEventListener('scroll', onScroll);
            }
        }
        function onScroll() {
            var slider = [document.getElementById("default").ej2_instances[0], document.getElementById("minrange").ej2_instances[0], document.getElementById("range").ej2_instances[0], document.getElementById("reversible").ej2_instances[0]];
            slider.forEach(function (slider) {
                // Refreshing each slider tooltip object position
                slider.refreshTooltip(slider.tooltipTarget);
            });
        }

    </script>


    <style>
        .control-section .control-wrapper {
            width: 80%;
            margin: 0 auto;
            min-width: 185px;
        }

        .sliderwrap {
            height: 375px;
            margin-top: 10px;
            width: 60%;
            margin: auto;
        }

        .e-bigger .content-wrapper {
            width: 80%;
        }

        .sliderwrap .e-lbl {
            display: block;
            font-size: 11px;
            font-weight: 500;
            margin-top: 15px;
            margin-left: -10px;
        }

        .sliderwrap:last-child .e-lbl {
            margin-left: -2px;
        }

        .slider_table td {
            text-align: center;
        }

        .slider_table {
            border: 0;
            width: 100%
        }
    </style>

}

@section Meta{
                    <meta name="description" content="This example demonstrates the Vertical Orientation in ASP.NET MVC Range Slider control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the rendering of Slider component in Vertical orientation. Drag the thumb over the bar for selecting
            the values between min and max.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The Slider component can be rendered in either horizontal or vertical orientation and this can be set through the orientation
            property
        </p>
        <p>
            The Slider component allows the user to select a value or range of values in-between a min and max range, by dragging
            the thumb over the slider bar in Vertical orientation. There are three types of sliders available in Vertical Orientation:
        </p>
        <ul>
            <li>Default - allows us to select a single value in Vertical Orientation</li>
            <li>
                MinRange – allows us to select a single value, but highlights with a range selection from the min value to the current
                handle value in Vertical Orientation
            </li>
            <li>
                Range – allows us to select a range of values with two handles, where the handles was connected with a range selection
                in Vertical Orientation
            </li>
            <li>
                Reverse – allows to render the component in reverse order. To utilise this, set the maximum value to the Min
                property and set the minimum value to the Max property
            </li>
            <p>The dragInterval is used to drag both handles using the range bar which is also applicable only to the range slider.</p>
            <p>
                In this demo we can see the Default, MinRange and Range slider types.
            </p>

        </ul>
    </div>
}


@section Title{
                    <title>ASP.NET MVC Range Slider Vertical Orientation Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Vertical Orientation in ASP.NET MVC Range Slider Control</h1>
                }
@using Syncfusion.EJ2
@using Syncfusion.EJ2.InteractiveChat
@using Newtonsoft.Json
@using Syncfusion.EJ2.DropDowns
@section ControlsSection{
    <div class="control-section">
        <div class="sample-container">
            <div class="chat-section">
                <div id="chatContainer" style="height: 100%; width: 100%; border: 1px solid #ccc;">
                    @Html.EJS().ChatUI("chat").HeaderText("Michale Suyama").HeaderIconCss("chat_user2_avatar").Messages(ViewBag.ChatMessagesData).User(ViewBag.CurrentUser).ShowTimeBreak(true).LoadOnDemand(true).MessageToolbarSettings(new ChatUIMessageToolbarSettings() { Items = ViewData["MessageToolbarItems"] }).FooterTemplate(ViewBag.FooterTemplate).Created("created").Render()
                </div>
            </div>
        </div>
    </div>
}
@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the Bottom Toolbar of the Rich Text Editor with minimum configuration and includes a Chat UI interface.</p>
    </div>
}
@section Description{
    <p>In this example, the toolbar is positioned at the bottom of the editor. The position of the toolbar can be customized by using the <code>toolbarSettings.position </code>property.</p>
    <p>Additionally, this sample includes a Chat UI interface that allows users to communicate using a rich text editor for message composition.</p>
}
@section Title{
    <title>ASP.NET MVC Rich Text Editor Bottom Toolbar Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Bottom Toolbar in ASP.NET MVC Rich Text Editor Control</h1>
}

<style>
    #chatContainer.e-chat-ui .e-footer {
        margin: unset;
        align-self: auto;
        padding: 10px;
    }

    .custom-footer {
        position: relative;
    }

    /* Make the editor container relatively positioned to allow button overlay */
    #editor {
        position: relative;
    }

    /* Position the buttons absolutely over the RTE */
    #sendMessage,
    #cancelMessage {
        position: absolute !important;
        bottom: 40px;
        z-index: 100;
    }
    .tailwind3 .custom-footer > #sendMessage,
    .tailwind3 .custom-footer > #cancelMessage {
        bottom: 50px;
    }

    .material3 .custom-footer > #sendMessage,
    .material3 .custom-footer > #cancelMessage {
        bottom: 50px;
    }
    /* Specific positioning */
    #sendMessage {
        right: 20px;
    }

    #cancelMessage {
        right: 50px;
    }

    .chat_user2_avatar {
        background-image: url('./../Content/chatui/images/andrew.png');
        background-color: unset;
    }

    .e-chat-ui .e-text p {
        margin-bottom: 4px;
    }

    .custom-footer .e-richtexteditor .e-rte-content .e-content, 
    .custom-footer .e-richtexteditor .e-source-content .e-content {
        overflow-y: auto;
        max-height: 300px;
    }
    .e-bigger .custom-footer > #sendMessage {
	    bottom: 46px;
	    right: 20px;
    }
    .e-bigger .custom-footer > #cancelMessage {
        bottom: 46px;
        right: 65px;
    }
    .tailwind3.e-bigger .custom-footer > #sendMessage,
    .material3.e-bigger .custom-footer > #sendMessage {
        bottom: 57px;
        right: 20px;
    }
    .tailwind3.e-bigger .custom-footer > #cancelMessage {
        bottom: 57px;
        right: 68px;
    }
    .material3.e-bigger .custom-footer > #cancelMessage {
        bottom: 57px;
        right: 60px;
    }
    .chat-section {
        height: 600px;
    }
</style>
<script>
    var chatRTE;

    function created() {
         chatRTE = new ej.richtexteditor.RichTextEditor({
                toolbarSettings: {
                    position: "Bottom",
                    items: @Html.Raw(JsonConvert.SerializeObject(ViewData["Tools"]))
                },
                placeholder: 'Type something...',
                created: function() {
                    // Call the focus method on the Rich Text Editor when it is created
                    chatRTE.focusIn();
                }
            });
            chatRTE.appendTo('#editor');
    }

    function isValidContent(html) {
        if (!html || html.trim().length === 0) 
            return false;
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        // Check for meaningful text
        var textContent = tempDiv.innerHTML.replace(/<br\s*\/?>/gi, '').replace(/&nbsp;/gi, '').replace(/<[^>]*>/g, '').trim();
        if (textContent.length > 0) 
            return true;
        // Check for media elements
        var mediaTags = ['img', 'table', 'audio', 'video', 'iframe'];
        for (var tag of mediaTags) {
            if (tempDiv.getElementsByTagName(tag).length > 0) 
                return true;
        }
        return false;
    }


    document.addEventListener('click', function (event) {
         if (event.target && event.target.id === 'sendMessage') {
            if (chatRTE && chatRTE.value && chatRTE.value.length > 0) {
                var value = chatRTE.value;
                var chat = document.getElementById('chat').ej2_instances[0];
                if (isValidContent(value)) {
                    chatRTE.value = null;
                    if (chat) {
                        chat.addMessage({
                            author: { id: 'user1', user: 'Albert' },
                            text: value
                        });
                        chatRTE.clearUndoRedo();
                        chatRTE.dataBind();
                        chatRTE.focusIn();
                    }
                }
            }
        } else if (event.target && event.target.id === 'cancelMessage') {
            if (chatRTE) {
                chatRTE.value = null;
                chatRTE.dataBind();
                chatRTE.clearUndoRedo();
                chatRTE.focusIn();
            }
        }

    });
</script>
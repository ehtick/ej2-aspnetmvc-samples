@using Syncfusion.EJ2
@section ControlsSection{
      <div class="control-section">
        <div class="control-wrapper">
            <div id="rteSection">
                @Html.EJS().RichTextEditor("customTool").ContentTemplate(@<div><p>The custom command 'insert special character' is configured as the last item of the toolbar. Click on the command and choose the special character you want to include from the popup.</p></div>).Created("created").ActionComplete("actionComplete").ToolbarSettings(e => e.Items((object)ViewData["Items"])).Render()

                @Html.EJS().Dialog("customTbarDialog").Visible(false).Header("Special Characters").Created("onDialogCreate").ZIndex(1000).ShowCloseIcon(false).IsModal(true).OverlayClick("dialogOverlay").Buttons(e =>
                {
                e.ButtonModel(ViewData["InsertBtn"]).Click("onInsert").Add();
                e.ButtonModel(ViewData["CancelBtn"]).Click("dialogOverlay").Add();
            }).ContentTemplate(@<div id="rteSpecial_char">
                        <div class="char_block" title="^">^</div>
                        <div class="char_block" title="_">_</div>
                        <div class="char_block" title="`">`</div>
                        <div class="char_block" title="{">{</div>
                        <div class="char_block" title="|">|</div>
                        <div class="char_block" title="}">}</div>
                        <div class="char_block" title="~">~</div>
                        <div class="char_block" title="&nbsp;">&nbsp;</div>
                        <div class="char_block" title="¡">¡</div>
                        <div class="char_block" title="¢">¢</div>
                        <div class="char_block" title="£">£</div>
                        <div class="char_block" title="¤">¤</div>
                        <div class="char_block" title="¥">¥</div>
                        <div class="char_block" title="₹">₹</div>
                        <div class="char_block" title="¦">¦</div>
                        <div class="char_block" title="§">§</div>
                        <div class="char_block" title="¨">¨</div>
                        <div class="char_block" title="©">©</div>
                        <div class="char_block" title="ª">ª</div>
                        <div class="char_block" title="«">«</div>
                        <div class="char_block" title="¬">¬</div>
                        <div class="char_block" title="­-">-­</div>
                        <div class="char_block" title="®">®</div>
                        <div class="char_block" title="¯">¯</div>
                        <div class="char_block" title="°">°</div>
                        <div class="char_block" title="±">±</div>
                        <div class="char_block" title="²">²</div>
                        <div class="char_block" title="³">³</div>
                        <div class="char_block" title="´">´</div>
                        <div class="char_block" title="µ">µ</div>
                        <div class="char_block" title="¶">¶</div>
                        <div class="char_block" title="·">·</div>
                        <div class="char_block" title="¸">¸</div>
                        <div class="char_block" title="¹">¹</div>
                        <div class="char_block" title="º">º</div>
                        <div class="char_block" title="»">»</div>
                        <div class="char_block" title="¼">¼</div>
                        <div class="char_block" title="½">½</div>
                        <div class="char_block" title="¾">¾</div>
                        <div class="char_block" title="¿">¿</div>
                        <div class="char_block" title="À">À</div>
                        <div class="char_block" title="Á">Á</div>
                        <div class="char_block" title="Â">Â</div>
                        <div class="char_block" title="Ã">Ã</div>
                    </div>).Render()
            </div>
  </div>
        </div>
<style>
    #customTbarDialog #special_char,
    #customTbarDialog .char_block {
        display: inline-block;
    }

    #custom_tbar,
    #custom_tbar div {
        cursor: pointer;
    }

    #rteSpecial_char {
        padding: 15px 0 15px 0;
    }

    #customTbarDialog .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }

    .material #customTbarDialog .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }

    .material-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #56a4fd;
        border-color: #56a4fd;
    }

    .fabric #customTbarDialog .char_block.e-active,
    .fabric-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #0078d6;
        border-color: #0078d6;
    }

    .bootstrap4 #customTbarDialog .char_block.e-active {
        outline: 1px solid #007bff;
        border-color: #007bff;
    }
    
    .bootstrap #customTbarDialog .char_block.e-active,
    .bootstrap-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #317ab9;
        border-color: #317ab9;
    }

    .highcontrast #customTbarDialog .char_block.e-active {
        outline: 1px solid #ffd939;
        border-color: #ffd939;
    }

    .tailwind #customTbarDialog .char_block.e-active,
    .tailwind3 #customTbarDialog .char_block.e-active {
        outline: 1px solid #3730a3;
        border-color: #3730a3;
    }

    .tailwind-dark #customTbarDialog .char_block.e-active,
    .tailwind3-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #22d3ee;
        border-color: #22d3ee;
    }

    .bootstrap5 #customTbarDialog .char_block.e-active,
    .bootstrap5-dark #customTbarDialog .char_block.e-active,
    .bootstrap5\.3 #customTbarDialog .char_block.e-active,
    .bootstrap5\.3-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #0D6EFD;
        border-color: #0D6EFD;
    }

    .fluent #customTbarDialog .char_block.e-active,
    .fluent-dark #customTbarDialog .char_block.e-active {
        outline: 1px solid #0078DE;
        border-color: #0078DE;
    }

    .fluent2 .e-rte-custom-tbar-section .char_block.e-active,
    .fluent2-dark .e-rte-custom-tbar-section .char_block.e-active {
        outline: 1px solid #0f6cbd;
        border-color: #0f6cbd;
    }

    .material3 .e-rte-custom-tbar-section .char_block.e-active,
    .material3-dark .e-rte-custom-tbar-section .char_block.e-active {
	outline: 1px solid #7D69B1;
	border-color: #7D69B1;
    }

    #customTbarDialog .char_block {
        width: 30px;
        height: 30px;
        line-height: 30px;
        margin: 0 5px 5px 0;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #DDDDDD;
        font-size: 20px;
        cursor: pointer;
        user-select: none;
    }

    #custom_tbar .rtecustomtool {
        font-size: 18px;
    }
	
	@@media (min-width: 320px) and (max-width: 480px) {
		#rteSpecial_char {
			padding: 15px 0 15px 4px;
		}
	}
</style>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Insert Special Characters in ASP.NET MVC Rich Text Editor control. Explore here for more details."/>
                }

@*custom code end*@

@section ActionDescription{
   <div id="action-description">
        <p>
            This sample shows how to add your own commands to toolbar of the Rich Text Editor.
            The <code>“Ω” </code>  command is added to insert special characters in the editor.
            Click the “Ω” command to show the special characters list, and then choose the character to be inserted in the editor.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The Rich Text Editor allows you to configure your own commands to its toolbar using <code>toolbarSettings</code> property.
            The command can be plain text, icon, or HTML template.
            You can also define the order and group where the command should be included.
            Bind the action to the command by getting its instance.
        </p>
    </div>
}

<script>
    var rteObj, selection, ranges, dialogObj, saveSelection;
    function onDialogCreate() {
        dialogObj = this;
        dialogObj.element.style.maxHeight = '300px';
    }
    function onInsert() {
        var activeEle = dialogObj.element.querySelector('.char_block.e-active');
        if (rteObj.formatter.getUndoRedoStack().length === 0) {
            rteObj.formatter.saveData();
        }
        saveSelection.restore();
        rteObj.executeCommand('insertText', activeEle.textContent);
        rteObj.formatter.saveData();
        rteObj.formatter.enableUndo(rteObj);
        dialogOverlay();
    }
     function actionComplete(e) {
        if (e.requestType === 'SourceCode') {
        rteObj.getToolbar().querySelector('#custom_tbar').parentElement.classList.add('e-overlay');
        } else if (e.requestType === 'Preview') {
        rteObj.getToolbar().querySelector('#custom_tbar').parentElement.classList.remove('e-overlay');
        }
    };
    function dialogOverlay() {
        var activeEle = dialogObj.element.querySelector('.char_block.e-active');
        if (activeEle) {
            activeEle.classList.remove('e-active');
        }
        dialogObj.hide();
    }
    function created() {
        rteObj = this;
        selection = new ej.richtexteditor.NodeSelection();
        var customBtn = rteObj.element.querySelector('#custom_tbar');
        customBtn.onclick = function (e) {
            dialogObj.element.style.display = '';
            ranges = selection.getRange(document);
            saveSelection = selection.save(ranges, document);
            dialogObj.width = rteObj.element.offsetWidth * 0.5;
            dialogObj.show();
            var dialogCtn = document.getElementById('rteSpecial_char');
            dialogCtn.onclick = function (e) {
                var target = e.target;
                var activeEle = dialogObj.element.querySelector('.char_block.e-active');
                if (target.classList.contains('char_block')) {
                    target.classList.add('e-active');
                    if (activeEle) {
                        activeEle.classList.remove('e-active');
                    }
                }
            };
            customBtn.onclick = function (e) {
                rteObj.focusIn();
                dialogObj.element.style.display = '';
                ranges = selection.getRange(document);
                saveSelection = selection.save(ranges, document);
                dialogObj.width = rteObj.element.offsetWidth * 0.5;
                dialogObj.show();
            };
        };
    }
</script>
@section Title{
                    <title>ASP.NET MVC Rich Text Editor Insert Special Characters Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Insert Special Characters in ASP.NET MVC Rich Text Editor Control</h1>
                }

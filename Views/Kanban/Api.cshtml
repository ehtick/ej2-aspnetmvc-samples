@using Syncfusion.EJ2
@using Syncfusion.EJ2.Kanban
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2.DropDowns;

@section ControlsSection {
    <div class="col-lg-9 control-section">
        <div class="control_wrapper">
            @Html.EJS().Kanban("kanban").KeyField("Status").DataSource((IEnumerable<object>)ViewData["data"]).Columns(col=> {
           col.HeaderText("To Do").KeyField("Open").Add();
           col.HeaderText("In Progress").KeyField("InProgress").Add();
           col.HeaderText("Done").KeyField("Close").Add();
       }).CardSettings(card => {
           card.ContentField("Summary").HeaderField("Id");
       }).Created("onCreate").Render()
            <div>
                @Html.EJS().Dialog("defaultDialog").Header("Validation").IsModal(true).Width("350px").ShowCloseIcon(true).Visible(false).Buttons((List<DialogDialogButton>)ViewData["DefaultButtons"]).Created("onDialogCreate").Render()
            </div>
        </div>
    </div>
    <div class="col-lg-3 property-section property-customization">
        <div class="property-panel-section">
            <p class="property-panel-header">Add Column</p>
            <div class="property-panel-content">
                <form id="addForm">
                    <table>
                        <tr>
                            <td><input id="text" class="e-input" type="text" placeholder="Text Field" required /></td>
                        </tr>
                        <tr>
                            <td>
                                @Html.EJS().DropDownList("key").Width("100%").DataSource((IEnumerable<Object>)ViewData["ApiDropDown"]).Fields(new DropDownListFieldSettings { Text = "Value", Value = "Value" }).Placeholder("Key Field").Render()
                            </td>
                        </tr>
                        <tr>
                            <td>@Html.EJS().NumericTextBox("index").Min(0).Value(0).Placeholder("Index").Format("###.##").Created("indexCreate").Render()</td>
                        </tr>
                        <tr>
                            <td class='e-check'><button class="e-btn" id="add">Add</button></td>
                        </tr>
                    </table>
                </form>
            </div>
            <p class="property-panel-header">Delete Column</p>
            <div class="property-panel-content">
                <form id="deleteForm">
                    <table>
                        <tbody>
                            <tr>
                                <td> @Html.EJS().NumericTextBox("deteteIndex").Min(0).Placeholder("Index").Format("###.##").Value(0).Created("onDeleteIndexCreate").Render()</td>
                            </tr>
                            <tr>
                                <td class='e-check'>
                                    <button id="delete" class="e-btn">Delete</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
    </div>
    <style>
        .property-panel-content td {
            padding-top: 10px;
        }

        .property-panel-header {
            padding-bottom: 0px;
        }
    </style>
    <script>
        var kanbanObj;
        var addFormObj = new ej.inputs.FormValidator('#addForm');
        var deleteFormObj = new ej.inputs.FormValidator('#deleteForm');
        var dialogObj;
        var addIndexObj;
        var deleteIndexObj;

        function onCreate() {
            kanbanObj = this;
        }

        function indexCreate() {
            this.max = kanbanObj.columns.length;
            addIndexObj = this;
        }
        function onDeleteIndexCreate() {
            this.max = kanbanObj.columns.length - 1;
            deleteIndexObj = this;
        }
        function onDialogCreate() {
            dialogObj = this;
        }
        document.getElementById('add').onclick = function () {
            var key = (document.getElementById('key')).value;
            var text = (document.getElementById('text')).value;
            var index = parseInt((document.getElementById('index')).value, 10);
            if (kanbanObj.columns.length >= index && key !== '' && text !== '') {
                kanbanObj.addColumn({ keyField: key, headerText: text, showItemCount: true }, index);
                addIndexObj.max = kanbanObj.columns.length;
                deleteIndexObj.max = kanbanObj.columns.length - 1;
                addFormObj.reset();
            } else if (text === '') {
                dialogObj.content = 'Enter Column Header Text';
                dialogObj.show();
            } else if (key === '') {
                dialogObj.content = 'Enter Column Key Field';
                dialogObj.show();
            } else if (!index) {
                dialogObj.content = 'Enter Column Index';
                dialogObj.show();
            }
        };
        document.getElementById('delete').onclick = function () {
            var index = parseInt((document.getElementById('deteteIndex')).value, 10);
            if (kanbanObj.columns.length > 1) {
                if (kanbanObj.columns.length >= (index + 1)) {
                    kanbanObj.deleteColumn(index);
                    addIndexObj.max = kanbanObj.columns.length;
                    deleteIndexObj.max = kanbanObj.columns.length - 1;
                    deleteFormObj.reset();
                } else {
                    dialogObj.content = 'Provide valid column Index';
                    dialogObj.show();
                }
            } else {
                dialogObj.content = 'Atleast one column must be displayed in kanban';
                dialogObj.show();
            }
            };
        function dlgButtonClick() {
                dialogObj.hide();
            }
        document.getElementById('addForm').addEventListener('submit', (e) => e.preventDefault());
        document.getElementById('deleteForm').addEventListener('submit', (e) => e.preventDefault());
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the important APIs required to manipulate the Kanban control. Provides necessary
            details in the
            property panel to add and remove the columns dynamically.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The demo explains how to add or remove columns programmatically.
        </p>
        <ul>
            <li><code>AddColumn:</code> The public method used to add a column to the Kanban board dynamically.</li>
            <li>
                <code>DeleteColumn:</code> The public method used to remove the existing column from the Kanban board based
                on an index.
            </li>
        </ul>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the API in ASP.NET MVC Kanban control. Explore here for more details."/>
                }

@section Title{
                    <title>ASP.NET MVC Kanban API Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of API in ASP.NET MVC Kanban Control</h1>
                }
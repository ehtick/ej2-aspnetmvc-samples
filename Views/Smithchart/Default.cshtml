@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Charts
@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div id="container" class="row">
            @Html.EJS().Smithchart("container").Load("load").Title(title => title.Text("Transmission details").Visible(true)).RenderType(RenderType.Impedance).Series(series =>
             {
                 series.Name("Transmission1").EnableAnimation(true).Tooltip(new SmithchartSeriesTooltip{ Visible = true }).Add();
                 series.Name("Transmission2").EnableAnimation(true).Tooltip(new SmithchartSeriesTooltip{ Visible = true }).Add();
             }).Render()
        </div>

    </div>
    <div class="col-lg-3 property-section">
        <table id="property" style="width:100%" title="Properties">
            <tbody>
                <tr style="height: 30px">
                    <td style="width: 50%" class="property-text">
                        Render Type
                    </td>
                    <td style="width: 50%">
                        <select id="rendering" style="width: 90px; height: 20px">
                            <option value="Impedance">Impedance</option>
                            <option value="Admittance">Admittance</option>
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <style>
        .property-text {
            font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
            font-size: 13px !important;
            font-weight: 400 !important;
        }
    </style>
    <script src="~/Scripts/SmithChart/theme-color.js"></script>
    <script>
        var smithchart;
        function load(args) {
            loadSmithChartTheme(args);
            args.smithchart.series[0].points = [
                { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },
                { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 2 },
                { resistance: 3.5, reactance: 1.6 }, { resistance: 2.5, reactance: 1.3 },
                { resistance: 2, reactance: 1.2 }, { resistance: 1.5, reactance: 1 },
                { resistance: 1, reactance: 0.8 }, { resistance: 0.5, reactance: 0.4 },
                { resistance: 0.3, reactance: 0.2 }, { resistance: 0, reactance: 0.15 }
            ];
            args.smithchart.series[1].points = [
                { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },
                { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },
                { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },
                { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.5 },
                { resistance: 3.5, reactance: 0 }, { resistance: 2.5, reactance: 0.4 },
                { resistance: 2, reactance: 0.5 }, { resistance: 1.5, reactance: 0.5 },
                { resistance: 1, reactance: 0.4 }, { resistance: 0.5, reactance: 0.2 },
                { resistance: 0.3, reactance: 0.1 }, { resistance: 0, reactance: 0.05 },
            ];
            args.smithchart.series[0].enableAnimation = false;
            args.smithchart.series[1].enableAnimation = false;
            args.smithchart.series[0].marker = {
                shape: 'Circle',
                visible: true,
                border: {
                    width: 2,
                }
            };
            args.smithchart.series[1].marker = {
                shape: 'Circle',
                visible: true,
                border: {
                    width: 2,
                }
            };
            args.smithchart.legendSettings = {
                visible: true,
                shape: "Circle"
            }
            smithchart = args.smithchart;
        }
        var mode = new ej.dropdowns.DropDownList({
            index: 0,
            width: 90,
            change: function () {
                var element = mode.value.toString();
                smithchart.renderType = element;
                smithchart.refresh();
            }
        });
        mode.appendTo('#rendering');
    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes two transmissions in Smith chart. Rendering Smith chart can be changed by using the <code>Render Type</code> in properties panel.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Default in ASP.NET MVC Smith Charts control. Explore here for more details."/>
                }
@section Description{
    <p>
        In this example, you can see how to render a Smith chart with multiple series. Legend has been enabled to denote the series in Smith chart.
    </p>
    <p>
        Tooltip is enabled in this example. To see the tooltip in action, hover the mouse over a data point or tap a data point in touch enabled devices
    </p>
}
@section Title{
                    <title>ASP.NET MVC Smith Charts Default Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default in ASP.NET MVC Smith Charts Control</h1>
                }
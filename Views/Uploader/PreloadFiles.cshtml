@using Syncfusion.EJ2


@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="control_wrapper">
            @Html.EJS().Uploader("UploadFiles").DropArea(".control-fluid").MinFileSize(10000).Removing("onFileRemove").MaxFileSize(4000000).AsyncSettings(new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save"), RemoveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove") }).Files((List<Syncfusion.EJ2.Inputs.UploaderUploadedFiles>)@ViewData["datasource"]).Render()
        </div>
    </div>

    <div class="col-lg-4 property-section">
        <div id="property" title="Properties">
            <div style='margin-left: 50px; padding-top:25px;'>
                @Html.EJS().Button("clearbtn").CssClass("e-btn e-css").Content("Clear All").Render()
            </div>
        </div>
    </div>

}

<style>
    .control_wrapper {
        max-width: 500px;
        margin: auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }
</style>

@section PreScripts {
<script>
    document.getElementById('clearbtn').onclick = function () {
        var uploadObj = document.getElementById('UploadFiles').ej2_instances[0];
        uploadObj.clearAll();
    };
    function onFileRemove(args) {
        args.postRawFile = false;
    }
</script>
}

@section ActionDescription{
    <div id="action-description">
        <p>This <a href="https://www.syncfusion.com/aspnet-mvc-ui-controls/file-upload"
        target="_blank" aria-label="ASP.NET MVC File Upload">ASP.NET MVC File Upload<span class="sr-only">opens in a new tab</span></a> example demonstrates how to pre-load the files of the Uploader. The already uploaded files are configured in file list to view and remove them.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>The Uploader control allows to load initial list of files which are already uploaded in server. The preload files are useful to view and remove from server. Also, you can achieve state persistence on page refresh. </p>
        <p>For more information, you can refer to the Preload Files section from this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/uploader/async/#preload-files" aria-label="documentation section"> documentation section<span class="sr-only">opens in a new tab</span></a>.</p>
        <p> To achieve state persistence, you can refer to this How-to section.</p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Preload Files in ASP.NET MVC File Upload control. Explore here for more details."/>
                }
@section Title{
                    <title>ASP.NET MVC File Upload Preload Files Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Preload Files in ASP.NET MVC File Upload Control</h1>
                }
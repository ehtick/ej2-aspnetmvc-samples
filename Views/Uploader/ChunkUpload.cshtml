@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using EJ2MVCSampleBrowser.Models

@section ControlsSection {
    <div class="col-lg-8 control-section">
        <div class="control_wrapper">
            @Html.EJS().Uploader("UploadFiles").DropArea(".control-fluid").MaxFileSize(104857600).Removing("onFileRemove").Pausing("onPausing").Resuming("onResuming").ChunkFailure("onBeforeFailure").AutoUpload(false).AsyncSettings(new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save"), RemoveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove"), ChunkSize = 500000 }).Render()
        </div>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <tr>
                <td class="left-side">Chunk Size: </td>
                <td style="padding-top: 10px">
                    @Html.EJS().DropDownList("chunksize").Placeholder("Select chunk size").PopupHeight("220px").Text("500 KB").DataSource(
                                        (IEnumerable<chunkValues>)ViewData["data"]).Change("valueChange").Fields(new DropDownListFieldSettings { Text = "text", Value = "chunkValue" }).Render()
                </td>
            </tr>
        </table>
    </div>

}

<style>
    .control_wrapper {
        max-width: 400px;
        margin: 0 auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }

    .control_wrapper .e-upload .e-upload-drag-hover {
        margin: 0;
    }
</style>

<script>
    function valueChange(args) {
        var uploadObj = document.getElementById('UploadFiles').ej2_instances[0];
        uploadObj.asyncSettings.chunkSize = parseInt(args.itemData.chunkValue);
    }
    function onFileRemove(args) {
        args.postRawFile = false;
    }
    var isInteraction = false;
    // to update flag variable value for automatic pause and resume
    function onPausing(args) {
        if (args.event !== null && !navigator.onLine) {
            isInteraction = true;
        }
        else {
            isInteraction = false;
        }
    }
    // to update flag variable value for automatic pause and resume
    function onResuming(args) {
        if (args.event !== null && !navigator.onLine) {
            isInteraction = true;
        }
        else {
            isInteraction = false;
        }
    }
    // to prevent triggering chunk-upload failure event and to pause uploading on network failure
    function onBeforeFailure(args) {
        args.cancel = !isInteraction;
        var uploadObj = document.getElementById('UploadFiles').ej2_instances[0];
        // interval to check network availability on every 500 milliseconds
        var clearTimeInterval = setInterval(function () {
            if (navigator.onLine && !ej.base.isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 4) {
                uploadObj.resume(uploadObj.filesData);
                clearSetInterval();
            }
            else {
                if (!isInteraction && !ej.base.isNullOrUndefined(uploadObj.filesData[0]) && uploadObj.filesData[0].statusCode == 3) {
                    uploadObj.pause(uploadObj.filesData);
                }
            }
        }, 500);
        // clear Interval after when network is available.
        function clearSetInterval() {
            clearInterval(clearTimeInterval);
        }
    }

</script>

@section ActionDescription{
    <div id="action-description">
        <p>
            This <a href="https://www.syncfusion.com/aspnet-mvc-ui-controls/file-upload"
        target="_blank" aria-label="ASP.NET MVC File Upload">ASP.NET MVC File Upload<span class="sr-only">opens in a new tab</span></a> example demonstrates the chunk upload functionalities of the Uploader component.
            Browse or drag-and-drop a large file to upload with pause, resume, and retry options. 
        </p>
        <p>Also, configured property panel to change the chunk size dynamically.</p>

    </div>
}

@section Description{
    <div id="description">
  <p>When the file size is large or transfer the file with slow network connection, the chunk upload feature slices the files and upload the sliced chunks to server in sequential order
    using the <a href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Inputs.UploaderAsyncSettings.html#Syncfusion_EJ2_Inputs_UploaderAsyncSettings_ChunkSize"
        target="_blank" aria-label="chunkSize">chunkSize<span class="sr-only">opens in a new tab</span></a> API.
    </p>
    <p>The sample is configured with the following options:</p>
    <ul>
        <li>While uploading, you can pause the upload and resume it later.</li>
        <li> If the upload fails, retry option will be enabled.</li>
        <li> The sample is configured with maximum file size as `100 MB` to upload.</li>
    </ul>
    <h4>Automatic pause and resume</h4>
    <p>
        If the application lost its connection (<code>offline</code>), the upload component pauses the process automatically. After the connection is up (<code>online</code>), the upload component will resume its process.
    </p>
    <p>More information on the Uploader instantiation can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/uploader/chunk-upload/" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.</p>        

    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Chunk Upload in ASP.NET MVC File Upload control. Explore here for more details."/>
                }

@section Title{
                    <title>ASP.NET MVC File Upload Chunk Upload Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Chunk Upload in ASP.NET MVC File Upload Control</h1>
                }
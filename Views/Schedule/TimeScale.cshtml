@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule
@using Syncfusion.EJ2.DropDowns

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("650px").CssClass("time-scale").SelectedDate(new DateTime(DateTime.Today.Year, 1, 10)).CurrentView(View.TimelineWeek).Views(view => { view.Option(View.Day).Add(); view.Option(View.Week).Add(); view.Option(View.TimelineDay).Add(); view.Option(View.TimelineWeek).Add(); }).TimeScale(ts => ts.Interval(60).SlotCount(6)).EventSettings(new ScheduleEventSettings { DataSource = ViewData["datasource"] }).WorkDays((int[])ViewData["workDays"]).Render()
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 100%;">
                        <div>
                            @Html.EJS().DropDownList("interval").Value("60").Placeholder("Interval (in Minutes)").FloatLabelType(Syncfusion.EJ2.Inputs.FloatLabelType.Always).DataSource(ViewData["intervals"]).Change("intervalChange").Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 100%;">
                        <div>
                            @Html.EJS().DropDownList("slotCount").Value("6").Placeholder("Slot Count").FloatLabelType(Syncfusion.EJ2.Inputs.FloatLabelType.Always).DataSource(ViewData["slotCounts"]).Change("slotCountChange").Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 100%;">
                        <div>
                            @Html.EJS().DropDownList("timescale").Placeholder("Grid lines").FloatLabelType(Syncfusion.EJ2.Inputs.FloatLabelType.Always).Value("enable").DataSource(ViewData["timeScaleOptions"]).Change("timeScaleOptionChange").Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 100%;">
                        <div>
                            @Html.EJS().DropDownList("template").Value("no").Placeholder("Apply Template").FloatLabelType(Syncfusion.EJ2.Inputs.FloatLabelType.Always).DataSource(ViewData["timeScaleTemplateOptions"]).Change("timeScaleTemplateOptionChange").Fields(new DropDownListFieldSettings { Text = "Text", Value = "Value" }).Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <style>
        .time-scale.e-schedule.e-device .e-vertical-view .e-left-indent,
        .time-scale.e-schedule.e-device .e-vertical-view .e-time-cells-wrap {
            width: 50px;
        }

        .time-scale.e-schedule .e-timeline-view .e-date-header-wrap table col, 
        .time-scale.e-schedule .e-timeline-view .e-content-wrap table col {
            width: 75px;
        }
    </style>
    ï»¿<script id="majorSlotTemplate" type="text/x-template">
        <div>${majorSlotTemplate(data.date)}</div>
    </script>
    <script id="minorSlotTemplate" type="text/x-template">
        <div style="text-align: center">${minorSlotTemplate(data.date)}</div>
    </script>
    <script type="text/javascript">
        window.majorSlotTemplate = function (date) {
            var instance = new ej.base.Internationalization();
            return instance.formatDate(date, { skeleton: 'hm' });
        };
        window.minorSlotTemplate = function (date) {
            var instance = new ej.base.Internationalization();
            return instance.formatDate(date, { skeleton: 'ms' }).replace(':00', '');
        };

        function intervalChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.timeScale.interval = parseInt(args.value, 10);
            scheduleObj.dataBind();
        }

        function slotCountChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.timeScale.slotCount = parseInt(args.value, 10);
            scheduleObj.dataBind();
        }

        function timeScaleOptionChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.timeScale.enable = (args.value === 'enable') ? true : false;
            scheduleObj.dataBind();
        }

        function timeScaleTemplateOptionChange(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            scheduleObj.timeScale.majorSlotTemplate = (args.value === 'yes') ? '#majorSlotTemplate' : null;
            scheduleObj.timeScale.minorSlotTemplate = (args.value === 'yes') ? '#minorSlotTemplate' : null;
            scheduleObj.dataBind();
        }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Timescale in ASP.NET MVC Scheduler control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo depicts how to customize the grid lines of scheduler with different duration, count and also, how to
            apply template customizations on it.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, scheduler has been allowed to display different number of grid lines per hour assigned with
            different duration to each cell,
            by using the <code>Interval</code> and <code>SlotCount</code> properties.
            The grid lines can also be disabled on schedule, by setting <code>false</code> to the <code>enable</code> property available within
            <code>timeScale</code>. The time header text can be customized by using the
            <code>majorSlotTemplate</code> and
            <code>minorSlotTemplate</code> properties.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Scheduler Timescale Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Timescale in ASP.NET MVC Scheduler Control</h1>
                }

@using Syncfusion.EJ2.Schedule
@using Syncfusion.EJ2.DropDowns
@using Syncfusion.EJ2.Popups

<link href="~/Content/schedule/EventManagement.css" rel="stylesheet" />

@section ControlsSection{
    <div class="control-section event-management-control-section">
        <div class="control-wrapper event-management-wrapper">
            @(Html.EJS().Schedule("ScheduleObj")
            .Width("100%")
            .Height("550px")
            .CssClass("schedule-event-management")
            .SelectedDate(new DateTime(2025, 2, 24))
            .StartHour("08:00")
            .EndHour("18:00")
            .AllowDragAndDrop(false)
            .AllowResizing(false)
            .AllowOverlap(false)
            .CurrentView(View.Day)
            .Views(view =>
            {
                view.Option(View.Day).Add();
                view.Option(View.Week).Add();
                view.Option(View.Agenda).EventTemplate("#agendaTemplate").Add();
            }).TimeScale(ts => ts.SlotCount(3))
            .EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource })
            .ResourceHeaderTemplate("#resourceHeaderTemplate")
            .QuickInfoTemplates(q => q
                .Header("#quickInfoHeader")
                .Content("#quickInfoContent")
            ).Group(group => group.Resources((string[])ViewData["Resources"])).Resources(res =>
            {
                res.DataSource(ViewData["Rooms"]).Field("RoomId").Title("Rooms").Name("Rooms").TextField("RoomName").IdField("RoomId").ColorField("RoomColor").Add();
            }).EventSettings(e => e
            .Fields(f => f
                .Subject(sub => sub.Name("Subject"))
                .StartTime(start => start.Name("StartTime"))
                .EndTime(end => end.Name("EndTime"))
                .Location(loc => loc.Name("Title"))
                .Description(desc => desc.Name("Capacity")))
            .DataSource(ViewData["datasource"])).EventRendered("onEventRendered").PopupOpen("onPopupOpen").PopupClose("onPopupClose").CellClick("onCellClick").DataBound("onDataBound")
            .ToolbarItems(new List<ScheduleToolbarItem>
            {
                new ScheduleToolbarItem { Name = ToolbarName.Previous },
                new ScheduleToolbarItem { Name = ToolbarName.Next },
                new ScheduleToolbarItem { Name = ToolbarName.DateRangeText },
                new ScheduleToolbarItem { Name = ToolbarName.Views, Align = Syncfusion.EJ2.Navigations.ItemAlign.Right },
                new ScheduleToolbarItem {
                    Type = Syncfusion.EJ2.Navigations.ItemType.Separator,
                    Align = Syncfusion.EJ2.Navigations.ItemAlign.Right,
                    CssClass = "toolbar-post-agenda"
                },
                new ScheduleToolbarItem {
                    Name = ToolbarName.Custom,
                    Type = Syncfusion.EJ2.Navigations.ItemType.Input,
                    Align = Syncfusion.EJ2.Navigations.ItemAlign.Right,
                    CssClass = "toolbar-post-agenda room-filter",
                    Template = "#roomsDropDown"
                },
                new ScheduleToolbarItem {
                    Type = Syncfusion.EJ2.Navigations.ItemType.Separator,
                    Align = Syncfusion.EJ2.Navigations.ItemAlign.Right,
                    CssClass = "toolbar-post-agenda"
                },
                new ScheduleToolbarItem {
                    Name = ToolbarName.Custom,
                    Type = Syncfusion.EJ2.Navigations.ItemType.Button,
                    Align = Syncfusion.EJ2.Navigations.ItemAlign.Right,
                    CssClass = "toolbar-post-agenda",
                    PrefixIcon = "e-icons e-show-hide-panel",
                    ShowTextOn = Syncfusion.EJ2.Navigations.DisplayMode.Overflow,
                    Overflow = Syncfusion.EJ2.Navigations.OverflowOption.Show,
                    Id = "overview_toolbar_settings_unplanned_events",
                    Click = "toggleUnplannedEventsElement"
                },
                new ScheduleToolbarItem {
                     Name = ToolbarName.Custom,
                    Type = Syncfusion.EJ2.Navigations.ItemType.Button,
                    Align = Syncfusion.EJ2.Navigations.ItemAlign.Right,
                    CssClass = "toolbar-post-agenda",
                    PrefixIcon = "e-icons e-print-export",
                    ShowTextOn = Syncfusion.EJ2.Navigations.DisplayMode.Overflow,
                    Overflow = Syncfusion.EJ2.Navigations.OverflowOption.Show,
                    Template = "#printAndExport"
                }}).Render())
            <div class="unplanned-events-container">
                <div class="title-container">
                    <div class="title-text">Unscheduled Events</div>
                </div>
                <div id="list-container">
                    <div class="events-list">
                        <label class="event-label">Event</label>
                        @Html.EJS().DropDownList("UnplannedEventDropDown").DataSource((IEnumerable<object>)ViewData["UnPlannedEventsList"]).Fields(new DropDownListFieldSettings { Text = "Name", Value = "Id" }).Index(0).Change("onUnplannedEventSelect").Render()
                    </div>
                    <div id="AllTreeview" style="display:block;">
                        @Html.EJS().TreeView("AllTreeview").Fields(f => f.Id("Id").Text("Subject").DataSource(ViewData["AllData"])).CssClass("event-management-treeview").AllowDragAndDrop(true).DragArea(".event-management-wrapper").NodeTemplate("#treeTemplate").NodeDragStart("onTreeDragStart").NodeDragging("onTreeDragging").NodeDragStop("onTreeDragStop").Render()
                    </div>
                    <div id="CloudTreeview" style="display:none;">
                        @Html.EJS().TreeView("CloudTreeview").Fields(f => f.Id("Id").Text("Subject").DataSource(ViewData["CloudData"])).CssClass("event-management-treeview").AllowDragAndDrop(true).DragArea(".event-management-wrapper").NodeTemplate("#treeTemplate").NodeDragStart("onTreeDragStart").NodeDragging("onTreeDragging").NodeDragStop("onTreeDragStop").Render()
                    </div>
                    <div id="AITreeview" style="display:none;">
                        @Html.EJS().TreeView("AITreeview").Fields(f => f.Id("Id").Text("Subject").DataSource(ViewData["AIData"])).CssClass("event-management-treeview").AllowDragAndDrop(true).DragArea(".event-management-wrapper").NodeTemplate("#treeTemplate").NodeDragStart("onTreeDragStart").NodeDragging("onTreeDragging").NodeDragStop("onTreeDragStop").Render()
                    </div>
                    <div class="no-events-message hidden">All events have been scheduled</div>
                </div>
            </div>
            <div id="target">
                @Html.EJS().Dialog("modalDialog").Header("Notice").Visible(false).ShowCloseIcon(true).IsModal(true).Width("335px").Height("240px").CssClass("alert-dialog").Target("#target").Buttons(new List<DialogDialogButton>
                {
                new DialogDialogButton
                {
                    Click = "onDialogOK",
                    ButtonModel = new { content = "OK"}
                }}).Render()
            </div>
        </div>
    </div>

    <div id="roomsDropDown">
        @Html.EJS().DropDownList("roomDropDown").DataSource((IEnumerable<object>)ViewData["RoomsData"]).Fields(new DropDownListFieldSettings { Text = "RoomName", Value = "RoomId" }).Index(0).ValueTemplate("#roomValueTemplate").Change("onRoomChange").Render()
    </div>

    <div id="printAndExport">
        <div id="printExportButton"></div>
    </div>

    <script id="roomValueTemplate" type="text/x-template">
        <span>${if (RoomName === 'All')}Room: All ${else} ${RoomName} ${/if}</span>
    </script>


    <script id="agendaTemplate" type="text/x-template">
        <div class="agenda-event">
            <div class="event-subject">${Subject}</div>
            <div class="event-description">${Description}</div>
            ${renderAgendaDetails(data)}
        </div>
    </script>

    <script type="text/x-template" id="resourceHeaderTemplate">
        <div class="template-wrap">
            <div class="resource-detail">
                <div class="resource-name">${resourceData.RoomName}</div>
                <div class="capacity-wrap">
                    <span class="e-icons e-capacity-icon"></span>
                    <span class="e-capacity">${resourceData.RoomCapacity} Capacity</span>
                </div>
            </div>
        </div>
    </script>


    <script id="quickInfoHeader" type="text/x-template">
        <div class="e-event-header e-popup-header">
            <div class="e-header-icon-wrapper">
                <button id="close" class="e-close e-icons"
                        title="Close" onclick="closeQuickPopup()"></button>
            </div>
            <div class="quick-info-header-content" style="${getQuickInfoHeaderStyle(data)}">
                <div class="quick-info-title">${Subject}</div>
                <div class="duration-text">${getQuickInfoDurationText(data)}</div>
            </div>
        </div>
    </script>


    <script id="quickInfoContent" type="text/x-template">
        <div class="quick-info-content">
            <div class="event-content">
                <div class="e-room e-content-item">
                    <label>Room</label>
                    <span class="colon">:</span>
                    <span class="e-content">
                        ${getRoomName(data.RoomId)}
                    </span>
                </div>

                <div class="e-event e-content-item">
                    <label>Event</label>
                    <span class="colon">:</span>
                    <span class="e-content">${Title}</span>
                </div>

                ${if (Speakers.length >= 1)}
                <div class="e-speaker e-content-item">
                    <label>${if (Speakers.length > 1)}Speakers${else}Speaker${/if}</label>
                    <span class="colon">:</span>
                    <span class="e-content">${getSpeakerNames(Speakers)}</span>
                </div>
                ${/if}

                <div class="e-count e-content-item">
                    <label>Participant count</label>
                    <span class="colon">:</span>
                    <span class="e-content">${Capacity}</span>
                </div>
            </div>
        </div>
    </script>

    <script id="treeTemplate" type="text/x-template">
        <div class="unplanned-item">
            <div class="unplanned-item-subject">${Subject}</div>
            <div class="unplanned-item-duration">
                <span class="duration-icon e-icons"></span>
                <span class="duration-value">Duration: ${Duration}</span>
            </div>
            <div class="unplanned-item-capacity">
                <span class="capacity-icon e-icons"></span>
                <span class="capacity-value">Audience Size: ${Capacity}</span>
            </div>
        </div>
    </script>

    <script>
    let isDraggedItemDropped = false;
    var draggedItemId = null;
    var draggedItemSpeakers = [];
    var draggedItemDescription = '';
    var selectedUnplannedEventItem = 0;

    const treeviewRefs = [
        document.getElementById("AllTreeview"),
        document.getElementById("CloudTreeview"),
        document.getElementById("AITreeview")
    ];

    var rooms = @Html.Raw(ViewBag.RoomsJson);
    var cloudData = @Html.Raw(ViewBag.CloudDataJson);
    var aiData = @Html.Raw(ViewBag.AIDataJson);
    var allData = cloudData.concat(aiData);
    var eventTitles = ["All", "Cloud Security Essentials", "AI for Automation"];

    function closeQuickPopup() {
        var scheduleObj = document.getElementById("ScheduleObj").ej2_instances[0];
        scheduleObj.closeQuickInfoPopup();
    }

    function getQuickInfoHeaderStyle(data) {
        var resourceData = getResourceData(data.RoomId);
        return resourceData ? `background:${resourceData.RoomColor}; color: #FFFFFF;` : '';
    }

    function getQuickInfoDurationText(data) {
        return intl.formatDate(data.StartTime, { type: 'date', skeleton: 'full' }) + ' (' +
            intl.formatDate(data.StartTime, { skeleton: 'hm' }) + ' - ' +
            intl.formatDate(data.EndTime, { skeleton: 'hm' }) + ')';
    }

    function onDataBound() {
        const printButton = document.querySelector('#printExportButton');
        if (!(printButton.ej2_instances && printButton.ej2_instances[0])) {
            var dropDownButton = new ej.splitbuttons.DropDownButton({
                items: [
                    { text: 'Print', id: 'print' },
                    { text: 'Export', id: 'export' }
                ],
                iconCss: "e-icons e-more-horizontal-1",
                cssClass: "e-tbar-btn",
                select: handlePrintExportSelect
            });
            dropDownButton.appendTo("#printExportButton");
            // Remove the caret span manually
            const buttonEl = document.querySelector('#printExportButton');
            const caret = buttonEl?.querySelector('.e-caret');
            if (caret) caret.remove();
        }
    }

    function getResourceData(roomId) {
        var schedule = document.getElementById('ScheduleObj').ej2_instances[0];
        var resourceData = schedule.getResourceCollections().find(r => r.field === "RoomId");
        return (resourceData && resourceData.dataSource.find(r => r.RoomId === roomId)) || {};
    }
    function getRoomName(roomId) {
        return getResourceData(roomId).RoomName || "";
    }

    function getSpeakerNames(speakers) {
        return speakers.map(function (speaker, index) {
            var text = speaker.Name + ' (' + speaker.Title + ')';
            if (index < speakers.length - 2) return text + ', ';
            if (index === speakers.length - 2) return text + ' and ';
            return text;
        }).join('');
    }

    function toggleUnplannedEventsElement() {
        var settingsPanel = document.querySelector('.unplanned-events-container');
        var toggleButton = document.querySelector('.e-show-hide-panel') || document.querySelector('.e-view-side');
        if (!settingsPanel || !toggleButton) return;
        if (settingsPanel.classList.contains('hide')) {
            ej.base.removeClass([settingsPanel], 'hide');
            if (toggleButton.classList.contains('e-view-side')) {
                ej.base.removeClass([toggleButton], 'e-view-side');
                ej.base.addClass([toggleButton], 'e-show-hide-panel');
            }
        } else {
            ej.base.addClass([settingsPanel], 'hide');
            if (toggleButton.classList.contains('e-show-hide-panel')) {
                ej.base.removeClass([toggleButton], 'e-show-hide-panel');
                ej.base.addClass([toggleButton], 'e-view-side');
            }
        }
    }

    function onDialogOK() {
        var dialogObj = document.getElementById('modalDialog').ej2_instances[0];
        dialogObj.hide();
    }

    function checkRoomCapacity(capacity, roomId) {
        const room = rooms.find(r => r.RoomId === roomId);
        return room && room.RoomCapacity >= capacity;
    }
    function onCellClick(args) {
        args.cancel = true;
    }
    var intl = new ej.base.Internationalization();
    function getTimeString(value) {
        return intl.formatDate(new Date(value), { type: 'time', skeleton: 'short' });
    }
    function renderAgendaDetails(data) {
        let html = '';

        if (data.Subject.toLowerCase().indexOf('break') === -1 && data.Subject.toLowerCase().indexOf('lunch') === -1) {
            html += '<div class="event-duration-audience">' +
                '<div class="event-duration">' +
                '<span class="e-icons e-duration-icon"></span>' +
                '<span class="e-duration">' + getTimeString(data.StartTime) + ' - ' + getTimeString(data.EndTime) + '</span>' +
                '</div>' +
                '<div class="event-audience">' +
                '<span class="e-icons e-audience-icon"></span>' +
                '<span class="e-audience-count">Audience : ' + data.Capacity + '</span>' +
                '</div>' +
                '</div>';
        }

        if (data.Speakers && data.Speakers.length > 0) {
            html += '<div class="event-speaker">' +
                '<div class="separator-line"></div>' +
                '<label>' + (data.Speakers.length > 1 ? 'Speakers' : 'Speaker') + '</label>';

            for (let i = 0; i < data.Speakers.length; i++) {
                const speaker = data.Speakers[i];
                html += '<div class="speaker-details">' +
                    '<div class="speaker-image">' + speaker.Name.charAt(0) + '</div>' +
                    '<div class="speaker-info">' +
                    '<div class="speaker-name">' + speaker.Name + '</div>' +
                    '<div class="speaker-title">' + speaker.Title + '</div>' +
                    '<div class="speaker-note">' + speaker.Note + '</div>' +
                    '</div>' +
                    '</div>';
            }

            html += '</div>';
        }

        return html;
    }
    function onEventRendered(args) {
        var data = args.data;
        var subject = data.Subject ? data.Subject.toLowerCase() : '';
        var isBreakEvent = subject.includes('break') || subject.includes('lunch');
        if (isBreakEvent) {
            if (args.element.classList.contains('e-agenda-item')) {
                var appointment = args.element.querySelector('.e-appointment');
                if (appointment) {
                    appointment.classList.add('e-break-event');
                }
            } else {
                args.element.classList.add('e-break-event');
            }
        }
    }
    function onRoomChange(args) {
        var schedule = document.getElementById('ScheduleObj').ej2_instances[0];
        var value = args.value;
        var previous = args.previousItemData;
        if (!previous) {
            return;
        }
        if (value === 0) {
            schedule.removeResource(previous.RoomId, 'Rooms');
            schedule.addResource(rooms, 'Rooms', value);
        } else {
            if (previous.RoomId === 0) {
                rooms.filter(function (r) { return r.RoomId !== value; })
                    .forEach(function (r) {
                        schedule.removeResource(r.RoomId, 'Rooms');
                    });
            } else {
                schedule.removeResource(previous.RoomId, 'Rooms');
                var newRoom = rooms.find(function (r) { return r.RoomId === value; });
                schedule.addResource(newRoom, 'Rooms', value);
            }
        }
        schedule.dataBind();
    }
    function handlePrintExportSelect(args) {
        const schedule = document.getElementById("ScheduleObj").ej2_instances[0];

        switch (args.item.id) {
            case "print":

                document.querySelectorAll('.toolbar-post-agenda').forEach(function (item) {
                    item.style.display = 'none';
                });

                schedule.print();

                setTimeout(function () {
                    document.querySelectorAll('.toolbar-post-agenda').forEach(function (item) {
                        item.style.display = 'inline-block';
                    });
                }, 1000);
                break;

            case "export":
                var exportValues = {
                    fields: ['Id', 'Subject', 'Title', 'StartTime', 'EndTime', 'RoomId', 'Capacity']
                };
                schedule.exportToExcel(exportValues);
                break;

            default:
                break;
        }
    }
    function onPopupOpen(args) {
        var isQuickInfo = args.type === 'QuickInfo' || args.type === 'ViewEventInfo';
        var isEditor = args.type === 'Editor';
        var isBreak = args.target && args.target.classList.contains('e-break-event');
        if ((isQuickInfo && isBreak) || (isEditor && !isDraggedItemDropped)) {
            args.cancel = true;
            return;
        }
        if (isQuickInfo) {
            args.element.classList.add('event-management-quick-popup');
        } else if (isEditor) {
            args.element.classList.add('event-management-editor-popup');
            var capacityAlert = args.element.querySelector('.capacity-alert');
            var timeAlert = args.element.querySelector('.time-alert');
            if (capacityAlert) capacityAlert.remove();
            if (timeAlert) timeAlert.remove();
            var startElement = args.element.querySelector('.e-start-end-row .e-start.e-control.e-datetimepicker');
            var endElement = args.element.querySelector('.e-start-end-row .e-end.e-control.e-datetimepicker');
            if (startElement && endElement) {
                var startPicker = startElement.ej2_instances[0];
                var endPicker = endElement.ej2_instances[0];
                startPicker.change = function () {
                    var startTime = new Date(startPicker.value);
                    if (args.data && args.data.Duration) {
                        var match = args.data.Duration.match(/(\d+)\s+(hour|hours|minute|minutes)/i);
                        if (match) {
                            var val = parseInt(match[1], 10);
                            var unit = match[2].toLowerCase();
                            var newEndTime = new Date(startTime);
                            if (unit.indexOf('hour') >= 0) {
                                newEndTime.setHours(newEndTime.getHours() + val);
                            } else {
                                newEndTime.setMinutes(newEndTime.getMinutes() + val);
                            }
                            endPicker.value = newEndTime;
                        }
                    }
                };
            }
        }
    }
    function onPopupClose(args) {
        if (args.type === 'Editor') {
            var targetElement = args.event.target;
            var isSaveAction = targetElement.classList.contains('e-event-save')
                || targetElement.classList.contains('e-save-icon');
            if (!isSaveAction) { return; }
            var data = args.data;
            var roomId = data.RoomId;
            var startTime = new Date(data.StartTime);
            var endTime = new Date(data.EndTime);
            var capacity = data.Capacity;
            var scheduleObj = document.getElementById('ScheduleObj').ej2_instances[0];
            var isRoomFiltered = scheduleObj.resourceCollection[0].dataSource.length === 1;
            var resourceIndex = isRoomFiltered ? 0 : (roomId - 1);
            var isRoomAvailable = scheduleObj.isSlotAvailable(startTime, endTime, resourceIndex)
                && startTime.getHours() >= 8
                && (endTime.getHours() < 18
                    || (endTime.getHours() === 18 && endTime.getMinutes() === 0));
            var isCapacityAvailable = checkRoomCapacity(capacity, roomId);
            var timeRow = args.element.querySelector('.e-start-end-row');
            if (!isRoomAvailable) {
                if (!args.element.querySelector('.time-alert')) {
                    var newDiv = document.createElement('div');
                    newDiv.classList.add('time-alert');
                    newDiv.textContent = 'Select an open time between 8 a.m. and 6 p.m.';
                    timeRow.insertAdjacentElement('afterend', newDiv);
                }
            } else {
                if (args.element.querySelector('.time-alert')) {
                    args.element.querySelector('.time-alert').remove();
                }
            }

            var capacityRow = args.element.querySelector('.e-description-row');
            if (!isCapacityAvailable) {
                if (!args.element.querySelector('.capacity-alert')) {
                    var newDiv = document.createElement('div');
                    newDiv.classList.add('capacity-alert');
                    newDiv.textContent = "Number of participants exceeds the room's limit.";
                    capacityRow.insertAdjacentElement('afterend', newDiv);
                }
            } else {
                if (args.element.querySelector('.capacity-alert')) {
                    args.element.querySelector('.capacity-alert').remove();
                }
            }

            if (!isRoomAvailable || !isCapacityAvailable) {
                args.cancel = true;
            }
            else {
                var unplannedEventsTreeViewRefs = [
                    document.getElementById('AllTreeview').ej2_instances[0],
                    document.getElementById('CloudTreeview').ej2_instances[0],
                    document.getElementById('AITreeview').ej2_instances[0]
                ];
                var unplannedEventTreeViewRef = unplannedEventsTreeViewRefs[selectedUnplannedEventItem];
                var updatedData = (unplannedEventTreeViewRef.fields.dataSource || []).filter(function (item) {
                    return item.Id !== draggedItemId;
                });
                unplannedEventTreeViewRef.fields.dataSource = updatedData;
                unplannedEventTreeViewRef.dataBind();
                allData = allData.filter(function (item) {
                    return item.Id !== draggedItemId;
                });
                handleEmptyDataSourceDisplay(unplannedEventTreeViewRef, updatedData);
                args.data.Speakers = draggedItemSpeakers;
                args.data.Description = draggedItemDescription;
            }
            isDraggedItemDropped = false;
        }
    }
    function onUnplannedEventSelect(args) {
        const previouslySelectedItem = selectedUnplannedEventItem;
        selectedUnplannedEventItem = parseInt(args.itemData.Id);
        treeviewRefs[previouslySelectedItem].style.display = "none";
        treeviewRefs[selectedUnplannedEventItem].style.display = "block";
        const treeviewInstance = ej.base.getComponent(treeviewRefs[selectedUnplannedEventItem], "treeview");
        let newDataSource = selectedUnplannedEventItem === 0
            ? allData
            : unplannedEventsUpdatedData(allData, eventTitles[selectedUnplannedEventItem]);
        treeviewInstance.fields.dataSource = newDataSource;
        treeviewInstance.dataBind();
        handleEmptyDataSourceDisplay(treeviewInstance, newDataSource);
    }
    function unplannedEventsUpdatedData(dataSource, title) {
        return dataSource.filter(item => item.Title === title);
    }
    function handleEmptyDataSourceDisplay(treeViewRef, dataSource) {
        const noEventsElement = document.querySelector(".no-events-message");
        if (!dataSource || dataSource.length === 0) {
            treeViewRef.element.style.display = "none";
            noEventsElement.classList.remove("hidden");
        } else {
            treeViewRef.element.style.display = "block";
            noEventsElement.classList.add("hidden");
        }
    }
    function onTreeDragStart() {
        document.body.classList.add('e-disble-not-allowed');
    }
    function onTreeDragging(args) {
        var scheduleObj = document.getElementById("ScheduleObj").ej2_instances[0];
        document.body.classList.add('tree-item-dragging');
        if (scheduleObj.isAdaptive) {
            document.querySelectorAll('.e-device-hover').forEach(element => element.classList.remove('e-device-hover'));
            if (args.target.classList.contains('e-work-cells')) {
                args.target.classList.add('e-device-hover');
            }
        }
        args.target.classList.toggle('not-allowed-cursor',
            !args.target.classList.contains('e-work-cells'));
    }
    function onTreeDragStop(args) {
        const scheduleObj = document.getElementById("ScheduleObj").ej2_instances[0];
        const alertDialog = document.getElementById("modalDialog").ej2_instances[0];
        document.body.classList.remove('tree-item-dragging', 'e-disble-not-allowed');
        document.querySelectorAll('.not-allowed-cursor, .e-device-hover')
            .forEach(element => element.classList.remove('not-allowed-cursor', 'e-device-hover'));
        if (!args.target.closest(".e-treeview") && args.target.classList.contains('e-work-cells')) {
            const treeObj = ej.base.getComponent(
                treeviewRefs[selectedUnplannedEventItem],
                "treeview"
            );
            const data = treeObj.fields.dataSource.find(item => item.Id == +args.draggedNodeData.id);
            if (!data) return;
            const cellDetails = scheduleObj.getCellDetails(args.target);
            const startTime = cellDetails.startTime;
            const [value, unit] = data.Duration.split(" ");
            const endTime = new Date(startTime);
            unit.includes("hour") ? endTime.setHours(endTime.getHours() + +value)
                : endTime.setMinutes(endTime.getMinutes() + +value);
            const roomDetails = scheduleObj.getResourcesByIndex(cellDetails.groupIndex);
            const roomId = roomDetails.resourceData.RoomId;
            var isRoomFiltered = scheduleObj.resourceCollection[0].dataSource.length === 1;
            var resourceIndex = isRoomFiltered ? 0 : (roomId - 1);
            const isAvailable = scheduleObj.isSlotAvailable(startTime, endTime, resourceIndex);
            const isCapable = data.Capacity <= (rooms.find(r => r.RoomId === roomId)?.RoomCapacity || 0);
            if (!isAvailable || !isCapable) {
                alertDialog.content = !isAvailable
                    ? "This room is already booked for this time slot. Please select a different room or time."
                    : "This room cannot accommodate the stated number of attendees. Please select a room with a suitable capacity.";
                alertDialog.show();
                return;
            }
            isDraggedItemDropped = true;
            draggedItemId = data.Id;
            draggedItemSpeakers = data.Speakers || [];
            draggedItemDescription = data.Description || '';
            scheduleObj.openEditor({
                Subject: data.Subject,
                Title: data.Title,
                StartTime: startTime,
                EndTime: endTime,
                RoomId: roomId,
                Capacity: data.Capacity,
                Duration: data.Duration,
                EventType: data.EventType,
                TargetAudience: data.TargetAudience,
                EventLevel: data.EventLevel,
                EventTags: data.EventTags
            }, 'Add', true);
        }
        document.body.classList.remove('e-disble-not-allowed');

    }
    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Event Management in ASP.NET MVC Scheduler control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This demo showcases a technical event management system that uses the Scheduler component, where each technical event is split into multiple sessions with specific room allocations. The system features drag-and-drop capabilities for scheduling sessions, conflict prevention, and filtering by room.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            This example demonstrates how to implement a technical event management system using the Scheduler component. The application includes the following key features:
        </p>
        <ul>
            <li>Each technical event is organized into multiple separate sessions, with specific room allocations on the same day.</li>
            <li>An external list of unscheduled sessions that can be scheduled via drag-and-drop functionality</li>
            <li>Prevention of scheduling conflicts and room capacity overflows while dragging and dropping externally maintained event sessions.</li>
            <li>Room-based filtering through toolbar dropdown selections.</li>
            <li>Ability to filter and view unscheduled event sessions by technical event.</li>
            <li>Detailed agenda view that displays event information including speakers, audience size, and session descriptions.</li>
        </ul>
    </div>
}
@section Title{
    <title>ASP.NET MVC Scheduler Event Management Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Event Management in ASP.NET MVC Scheduler Control</h1>
}




@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("650px").Views(ViewData["view"]).ActionBegin("onActionBegin").EventSettings(new ScheduleEventSettings { DataSource = ViewData["datasource"] }).SelectedDate(new DateTime(DateTime.Today.Year, 1, 10)).Render()
        </div>
    </div>

    <style>
        .e-schedule-toolbar .e-toolbar-item.e-today {
            display: none;
        }

        .e-bigger .e-schedule .e-schedule-toolbar .e-toolbar-items .e-toolbar-item.e-excel-export .e-tbar-btn.e-btn.e-control .e-icons.e-btn-icon.e-icons.e-export-excel.e-icon-left {
            padding: 5px 6px 6px;
        }
    </style>

    <script type="text/javascript">
        function onActionBegin(args) {
            if (args.requestType === 'toolbarItemRendering') {
                var exportItem = {
                    align: 'Right', showTextOn: 'Both', prefixIcon: 'e-export-excel',
                    text: 'Excel Export', cssClass: 'e-excel-export', click: onExportClick
                };
                args.items.push(exportItem);
            }
        }

        function onExportClick() {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var exportFields = [
                { name: 'Id', text: 'Id' },
                { name: 'Subject', text: 'Summary' },
                { name: 'StartTime', text: 'Start Date' },
                { name: 'EndTime', text: 'End Date' },
                { name: 'Location', text: 'Place' }
            ];
            var exportValues = { fieldsInfo: exportFields };
            scheduleObj.exportToExcel(exportValues);
        }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Excel Exporting in ASP.NET MVC Scheduler control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>This example demonstrates how to export the Scheduler events to an Excel file format at client-side.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, the Scheduler events data are exported to an Excel file by using the public method
            <code>exportToExcel</code>. By default, the whole event collection bound to the Scheduler gets exported as an excel file. To
            export only specific events of Scheduler, you need to pass the custom data collection as a parameter to the
            <code>exportToExcel</code> method. This method accepts the export options as its arguments such as fileName, exportType,
            fields, customData, and includeOccurrences. The fileName denotes the name to be given for the exported file and
            the <code>exportType</code> allows you to set the format of the excel file to be exported either as .xlsx or .csv. The custom
            or specific field collection of event dataSource to be exported can be provided through <code>fieldsInfo</code> option and the
            custom data collection can be exported by passing them through the <code>customData</code> option. There also exists option
            to export individual instances of the recurring events to an excel file, by setting true or false to the
            <code>includeOccurrences</code> option, denoting either to include or exclude the occurrences as separate instances on an
            exported excel file.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Scheduler Excel Exporting Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Excel Exporting in ASP.NET MVC Scheduler Control</h1>
                }
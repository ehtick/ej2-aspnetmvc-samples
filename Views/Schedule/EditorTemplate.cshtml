@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule

@{
    Dictionary<string, object> validationRules = new Dictionary<string, object>() { { "required", true } };
}
@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("650px").ActionBegin("onActionBegin").EventRendered("onEventRendered").PopupOpen("onPopupOpen").EventSettings(e => e.Fields(f => f.StartTime(st => st.Name("StartTime").Validation(validationRules)).EndTime(et => et.Name("EndTime").Validation(validationRules))).DataSource(ViewData["datasource"])).Views(ViewData["view"]).EditorTemplate("#EventEditorTemplate").EditorHeaderTemplate("#EventEditorHeaderTemplate").ShowQuickInfo(false).SelectedDate(new DateTime(DateTime.Today.Year, 2, 15)).Render()
        </div>
    </div>
    <style>
        .custom-event-editor .e-textlabel {
            padding-right: 15px;
            text-align: right;
        }

        .custom-event-editor td {
            padding: 7px;
            padding-right: 16px;
        }
    </style>
    <script id="EventEditorHeaderTemplate" type="text/x-template">
        ${if (!Subject)}<div>Create New Event</div>${else}<div>${Subject}</div>${/if}
    </script>
    <script id="EventEditorTemplate" type="text/template">
        <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr>
                    <td class="e-textlabel">Summary</td>
                    <td colspan="4">
                        <input id="Subject" class="e-field e-input" type="text" value="" name="Subject" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Status</td>
                    <td colspan="4">
                        <input type="text" id="EventType" name="EventType" class="e-field" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">From</td>
                    <td colspan="4">
                        <input id="StartTime" class="e-field" type="text" name="StartTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">To</td>
                    <td colspan="4">
                        <input id="EndTime" class="e-field" type="text" name="EndTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Reason</td>
                    <td colspan="4">
                        <textarea id="Description" class="e-field e-input" name="Description" rows="3" cols="50"
                                  style="width: 100%; height: 60px !important; resize: vertical"></textarea>
                    </td>
                </tr>
            </tbody>
        </table>
    </script>

    <script type="text/javascript">
        function onPopupOpen(args) {
            if (args.type === 'Editor') {
                var statusElement = args.element.querySelector('#EventType');
                if (!statusElement.classList.contains('e-dropdownlist')) {
                    var dropDownListObject = new ej.dropdowns.DropDownList({
                        placeholder: 'Choose status', value: statusElement.value,
                        dataSource: ['New', 'Requested', 'Confirmed']
                    });
                    dropDownListObject.appendTo(statusElement);
                    statusElement.setAttribute('name', 'EventType');
                }
                var startElement = args.element.querySelector('#StartTime');
                if (!startElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(startElement.value) || new Date() }, startElement);
                }
                var endElement = args.element.querySelector('#EndTime');
                if (!endElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(endElement.value) || new Date() }, endElement);
                }
            }
        }
        function onEventRendered(args) {
            var categoryColor;
            switch (args.data.EventType) {
                case 'Requested':
                    categoryColor = '#F57F17';
                    break;
                case 'Confirmed':
                    categoryColor = '#7fa900';
                    break;
                case 'New':
                    categoryColor = '#8e24aa';
                    break;
            }
            if (!args.element || !categoryColor) {
                return;
            }
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            if (scheduleObj.currentView === 'Agenda') {
                (args.element.firstChild).style.borderLeftColor = categoryColor;
            } else {
                args.element.style.backgroundColor = categoryColor;
            }
        }
        function onActionBegin(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            if (args.requestType === 'eventCreate' || args.requestType === 'eventChange') {
                var data;
                if (args.requestType === 'eventCreate') {
                    data = args.data[0];
                }
                else if (args.requestType === 'eventChange') {
                    data = args.data;
                }
                if (!scheduleObj.isSlotAvailable(data.StartTime, data.EndTime)) {
                    args.cancel = true;
                }
            }
        }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Editor Template in ASP.NET MVC Scheduler control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo illustrates the way of customizing the default editor window with custom template option and the customized
            design is automatically replaced onto the usual event editor. Here, a doctor's daily appointments with his patients
            are listed out and shaded with specific color based on its status.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this demo, the event window is customized based on the doctor's required appointment related fields which can be achieved
            by using the
            <code>EditorTemplate</code> API. Here, the custom design is built with the required fields through the script template and its type should be
            <code>text/x-template</code>.
        </p>
        <p>
            In this demo, the editor window header is customized based on the appointment subject field which can be
            achieved by the <code>editorHeaderTemplate</code>.
        </p>
        <p>
            Each field defined through it should contain the
            <code>e-field</code> class to allow processing of those fields in the default event object from an internal source. The ID of
            this customized script template section is assigned to the
            <code>EditorTemplate</code> option, so that this customized fields will be replaced on the default editor window.
        </p>
        <p>
            As we are using our Syncfusion sub-components within this editor in this demo, the custom defined form elements
            needs to be configured as required Syncfusion components such as DropDownList and DateTimePicker which needs to be
            done within the
            <code>PopupOpen</code> event. This particular step can be skipped, if the user needs to simply use the normal form design with applicable
            fields.
        </p>
        <p>
            Within the
            <code>EventRendered</code> event that triggers before every appointment getting rendered on the Scheduler user interface, the colors for the
            appointments are set based on its status which is retrieved from the appointment data.
        </p>
        <p>
            An additional restriction has been added to the Scheduler cells such that if a cell already contains an appointment,
            it should be prevented from booking with multiple appointments on the same time for which the
            <code>IsSlotAvailable</code> method is used. This method returns true, if the underlying cell is available for adding new events by checking
            whether it already has any events in it.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Scheduler Editor Template Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Editor Template in ASP.NET MVC Scheduler Control</h1>
                }

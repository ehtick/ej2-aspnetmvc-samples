@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2.DropDowns
<link href="~/Content/schedule/EmployeeShiftManagement.css" rel="stylesheet" />

@section ControlsSection{
    <div class='schedule-control-section shift-management-control-section'>
        <div class='col-lg-12 control-section'>
            <div class='control-wrapper shift-management-sample-wrapper'>
                @Html.EJS().Schedule("schedule").Width("100%").Height("550px").EventRendered("OnEventRendered").PopupClose("onPopupClose").AllowResizing(false).AllowDragAndDrop(false).Navigating("onNavigating").PopupOpen("onPopupOpen").CellClick("onCellClick").EventClick("onEventClick").ActionComplete("onActionComplete").EditorHeaderTemplate("#editorHeaderTemplate").CssClass("schedule-shift-management").Views(view =>
                {
                    view.Option(View.TimelineWeek).Add(); view.Option(View.Agenda)
                    .EventTemplate("#agenda-template")
                    .Add();
                    }).ToolbarItems(new List<ScheduleToolbarItem>
                {
                    new ScheduleToolbarItem { Name = ToolbarName.Previous },
                    new ScheduleToolbarItem { Name = ToolbarName.Next },
                    new ScheduleToolbarItem { Name = ToolbarName.DateRangeText },
                    new ScheduleToolbarItem { Name = ToolbarName.Views , Align = Syncfusion.EJ2.Navigations.ItemAlign.Right }
                }).CurrentView(View.TimelineWeek).SelectedDate(new DateTime(2025, 3, 5)).StartHour("07:00").EndHour("23:00").WorkHours(new ScheduleWorkHours { Highlight = true, Start = "00:00", End = "23:59" }).ShowTimeIndicator(true).TimeScale(ts =>
                {
                    ts.Interval(480)
                    .SlotCount(3)
                    .MajorSlotTemplate("#majorSlotTemplate");
                }).Group(group => group.Resources((string[])ViewData["Resources"])).Resources(res =>
                {
                    res.DataSource(ViewData["EmployeeRoles"]).Field("RoleId").Title("Roles").Name("EmployeeRoles").TextField("text").IdField("RoleId").AllowMultiple(false).Add();
                    res.DataSource(ViewData["Designations"]).Field("DesignationId").Title("Designations").Name("Designations").TextField("text").IdField("DesignationId").GroupIDField("groupId").AllowMultiple(false).Add();
                }).EventSettings(new ScheduleEventSettings { DataSource = ViewBag.datasource }).Render()

                <!-- TreeView -->
                <div class='treeview-container'>
                    <div class="title-text"><span>Available List</span></div>
                    <div class="role-tabs">
                        @Html.EJS().ChipList("chip-avatar").Selection(Syncfusion.EJ2.Buttons.Selection.Single).CssClass("e-outline").Chips(chips =>
                        {
                            chips.Text("All").Add();
                            chips.Text("Doctors").Add();
                            chips.Text("Nurses").Add();
                            chips.Text("Staffs").Add();
                        }).SelectedChips(new string[] { "0" }).BeforeClick("onBeforeClick").Click("chipClick").Render()
                    </div>
                    <!-- TreeView Component -->
                    <div id="allStaffsTreeview" style="display:block;">
                        @Html.EJS().TreeView("allStaffsTreeview").CssClass("shift-management-treeview").Fields(f => f.Id("Id").Text("Name").DataSource(ViewData["All"])).DragArea(".shift-management-sample-wrapper").AllowDragAndDrop(true).NodeDragStart("onTreeDragStart").NodeDragStop("onTreeDragStop").NodeTemplate("#treeTemplate").Render()
                    </div>
                    <div id="doctorsTreeview" style="display:none;">
                        @Html.EJS().TreeView("doctorsTreeview").CssClass("shift-management-treeview").Fields(f => f.Id("Id").Text("Name").DataSource(ViewData["Doctors"])).DragArea(".shift-management-sample-wrapper").AllowDragAndDrop(true).NodeDragStart("onTreeDragStart").NodeDragStop("onTreeDragStop").NodeTemplate("#treeTemplate").Render()
                    </div>
                    <div id="nursesTreeview" style="display:none;">
                        @Html.EJS().TreeView("nursesTreeview").CssClass("shift-management-treeview").Fields(f => f.Id("Id").Text("Name").DataSource(ViewData["Nurses"])).DragArea(".shift-management-sample-wrapper").AllowDragAndDrop(true).NodeDragStart("onTreeDragStart").NodeDragStop("onTreeDragStop").NodeTemplate("#treeTemplate").Render()
                    </div>
                    <div id="supportStaffsTreeview" style="display: none;">
                        @Html.EJS().TreeView("supportStaffsTreeview").CssClass("shift-management-treeview").Fields(f => f.Id("Id").Text("Name").DataSource(ViewData["SupportStaffs"])).DragArea(".shift-management-sample-wrapper").AllowDragAndDrop(true).NodeDragStart("onTreeDragStart").NodeDragStop("onTreeDragStop").NodeTemplate("#treeTemplate").Render()
                    </div>
                </div>
                <div id="target" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; display: none;">
                    @Html.EJS().Dialog("modalDialog").Header("Shift swap").CssClass("swap-dialog").IsModal(true).ShowCloseIcon(true).Visible(false).Width("378px").Buttons(new List<DialogDialogButton>
                    {
                    new DialogDialogButton
                    {
                    Click = "onCancelClick",
                    ButtonModel = new { content = "Cancel"}
                    },
                    new DialogDialogButton
                    {
                    Click = "onSwapClick",
                    ButtonModel = new { content = "Swap Shift",disabled = true }
                    }
                    }).ContentTemplate(@<text>
                            <div class="e-shift-swap">
                                <div>
                                    <label>Select an employee (Available for swapping)</label>
                                    @Html.EJS().DropDownList("EmployeeDropdown").Placeholder("Select an employee").Fields(new DropDownListFieldSettings { Text = "name", Value = "id" }).Change("employeeNameChange").Render()
                                </div>
                                <div style="margin-top: 10px;">
                                    <label>Select shift</label>
                                    @Html.EJS().DropDownList("ShiftDropdown").Placeholder("Select shift").Fields(new DropDownListFieldSettings { Text = "name", Value = "id" }).Change("shiftChange").Render()
                                </div>
                            </div>
                    </text>).Render()
                </div>
                <div id="agenda-toolbar-container" style="display: none;">
                    @Html.EJS().Toolbar("agendaToolbar").CssClass("agenda-toolbar").Width("100%").Items((List<Syncfusion.EJ2.Navigations.ToolbarItem>)ViewData["templateItems"]).OverflowMode(Syncfusion.EJ2.Navigations.OverflowMode.Scrollable).Render()
                    <div id="chip">
                        @Html.EJS().ChipList("chipAvatar").Selection(Syncfusion.EJ2.Buttons.Selection.Single).CssClass("e-outline").Chips(chips =>
                        {
                            chips.Text("All").Add();
                            chips.Text("Doctors").Add();
                            chips.Text("Nurses").Add();
                            chips.Text("Staffs").Add();
                        }).SelectedChips(new string[] { "0" }).BeforeClick("agendaBeforeClick").Click("agendaChipsClick").Render()
                    </div>
                    <div id="dropdownlist" style="width:230px">
                        @Html.EJS().DropDownList("shiftEmployeeDDL").DataSource(new string[] { }).Value("").Placeholder("Select an employee").PopupHeight("220px").ShowClearButton(true).Change("onDropDownListChange").BeforeOpen("onDropDownListBeforeOpen").Render()
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Shift Separation -->
    <script id="majorSlotTemplate" type="text/x-template">
        <div>
            ${getShiftText(data.date)}
        </div>
    </script>

    <!-- Template for the editor header -->
    <script id="editorHeaderTemplate" type="text/x-template">
        <div id="event-header">Leave Replacement</div>
    </script>

    <!-- Agenda Template -->
    <script id="agenda-template" type="text/x-template">
        <div class="agenda-event">
            <div class='e-staff'>
                <div class="staff-image">
                    ${getInitial(data.Subject)}
                </div>
                <div class='event-details'>
                    <div class="staff-info">
                        <span class='staff-name'>${getEmployeeName(data)}</span>
                        <span class='staff-role'> ${getRole(data.RoleId)} </span>
                        <span class="staff-designation">(${getDesignation(data.DesignationId)})</span> <span class="staff-availability"> ${getLeaveTag(data.Description)}</span>
                    </div>
                    <div class="event-time">Shift Time: ${getTimeString(data.StartTime)} - ${getTimeString(data.EndTime)}</div>
                </div>
            </div>
        </div>
    </script>

    <!-- Template to render tree node -->
    <script id="treeTemplate" type="text/x-template">
        <div id="waiting">
            <div id="waitdetails">
                <img class="employee-image" src="${getEmployeeImage(Name)}" alt="Employee" />
                <div class="text-container">
                    <div id="waitlist">${Name}</div>
                    <div id="waitcategory">${Description}</div>
                </div>
            </div>
        </div>
    </script>

    <script type="text/javascript">
        //< !--Agenda View-- >
        var roles = @Html.Raw(ViewBag.EmployeeRolesJson);
        var designations=@Html.Raw(ViewBag.DesignationsJson);
        var intl = new ej.base.Internationalization();

        function getEmployeeName(data) {
            return data.Subject || data.Name || "Unknown";
        }

        function getInitial(subject) {
            return subject ? subject.charAt(0).toUpperCase() : '?';
        }

        function getRole(roleId) {
            var role = roles.find(r => r.RoleId === roleId);
            return role ? role.text : "No Role";
        }

        function getDesignation(designationId) {
            var designation = designations.find(d => d.DesignationId === designationId);
            return designation ? designation.text : "No Designation";
        }
        function getLeaveTag(description) {
            return description && description.toLowerCase().includes('leave') ? ' - On Leave' : '';
        }

        function getTimeString(value) {
            return intl.formatDate(new Date(value), { skeleton: 'h' });
        }
        function getEmployeeImage(name) {
            const matchedEmployee = employeeImages.find(emp => emp.Name === name);
            const imageUrl = matchedEmployee ? matchedEmployee.Image : '/images/default.png';
            return imageUrl;
        }
        function getShiftText(date) {
            const hour = new Date(date).getHours();
            return hour === 7 ? 'Morning Shift' : 'Evening Shift';
        }
        //< !--TimelineWeek View-- >
        var employeeImages = @Html.Raw(ViewBag.EmployeeImagesJson);

        function getEventTemplate(props) {
            const { Subject = '', Description = '', StartTime, EndTime } = props;
            const isSwappedEvent = Subject.includes('swapped');
            const isLeaveReplacedEvent = Subject.includes('covers for');
            const isLeave = Description.toLowerCase().includes('leave') && !isLeaveReplacedEvent;

            let employeeName = Subject;
            if (isLeaveReplacedEvent) {
                employeeName = Subject.split('covers for')[0].trim();
            } else if (isSwappedEvent) {
                const match = Subject.match(/with ([^']+)'s shift/);
                employeeName = match ? match[1] : Subject;
            } else {
                employeeName = Subject;
            }

            const matchedEmployee = employeeImages.find(emp => emp.Name === employeeName);
            const imageUrl = matchedEmployee ? matchedEmployee.Image : '/images/default.png';

            const nameText = isLeave ? Description.split('(')[0].trim() : employeeName;

            const timeText = `${getTimeString(StartTime)} - ${getTimeString(EndTime)}`;

            return `
            <div class="template-wrap">
                <div class="e-staff">
                <img class="staff-image" src="${imageUrl}" />
                <div class="staff-info">
                    <div class="e-name">${nameText}</div>
                    <div class="e-designation">${timeText}</div>
                </div>
                </div>
            </div>`;
        }

        function OnEventRendered(args) {
            const data = args.data;
            const element = args.element;
            const startHour = new Date(data.StartTime).getHours();
            element.classList.add(startHour === 7 ? 'morning-shift' : 'evening-shift');

            const innerWrap = element.querySelector('.e-inner-wrap');
            if (innerWrap) {
                innerWrap.innerHTML = '';
                const newElement = document.createElement('div');
                newElement.innerHTML = getEventTemplate(data);
                const appointmentWidth = parseInt(element.style.width.split('px')[0], 10) - 5;
                element.style.width = `${appointmentWidth}px`;
                innerWrap.appendChild(newElement.firstElementChild);

                if (!element.classList.contains('e-read-only')) {
                    const groupIndex = parseInt(element.getAttribute('data-group-index') || '0', 10);
                    const classToAdd = groupIndex === 0 ? 'doctors-event' :
                        groupIndex === 1 ? 'nurses-event' :
                            'staffs-event';
                    element.classList.add(classToAdd);
                }
            }
            // Inject tooltip icon if needed
            const scheduleObj = document.getElementById('schedule').ej2_instances[0];

            // Helper function to append Syncfusion Tooltip icon
            function appendTooltipIcon(iconClass, tooltipText, onClick) {
                let iconContainer = element.querySelector('.e-icon-element');
                if (!iconContainer) {
                    iconContainer = document.createElement('span');
                    iconContainer.className = 'e-icon-element';
                    element.appendChild(iconContainer);
                }

                const iconSpan = document.createElement('span');
                iconSpan.className = `e-icons ${iconClass}`;
                iconSpan.style.cursor = 'pointer';

                // Bind click event if provided
                if (onClick) {
                    iconSpan.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        onClick(e);
                    });
                }

                // Create and append Tooltip
                const tooltip = new ej.popups.Tooltip({
                    content: tooltipText,
                    cssClass: 'shift-management-tooltip',
                    position: 'RightCenter'
                });
                tooltip.appendTo(iconSpan);

                iconContainer.appendChild(iconSpan);
            }

            // --- Tooltip logic for special events ---
            const description = (data.Description || '').toLowerCase();
            const subject = (data.Subject || '').toLowerCase();

            if (description.includes('leave')) {
                element.classList.add('event-leave');
                if (scheduleObj.currentView !== 'Agenda') {
                    appendTooltipIcon(
                        'e-leave',
                        `${data.Subject} is on leave. To cover this shift, drag a staff member with the same designation from the available list and drop them here.`
                    );
                }
            }

            if (data.Subject?.includes('covers for')) {
                element.classList.add('e-covers');
                element.classList.remove('event-leave');
                if (scheduleObj.currentView !== 'Agenda') {
                    appendTooltipIcon(
                        'e-replaced sf-icon-user-replace',
                        'Leave covered by replacement'
                    );
                }
            }

            if (description.includes('swap-request') && !subject.includes('swapped') &&
                scheduleObj.currentView !== 'Agenda') {
                element.classList.add('event-swap');
                appendTooltipIcon('e-swap sf-icon-replace-request', 'Click here to swap shift',
                    function (event) {
                        const target = event.target;
                        if (
                            target.classList.contains('sf-icon-replace-request') ||
                            target.classList.contains('e-swap') ||
                            target.closest('.e-icons')
                        ) {
                            requestShiftSwap(args);
                        }
                    }
                );
            }

            if (subject.includes('swapped')) {
                element.classList.remove('event-swap');
                element.classList.add('event-swapped');
                if (scheduleObj.currentView !== 'Agenda') {
                    appendTooltipIcon(
                        'e-swapped sf-icon-replace-accepted',
                        'This shift has been swapped'
                    );
                }
            }
        }
        function onCellClick(args) {
            args.cancel = true;
        }
        /* <!-- Shift Swap Dialog -->*/
        var shiftsData = [], employeeNamesList = [], shiftList = [];
        var requestedShift = null, selectedEmployee = null, selectedShift = null;

        function requestShiftSwap(args) {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var eventsData = scheduleObj.eventSettings.dataSource;

            var appointment = args.element.classList.contains('e-appointment')
                ? args.element
                : ej.base.closest(args.element, '.e-appointment');

            if (!eventsData || !appointment) return;

            var eventDetails = scheduleObj.getEventDetails(appointment);
            if (!eventDetails) return;

            const roleId = eventDetails.RoleId;
            const designationId = eventDetails.DesignationId;
            const employeeName = eventDetails.Subject;

            const filtered = eventsData.filter(e =>
                e.Description?.toLowerCase().includes("swap-request") &&
                e.RoleId === roleId &&
                e.DesignationId === designationId &&
                e.Subject !== employeeName
            );

            employeeNamesList = [];
            shiftsData = [];

            filtered.forEach((item, index) => {
                if (!employeeNamesList.some(emp => emp.name === item.Subject)) {
                    employeeNamesList.push({ id: item.DesignationId, name: item.Subject, employeeId: item.EmployeeId });
                }

                shiftsData.push({
                    id: index + 1,
                    name: formatShiftName(item),
                    designationId: item.DesignationId,
                    employeeId: item.EmployeeId,
                    eventId: item.Id
                });
            });

            requestedShift = { id: eventDetails.Id, name: employeeName };

            const empDropdown = document.getElementById("EmployeeDropdown").ej2_instances[0];
            empDropdown.dataSource = employeeNamesList;
            empDropdown.value = null;

            const shiftDropdown = document.getElementById("ShiftDropdown").ej2_instances[0];
            shiftDropdown.dataSource = [];
            shiftDropdown.value = null;

            document.getElementById("modalDialog").ej2_instances[0].show();
            updateSwapButtonState(false);
        }

        // Format function helpers
        function formatDate(date) {
            return new Intl.DateTimeFormat('en-US', { month: 'short', day: 'numeric' }).format(new Date(date));
        }

        function formatTime(date) {
            return new Intl.DateTimeFormat('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }).format(new Date(date));
        }
        function formatTimeRange(date) {
            return new Intl.DateTimeFormat('en-US', { hour: 'numeric', hour12: true }).format(new Date(date));
        }

        function formatShiftName(item) {
            const start = new Date(item.StartTime)
            const weekday = start.toLocaleDateString('en-US', { weekday: 'short' });
            return `${formatDate(item.StartTime)} ${weekday} ${formatTime(item.StartTime)} - ${formatTime(item.EndTime)}`;
        }

        function employeeNameChange(args) {
            if (!args.itemData) return;
            window.selectedEmployee = (window.employeeNamesList || []).find(e => e.id === args.value);
            shiftList = shiftsData.filter(item =>
                item.designationId === selectedEmployee.id &&
                item.employeeId === selectedEmployee.employeeId
            );
            if (!selectedEmployee) return;
            var shiftDropdown = document.getElementById("ShiftDropdown").ej2_instances[0];
            shiftDropdown.dataSource = shiftList;
            shiftDropdown.value = null;
            updateSwapButtonState(false);
        }

        function shiftChange(args) {
            if (!args.itemData) return;
            const value = args.value;
            window.selectedShift = (window.shiftsData || []).find(s => s.id === value || s.id === parseInt(value));
            updateSwapButtonState(true);
        }
        function updateSwapButtonState(enable) {
            var dialogObj = document.getElementById('modalDialog').ej2_instances[0];
            var buttonElements = dialogObj.element.querySelectorAll('.e-footer-content .e-btn');

            buttonElements.forEach(function (btnEl) {
                if (btnEl.innerText.trim().toUpperCase() === 'SWAP SHIFT') {
                    var buttonInstance = btnEl.ej2_instances?.[0];
                    if (buttonInstance) {
                        buttonInstance.disabled = !enable;
                        buttonInstance.dataBind();
                    }
                }
            });
        }
        function onCancelClick() {
            requestedShift = selectedEmployee = selectedShift = null;
            shiftsData = [];
            employeeNamesList = [];

            document.getElementById("modalDialog").ej2_instances[0].hide();
        }

        function onSwapClick() {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var dataSource = scheduleObj.eventSettings.dataSource;

            if (!window.selectedShift || !window.requestedShift || !window.selectedEmployee) {
                return;
            }

            var reqIndex = dataSource.findIndex(evt => evt.Id === window.requestedShift.id);
            var appIndex = dataSource.findIndex(evt => evt.Id === window.selectedShift.eventId);

            var requestingEvent = Object.assign({}, dataSource[reqIndex]);
            var approvedEvent = Object.assign({}, dataSource[appIndex]);

            // Update requesting event
            requestingEvent.Description = requestingEvent.Description.replace(' - Swap-Request', '');
            requestingEvent.Subject =
                window.requestedShift.name + " swapped the shift with " + window.selectedEmployee.name + "'s shift scheduled from " +
                formatDate(approvedEvent.StartTime) + ", " + formatTimeRange(approvedEvent.StartTime) +
                " to " + formatTimeRange(approvedEvent.EndTime);

            dataSource[reqIndex] = requestingEvent;

            // Update approved event
            approvedEvent.Description = approvedEvent.Description.replace(' - Swap-Request', '');
            approvedEvent.Subject =
                window.selectedEmployee.name + " swapped the shift with " + window.requestedShift.name + "'s shift scheduled from " +
                formatDate(requestingEvent.StartTime) + ", " + formatTimeRange(requestingEvent.StartTime) +
                " to " + formatTimeRange(requestingEvent.EndTime);

            dataSource[appIndex] = approvedEvent;

            // Set new data and refresh
            scheduleObj.eventSettings.dataSource = dataSource;
            scheduleObj.refreshEvents();

            // Reset UI state
            window.employeeNamesList = [];
            window.shiftsData = [];

            var dialogObj = document.getElementById("modalDialog").ej2_instances[0].hide();
        }
        //<!-- Treeview functions -->
        var previousChipIndex = 0;
        var currentChipIndex = 0;
        let draggedItemId = null;
        var isDraggedItemDropped = false;

        var rolesData = ['All', 'Doctors', 'Nurses', 'Support Staffs'];
        var treeViewRefs = ['#allStaffsTreeview','#doctorsTreeview','#nursesTreeview', '#supportStaffsTreeview'];

        window.allData = @Html.Raw(ViewBag.AllStaffsJson);

        function onBeforeClick(args) {
            const currentChipIndex = args.index;
            if (currentChipIndex === previousChipIndex) {
                args.cancel = true;
            }
        }

        function filterData(dataSource, role) {
            return dataSource.filter(function (data) {
                return data.Role === role;
            });
        }

        function chipClick(args) {
            currentChipIndex = args.index;

            var previousTree = document.querySelector(treeViewRefs[previousChipIndex]);
            var activeTree = document.querySelector(treeViewRefs[currentChipIndex]);

            if (previousTree) previousTree.style.display = 'none';
            if (activeTree) {
                activeTree.style.display = 'block';

                var treeObj = activeTree.ej2_instances[0];
                treeObj.fields.dataSource = currentChipIndex === 0
                    ? allData
                    : filterData(allData, rolesData[currentChipIndex]);
                treeObj.dataBind();
            }
            previousChipIndex = currentChipIndex;
        }

        function onPopupClose(args) {
            if (args.type === "Editor") {
                if (args.event && args.event.target && args.event.target.textContent &&
                    args.event.target.classList.contains('e-event-save')){
                    let treeIds = ['allStaffsTreeview', 'doctorsTreeview', 'nursesTreeview', 'supportStaffsTreeview'];
                    let activeTreeId = treeIds[currentChipIndex];
                    let treeObj = ej.base.getComponent(document.getElementById(activeTreeId), 'treeview');

                    if (treeObj && draggedItemId) {
                        let draggedId = parseInt(draggedItemId, 10);

                        let updatedTreeData = treeObj.fields.dataSource.filter(item => item.Id !== draggedId);
                        treeObj.fields.dataSource = updatedTreeData;
                        treeObj.dataBind();

                        document.querySelectorAll('.e-drag-item.treeview-external-drag').forEach(el => el.remove());

                        if (Array.isArray(window.allData)) {
                            window.allData = window.allData.filter(item => item.Id !== draggedId);
                        }

                        if (args.data && args.data.Description && args.data.Description.includes('Leave')) {
                            args.data.Description = args.data.Description.replace('Leave ', 'Available ');
                        }
                    }
                }
                isDraggedItemDropped = false;
            }
        }

        function onTreeDragStart(args) {
            draggedItemId = args.draggedNodeData.id;
            document.body.classList.add('e-disble-not-allowed');
        }

        function onTreeDragStop(args) {
            var classElement = document.querySelector('.e-schedule .e-device-hover');
            if (classElement) {
                classElement.classList.remove('e-device-hover');
            }

                args.cancel = true;
                var scheduleElement = ej.base.closest(args.target, '.e-content-wrap');

                if (scheduleElement) {
                    var scheduleObj = document.getElementById('schedule').ej2_instances[0];
                    var treeObj = document.getElementById('allStaffsTreeview').ej2_instances[0];

                    var draggedId = parseInt(args.draggedNodeData.id, 10);
                    var draggedData = treeObj.fields.dataSource.find(item => item.Id === draggedId);

                    var target = ej.base.closest(args.target, '.e-appointment.event-leave');

                    if (target) {
                        var eventDetails = scheduleObj.getEventDetails(target);

                        var role = roles.find(r => r.RoleId === eventDetails.RoleId)?.text;
                        var designation = designations.find(d => d.DesignationId === eventDetails.DesignationId)?.text;

                        if (draggedData && role === draggedData.Role && designation === draggedData.Description) {
                            var copiedEventDetails = { ...eventDetails };
                            copiedEventDetails.Subject = draggedData.Name + ' covers for ' + eventDetails.Subject;
                            copiedEventDetails.Designation = draggedData.Description;
                            isDraggedItemDropped = true;
                            scheduleObj.openEditor(copiedEventDetails, 'EditOccurrence');
                        }
                    }
                }
            document.body.classList.remove('e-disble-not-allowed');
        }

        function onPopupOpen(args) {
            const isEditorPopup = args.type === 'Editor';
            if (isEditorPopup) {
                if (!isDraggedItemDropped) {
                    args.cancel = true;
                    return;
                }
                args.element.classList.add('shift-management-editor-popup');
            }
        }

        function onNavigating(args) {
        var scheduleToolbar = document.querySelector('.e-schedule-toolbar-container');
            var agendaToolbar = document.getElementById('agendaToolbar');
            var agendaToolbarInstance = document.querySelector("#agendaToolbar")?.ej2_instances[0];
            var scheduleObj = document.querySelector("#schedule").ej2_instances[0];
            if (args.currentView) {
                scheduleObj.setProperties({ currentView: args.currentView }, true);
            }
            if (!scheduleToolbar || args.action !== 'view') return;
            if (args.currentView === 'Agenda') {
                if (scheduleToolbar && agendaToolbar) {
                const wrapper = document.getElementById('agenda-toolbar-container');
                wrapper.style.display = 'block';
                scheduleToolbar.appendChild(agendaToolbar);
                agendaToolbarInstance.refresh();
            }
            if (chipListObj && chipListObj.selectedChips !== 0) {
                chipListObj.select(0);
            }
            if (dropdownObj) {
                dropdownObj.value = null;
                dropdownObj.dataBind();
            }
            agendaChipsClick({ index: 0 });

            } else {
                if (agendaToolbar?.parentElement === scheduleToolbar) {
                    agendaToolbar.style.display = 'none';
                    document.body.appendChild(agendaToolbar);
            }
                if (scheduleObj) {
                    scheduleObj.eventSettings.query = new ej.data.Query();
                    scheduleObj.refreshEvents();
                }
                if (chipListObj && chipListObj.selectedChips !== 0) {
                    chipListObj.select(0);
                }
                if (dropdownObj) {
                    dropdownObj.value = null;
                    dropdownObj.dataBind();
                }
            }
        }
        var scheduleObj;
        var dropdownObj;
        var chipListObj;

        window.onload = function () {
            scheduleObj = document.querySelector("#schedule")?.ej2_instances?.[0];
            dropdownObj = document.querySelector("#shiftEmployeeDDL")?.ej2_instances?.[0];
            chipListObj = document.querySelector("#chipAvatar")?.ej2_instances?.[0];
        };
        let agendaPrevoiusChip = 0;

        function agendaBeforeClick(args) {
            const chipIndex = args.index;
            if (chipIndex === agendaPrevoiusChip) {
                args.cancel = true;
            }
        }

        function agendaChipsClick(args) {
            if (!scheduleObj || !dropdownObj || !chipListObj) return;

            const chipIndex = args.index;

            dropdownObj.value = null;
            dropdownObj.dataSource = [];
            dropdownObj.dataBind();
            dropdownObj.focusOut();

            let query;
            if (chipIndex === 0) {
                query = new ej.data.Query();
            } else {
                query = new ej.data.Query().where('RoleId', 'equal', chipIndex);
            }

            scheduleObj.eventSettings.query = query;

            const allEvents = scheduleObj.eventSettings.dataSource || [];

            const filtered = (chipIndex === 0)
                ? allEvents
                : allEvents.filter(e => e.RoleId === chipIndex);

            var subjects = [...new Set(filtered
                .map(e => e.Subject)
                .filter(subject => subject && !subject.toLowerCase().includes('covers') && !subject.toLowerCase().includes('swapped'))
            )];
            const dropData = subjects.map(name => ({ value: name, text: name }));

            dropdownObj.dataSource = dropData;
            dropdownObj.fields = { text: 'text', value: 'value' };
            dropdownObj.dataBind();

            agendaPrevoiusChip = chipIndex;
        }

        function onDropDownListBeforeOpen() {
            if (!scheduleObj || !dropdownObj || !chipListObj) return;

            const chipIndex = chipListObj.selectedChips;
            const allEvents = scheduleObj.eventSettings.dataSource || [];

            const filteredEvents = (chipIndex === 0)
                ? allEvents
                : allEvents.filter(e => e.RoleId === chipIndex);

            const employeeNames = Array.from(new Set(filteredEvents
                .map((obj) => obj.Subject)
                .filter(Subject =>
                    !Subject.toLowerCase().includes('covers') &&
                    !Subject.toLowerCase().includes('swapped')
                )
            )
            );

            const newData = employeeNames.map(name => ({ value: name, text: name }));
            const currentData = dropdownObj.dataSource || [];

            const isSame = JSON.stringify(currentData) === JSON.stringify(newData);
            if (!isSame) {
                dropdownObj.dataSource = newData;
                dropdownObj.dataBind();
            }
        }

        function onDropDownListChange(args) {
            if (!scheduleObj || !dropdownObj || !chipListObj) return;

            const name = args.itemData?.value;
            const chipIndex = chipListObj.selectedChips;

            let query;
            if (name) {
                query = new ej.data.Query().where('Subject', 'contains', name, true);
            } else if (chipIndex === 0) {
                query = new ej.data.Query();
            } else {
                query = new ej.data.Query().where('RoleId', 'equal', chipIndex);
            }

            scheduleObj.eventSettings.query = query;
            dropdownObj.focusIn();
        }
        function onEventClick(args) {
            if (args.event && args.event.IsReadonly) {
                args.cancel = true;
            }
        }
        function onActionComplete(args) {
            if (args.requestType === 'viewNavigate' || args.requestType === 'dateNavigate') {
                const agendaContentElement = document.querySelector('.e-table-wrap.e-agenda-view .e-schedule-table .e-content-wrap');
                if (agendaContentElement) {
                    const agendaToolbarHeight = 60;
                    const currentHeight = parseFloat(getComputedStyle(agendaContentElement).height);
                    agendaContentElement.style.height = (currentHeight - agendaToolbarHeight) + 'px';
                }
            }
        }

    </script>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Employee Shift Management in ASP.NET MVC Scheduler control. Explore here for more details." />
}

@section ActionDescription{
    <div id="action-description">
        <p>This demo shows efficient employee shift management using the Scheduler, including shift scheduling, swapping, highlighting staff unavailability, and seamlessly assigning leave replacements using drag-and-drop.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>In this demo, employees are categorized by roles (Doctors, nurses, and support staff) and designations, with two daily shifts: Morning (7 AM – 3 PM) and Evening (3 PM – 11 PM). Past shifts are disabled for clarity.</p>
        <p>
            <strong>Shift Swapping</strong>
        </p>
        <p>Shifts can be swapped between employees with the same designation using the swap request icon. The updated shift is highlighted with a swap icon, and details are available in the quick info popup.</p>
        <p>
            <strong>Leave Replacement</strong>
        </p>
        <p>To cover leave, drag and drop available staff from the same designation. The appointment updates with a replacement icon, and details appear in the quick info popup.</p>
        <p>
            <strong>Filtering</strong>
        </p>
        <p>Filter shifts by role or employee name in the agenda view to check staff availability and for shift management.</p>
    </div>
}
@section Title{
    <title>ASP.NET MVC Scheduler Employee Shift Management Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Employee Shift Management in ASP.NET MVC Scheduler Control</h1>
}


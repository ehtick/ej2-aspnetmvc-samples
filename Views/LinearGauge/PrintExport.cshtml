@using Syncfusion.EJ2
@section ControlsSection{
    <div class="col-lg-8 control-section">
        @Html.EJS().LinearGauge("container").Load("onGaugeLoad").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Horizontal).Title("Speedometer").TitleStyle(textStyle =>
        textStyle.FontFamily("inherit")).AllowPrint(true).AllowPdfExport(true).AllowImageExport(true).Axes(axes => axes.Minimum(0).Maximum(120)
        .Line(line => line.Width(0)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")).Position(Syncfusion.EJ2.LinearGauge.Position.Outside).Offset(4))
        .Ranges(range =>
        {
            range.Start(0).End(20).StartWidth(15).EndWidth(25).Color("#82b944").Add();
            range.Start(20).End(40).StartWidth(25).EndWidth(35).Color("#a1cb43").Add();
            range.Start(40).End(60).StartWidth(35).EndWidth(45).Color("#ddec12").Add();
            range.Start(60).End(80).StartWidth(45).EndWidth(55).Color("#ffbc00").Add();
            range.Start(80).End(100).StartWidth(55).EndWidth(65).Color("#ff6000").Add();
            range.Start(100).End(120).StartWidth(65).EndWidth(75).Color("red").Add();
        })
        .Pointers(pointer => pointer.Width(35).Height(23).Value(80).Offset(-55).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Triangle).Border(border => border.Color("white").Width(2)).Add())
        .MajorTicks(majorTick => majorTick.Interval(20).Height(0).Width(0)).MinorTicks(minorTick => minorTick.Height(7).Interval(4).Width(0)).Add()).Render()
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
            <tr style="height: 50px">
                <td>
                    <div style="width: 60%; font-size: 14px; margin-top: -8px">
                        Export Type
                    </div>
                </td>
                <td>
                    <div style='margin-top: -5px;height : 45px'>
                        @Html.EJS().DropDownList("Export").Index(0).Width("100%").DataSource(ViewData["format"]).Value("JPEG").Change("valueChange").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div style="width: 60%; font-size: 14px;">File Name</div>
                </td>
                <td>
                    <div style='margin-top: 0px;height : 45px'>
                        @Html.EJS().TextBox("fileName").Value("Linear Gauge").Width("100%").Render()
                    </div>
                </td>
            </tr>
            <tr id="button-control" style="height: 50px">
                <td align="center">
                    <div style="width: 100px">
                        @Html.EJS().Button("export").Content("Export").CssClass("e-small").IsPrimary(true).Render()
                    </div>
                </td>
                <td align="center">
                    <div style="width: 100px">
                        @Html.EJS().Button("print").Content("Print").CssClass("e-small").IsPrimary(true).Render()
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }

        input.e-input.e-bigger, textarea.e-input.e-bigger, .e-bigger input.e-input, .e-bigger textarea.e-input, .e-input-group.e-bigger, .e-bigger .e-input-group, .e-input-group.e-control-wrapper.e-bigger, .e-bigger .e-input-group.e-control-wrapper {
            height: 100%;
            font-size: 14px;
            align-items: center;
        }
    </style>
    <!-- custom code end -->

    <script type="text/javascript">
		var gauge;
		function onGaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            gauge = sender.gauge;
		}
		var mode = "JPEG";
		function valueChange() {
			var exportType = document.getElementById('Export').ej2_instances[0];
			mode = exportType.value;
		}
		document.getElementById('export').onclick = function () {
			var gauge = document.getElementById('container').ej2_instances[0];
			var fileName = (document.getElementById('fileName')).value;
			gauge.export(mode, fileName);
		};
		document.getElementById('print').onclick = function () {
			var gauge = document.getElementById('container').ej2_instances[0];
			gauge.print();
		};
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the print and export functionalities of the linear gauge.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Print & Export in ASP.NET MVC Linear Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to print and export the rendered linear gauge. You can add print functionality by using the <b>print</b> method when
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.LinearGauge.LinearGauge.html#Syncfusion_EJ2_LinearGauge_LinearGauge_AllowPrint" aria-label="allowprint">
                allowPrint
            <span class="sr-only">opens in a new tab</span></a> is set as true. Also, you can add export functionality by using the <b>export</b> method when
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.LinearGauge.LinearGauge.html#Syncfusion_EJ2_LinearGauge_LinearGauge_AllowImageExport" aria-label="allowImageExport">
                allowImageExport
            <span class="sr-only">opens in a new tab</span></a> and
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.LinearGauge.LinearGauge.html#Syncfusion_EJ2_LinearGauge_LinearGauge_AllowPdfExport" aria-label="allowPdfExport">allowPdfExport<span class="sr-only">opens in a new tab</span></a> are set as true. The linear gauge can be exported to JPEG, PNG, SVG, and PDF formats.
        </p>
        <p>
            More information about print and export can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/linear-gauge/print-and-export" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>

}

@section Title{
    <title>ASP.NET MVC Linear Gauge Print & Export Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Print & Export in ASP.NET MVC Linear Gauge Control</h1>
}
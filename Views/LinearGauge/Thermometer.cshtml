@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        @Html.EJS().LinearGauge("defaultContainer").Load("defaultContainerGaugeLoad").Background("Transparent").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Vertical).Container(container => container.Width(13).RoundedCornerRadius(5)
        .Type(Syncfusion.EJ2.LinearGauge.ContainerType.Thermometer).Border(border => border.Width(1))).Annotations(annotation =>
        {
            annotation.AxisIndex(0).AxisValue(50).X(0).Y(0).ZIndex("1").Content("<div style='font-size:13px;margin-left: -20px;margin-top: -30px;'> \\u00b0C </div>").Add();
            annotation.AxisIndex(1).AxisValue(120).X(12).Y(0).ZIndex("1").Content("<div style='font-size:13px;margin-left: 18px;margin-top: -30px;'> \\u00b0F </div>").Add();
        }).Axes(axes => {
            axes.Minimum(-20).Maximum(50).Line(line => line.Width(0)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer => pointer.Width(12).Height(12).Value(35).Color("#0074E3").Placement(Syncfusion.EJ2.LinearGauge.Placement.Center).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Triangle).Offset(3).Add())
            .MajorTicks(majorTick => majorTick.Interval(10).Height(7)).MinorTicks(minorTick => minorTick.Height(0).Interval(5)).Add();
            axes.Minimum(0).Maximum(120).OpposedPosition(true).Line(line => line.Width(0)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer => pointer.Width(13).Height(13).Value(94).Color("#0074E3").Type(Syncfusion.EJ2.LinearGauge.Point.Bar).Add())
            .MajorTicks(majorTick => majorTick.Interval(20).Height(7)).MinorTicks(minorTick => minorTick.Height(0).Interval(5)).Add();
        }).Render()
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        function defaultContainerGaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows a thermometer that displays temperature in both degrees and fahrenheit.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Thermometer in ASP.NET MVC Linear Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure a linear gauge to look like a thermometer.
            More information about containers can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/linear-gauge/linear-gauge-appearance#customizing-the-linear-gauge-container" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>

}

@section Title{
    <title>ASP.NET MVC Linear Gauge Thermometer Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Thermometer in ASP.NET MVC Linear Gauge Control</h1>
}
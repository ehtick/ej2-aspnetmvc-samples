@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12" style="display: flex;justify-content: center; align-items: center;">
                <div style="margin: auto;padding: 10px;">
                    <table>
                        <tbody>
                            <tr>
                                <td>
                                    <div id='horizontal' style="padding:6px;cursor:pointer;width:86px;color:black;font-size:15px;border:1px solid #0074E3;background-color:white;text-align:center">Horizontal</div>
                                </td>
                                <td>
                                    <div id='vertical' style="padding:6px;cursor:pointer;width:86px;color:white;font-size:15px;border:1px solid #0074E3;background-color: #0074E3;text-align:center">Vertical</div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <pre style="background-color: inherit; border:hidden"></pre>
        <div id="containerBox" style="float: left;padding: 4%;"></div>
        <div id='containerTriangle' class="col-xs-4 col-sm-4 col-lg-2 col-md-2" style="display: flex;justify-content: center; align-items: center;">
            @Html.EJS().LinearGauge("linearTriangle").Load("gaugeLoad").AnimationDuration(3500).DragEnd("dragEndTriangle").DragStart("dragStartTriangle").DragMove("dragMoveTriangle").Background("Transparent").Width("150px").Height("350px").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Vertical).Title("Inverted triangle").TitleStyle(textStyle =>
            textStyle.FontFamily("inherit").FontWeight("499")).Axes(axes => axes.Minimum(0).Maximum(100).OpposedPosition(true)
            .Line(line => line.Width(5)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer =>
            {
                pointer.Width(5).Height(5).Value(40).Color("#0074E3").Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).Type(Syncfusion.EJ2.LinearGauge.Point.Bar).Offset("12").EnableDrag(false).AnimationDuration(1500).Add();
                pointer.Width(15).Height(15).Value(40).Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Triangle).EnableDrag(true).AnimationDuration(1500).Add();
            }).MajorTicks(majorTick => majorTick.Interval(20).Height(7).Width(1)).MinorTicks(minorTick => minorTick.Height(3).Interval(10)).Add()).Render()
        </div>
        <div id='containerCircle' class="col-xs-4 col-sm-4 col-lg-2 col-md-2" style="display: flex;justify-content: center; align-items: center;">
            @Html.EJS().LinearGauge("linearCircle").Load("gaugeLoad").AnimationDuration(3500).DragEnd("dragEndCircle").DragStart("dragStartCircle").DragMove("dragMoveCircle").Background("Transparent").Width("150px").Height("350px").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Vertical).Title("Circle").TitleStyle(textStyle =>
            textStyle.FontFamily("inherit").FontWeight("499")).Axes(axes => axes.Minimum(0).Maximum(100).OpposedPosition(true)
            .Line(line => line.Width(5)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer =>
            {
                pointer.Width(5).Height(5).Value(20).Color("#0074E3").Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).Type(Syncfusion.EJ2.LinearGauge.Point.Bar).Offset("12").EnableDrag(false).AnimationDuration(1500).Add();
                pointer.Width(15).Height(15).Value(20).Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Circle).EnableDrag(true).AnimationDuration(1500).Add();
            }).MajorTicks(majorTick => majorTick.Interval(20).Height(7).Width(1)).MinorTicks(minorTick => minorTick.Height(3).Interval(10)).Add()).Render()
        </div>
        <div id='containerRectangle' class="col-xs-4 col-sm-4 col-lg-2 col-md-2" style="display: flex;justify-content: center; align-items: center;">
            @Html.EJS().LinearGauge("linearRectangle").Load("gaugeLoad").AnimationDuration(3500).DragEnd("dragEndRectangle").DragStart("dragStartRectangle").DragMove("dragMoveRectangle").Background("Transparent").Width("150px").Height("350px").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Vertical).Title("Rectangle").TitleStyle(textStyle =>
            textStyle.FontFamily("inherit").FontWeight("499")).Axes(axes => axes.Minimum(0).Maximum(100).OpposedPosition(true)
            .Line(line => line.Width(5)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer =>
            {
                pointer.Width(5).Height(5).Value(30).Color("#0074E3").Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).Type(Syncfusion.EJ2.LinearGauge.Point.Bar).Offset("12").EnableDrag(false).AnimationDuration(1500).Add();
                pointer.Width(15).Height(5).Value(30).Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Rectangle).EnableDrag(true).AnimationDuration(1500).Add();
            }).MajorTicks(majorTick => majorTick.Interval(20).Height(7).Width(1)).MinorTicks(minorTick => minorTick.Height(3).Interval(10)).Add()).Render()
        </div>
        <div id='containerText' class="col-xs-4 col-sm-4 col-lg-2 col-md-2" style="display: flex;justify-content: center; align-items: center;">
            @Html.EJS().LinearGauge("linearText").Load("gaugeLoad").AnimationDuration(3500).DragEnd("dragEndText").DragStart("dragStartText").DragMove("dragMoveText").Background("Transparent").Width("168px").Height("350px").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Vertical).Title("Text").TitleStyle(textStyle =>
            textStyle.FontFamily("inherit").FontWeight("499")).Axes(axes => axes.Minimum(0).Maximum(100).OpposedPosition(true)
            .Line(line => line.Width(5)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer =>
            {
                pointer.Width(5).Height(5).Value(50).Color("#0074E3").Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).Type(Syncfusion.EJ2.LinearGauge.Point.Bar).Offset("12").EnableDrag(false).AnimationDuration(1500).Add();
                pointer.Width(15).Height(15).Value(50).Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).Offset("-10").EnableDrag(true).AnimationDuration(1500).Add();
            }).MajorTicks(majorTick => majorTick.Interval(20).Height(7).Width(1)).MinorTicks(minorTick => minorTick.Height(3).Interval(10)).Add()).Render()
        </div>
        <div id='containerMultiple' class="col-xs-4 col-sm-4 col-lg-2 col-md-2" style="display: flex;justify-content: center; align-items: center;">
            @Html.EJS().LinearGauge("linearMultiple").Load("gaugeLoad").AnimationDuration(3500).DragEnd("dragEndMultiple").DragStart("dragStartMultiple").DragMove("dragMoveMultiple").Background("Transparent").Width("150px").Height("350px").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Vertical).Title("Multiple pointers").TitleStyle(textStyle =>
            textStyle.FontFamily("inherit").FontWeight("499")).Axes(axes => axes.Minimum(0).Maximum(100).OpposedPosition(true)
            .Line(line => line.Width(5)).LabelStyle(labelStyle => labelStyle.Font(font => font.FontFamily("inherit")))
            .Pointers(pointer =>
            {
                pointer.Width(5).Height(5).Value(10).Color("#0074E3").Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).Type(Syncfusion.EJ2.LinearGauge.Point.Bar).Offset("12").EnableDrag(false).AnimationDuration(1500).Add();
                pointer.Width(15).Height(15).Value(10).Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Triangle).EnableDrag(true).AnimationDuration(1500).Add();
                pointer.Width(15).Height(15).Value(100).Placement(Syncfusion.EJ2.LinearGauge.Placement.Near).MarkerType(Syncfusion.EJ2.LinearGauge.MarkerType.Diamond).EnableDrag(true).AnimationDuration(1500).Add();
            }).MajorTicks(majorTick => majorTick.Interval(20).Height(7).Width(1)).MinorTicks(minorTick => minorTick.Height(3).Interval(10)).Add()).Render()
        </div>
    </div>
    <!-- custom code start -->
    <style>
        .control-section {
            min-height: 450px;
        }
    </style>
    <!-- custom code end -->
    <script type="text/javascript">
        var linearTriangle, linearCircle, linearText, linearRectangle, linearMultiple;
        function gaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            if (sender.gauge.element.id === 'linearTriangle') {
                linearTriangle = sender.gauge;
            }
            if (sender.gauge.element.id === 'linearCircle') {
                linearCircle = sender.gauge;
            }
            if (sender.gauge.element.id === 'linearText') {
                linearText = sender.gauge;
                linearText.axes[0].pointers[1].markerType = "Text";
                linearText.axes[0].pointers[1].text = "50 Points";
            }
            if (sender.gauge.element.id === 'linearRectangle') {
                linearRectangle = sender.gauge;
            }
            if (sender.gauge.element.id === 'linearMultiple') {
                linearMultiple = sender.gauge;
            }
        }

        function dragEndTriangle(sender) {
            linearTriangle.axes[0].pointers[0].animationDuration = 1500;
            linearTriangle.axes[0].pointers[1].animationDuration = 1500;
        }

        function dragStartTriangle(sender) {
            linearTriangle.axes[0].pointers[0].animationDuration = 0;
            linearTriangle.axes[0].pointers[1].animationDuration = 0;
        }

        function dragMoveTriangle(sender) {
            if (sender.pointerIndex == 1) {
                linearTriangle.setPointerValue(0, 0, sender.currentValue);
            }
        }

        function dragEndCircle(sender) {
            linearCircle.axes[0].pointers[0].animationDuration = 1500;
            linearCircle.axes[0].pointers[1].animationDuration = 1500;
        }

        function dragStartCircle(sender) {
            linearCircle.axes[0].pointers[0].animationDuration = 0;
            linearCircle.axes[0].pointers[1].animationDuration = 0;
        }

        function dragMoveCircle(sender) {
            if (sender.pointerIndex == 1) {
                linearCircle.setPointerValue(0, 0, sender.currentValue);
            }
        }

        function dragEndText(sender) {
            linearText.axes[0].pointers[0].animationDuration = 1500;
            linearText.axes[0].pointers[1].animationDuration = 1500;
        }

        function dragStartText(sender) {
            linearText.axes[0].pointers[0].animationDuration = 0;
            linearText.axes[0].pointers[1].animationDuration = 0;
        }

        function dragMoveText(sender) {
            if (sender.pointerIndex == 1) {
                linearText.setPointerValue(0, 0, sender.currentValue);
                linearText.axes[0].pointers[1].text = Math.round(sender.currentValue) + " Points";
            }
        }

        function dragEndRectangle(sender) {
            linearRectangle.axes[0].pointers[0].animationDuration = 1500;
            linearRectangle.axes[0].pointers[1].animationDuration = 1500;
        }

        function dragStartRectangle(sender) {
            linearRectangle.axes[0].pointers[0].animationDuration = 0;
            linearRectangle.axes[0].pointers[1].animationDuration = 0;
        }

        function dragMoveRectangle(sender) {
            if (sender.pointerIndex == 1) {
                linearRectangle.setPointerValue(0, 0, sender.currentValue);
            }
        }

        function dragStartMultiple(sender) {
            if (sender.pointerIndex == 1) {
                linearMultiple.axes[0].pointers[0].animationDuration = 0;
                linearMultiple.axes[0].pointers[1].animationDuration = 0;
            }
        }

        function dragEndMultiple(sender) {
            if (sender.pointerIndex == 1) {
                linearMultiple.axes[0].pointers[0].animationDuration = 1500;
                linearMultiple.axes[0].pointers[1].animationDuration = 1500;
            }
        }

        function dragMoveMultiple(sender) {
            if (sender.pointerIndex == 1) {
                linearMultiple.setPointerValue(0, 0, sender.currentValue);
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById('horizontal').addEventListener('click', function () {
                linearTriangle.width = linearCircle.width = linearText.width = linearRectangle.width = linearMultiple.width = '450px';
                linearTriangle.height = linearCircle.height = linearText.height = linearRectangle.height = linearMultiple.height = '150px';
                linearTriangle.orientation = linearCircle.orientation = linearText.orientation = linearRectangle.orientation = linearMultiple.orientation = "Horizontal";
                document.getElementById('horizontal').style.color = "white";
                document.getElementById('horizontal').style.backgroundColor = "#0074E3";
                document.getElementById('vertical').style.color = "black";
                document.getElementById('vertical').style.backgroundColor = "white";
                document.getElementById('containerTriangle').className = document.getElementById('containerCircle').className =
                    document.getElementById('containerText').className = document.getElementById('containerRectangle').className =
                    document.getElementById('containerMultiple').className = "col-xs-12 col-sm-12 col-lg-12 col-md-12";
                document.getElementById('containerBox').style.padding = "0%";

            });
            document.getElementById('vertical').addEventListener('click', function () {
                linearTriangle.width = linearCircle.width = linearRectangle.width = linearMultiple.width = '150px';
                linearText.width = '168px';
                linearTriangle.height = linearCircle.height = linearText.height = linearRectangle.height = linearMultiple.height = '350px';
                linearTriangle.orientation = linearCircle.orientation = linearText.orientation = linearRectangle.orientation = linearMultiple.orientation = "Vertical";
                document.getElementById('vertical').style.color = "white";
                document.getElementById('vertical').style.backgroundColor = "#0074E3";
                document.getElementById('horizontal')['style']['color'] = "black";
                document.getElementById('horizontal')['style']['backgroundColor'] = "white";
                document.getElementById('containerTriangle').className = document.getElementById('containerCircle').className =
                    document.getElementById('containerText').className = document.getElementById('containerRectangle').className =
                    document.getElementById('containerMultiple').className = "col-xs-4 col-sm-4 col-lg-2 col-md-2";
                document.getElementById('containerBox').style.padding = "4%";

            });
        });

    </script>
    }
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows the various marker pointer shapes available in the linear gauge. Additionally, multiple marker pointer, animation and drag support are enabled.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Marker Pointer in ASP.NET MVC Linear Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure marker pointer in the linear gauge. The
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.LinearGauge.LinearGaugePointer.html" aria-label="Pointers">Pointers<span class="sr-only">opens in a new tab</span></a> collection is useful for displaying multiple pointers. The properties available in
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.LinearGauge.LinearGaugePointer.html" aria-label="Pointers">Pointers<span class="sr-only">opens in a new tab</span></a> help in the customization of the marker pointer in the linear gauge. Drag pointers are assisted by the
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/syncfusion.ej2.lineargauge.lineargauge.html#Syncfusion_EJ2_LinearGauge_LinearGauge_DragStart" aria-label="DragStart">DragStart<span class="sr-only">opens in a new tab</span></a> and
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/syncfusion.ej2.lineargauge.lineargauge.html#Syncfusion_EJ2_LinearGauge_LinearGauge_DragEnd" aria-label="DragEnd">DragEnd<span class="sr-only">opens in a new tab</span></a> events.
        </p>
        <p>
            More information on the marker pointer can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/linear-gauge/pointers#marker-pointer" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>

}
@section Title{
    <title>ASP.NET MVC Linear Gauge Marker Pointer Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Marker Pointer in ASP.NET MVC Linear Gauge Control</h1>
}
@using Syncfusion.EJ2
@section ControlsSection{
    <div class="control-section">
        <div style="justify-content: center; display: flex; align-items: center;">
            @Html.EJS().LinearGauge("container").Load("gaugeLoad").Width("200px").Background("Transparent").Orientation(Syncfusion.EJ2.LinearGauge.Orientation.Horizontal).Container(
            container => container.Width(58).Type(Syncfusion.EJ2.LinearGauge.ContainerType.RoundedRectangle).Border(border => border.Width(5))).Annotations(annotation =>
            { annotation.AxisValue(60).AxisIndex(0).X(0).Y(0).ZIndex("1").Add();
              annotation.AxisValue(0).AxisIndex(0).X(0).Y(0).ZIndex("1").Add();
            }).Axes(axes =>
            axes.Minimum(0).Maximum(60).Line(line => line.Width(0)).LabelStyle(labelStyle => labelStyle.Font(font => font.Size("0px")))
            .Ranges(range =>
            {
                range.Start(3).End(14).StartWidth(45).EndWidth(45).Offset(52).Color("#66BB6A").Add();
                range.Start(16).End(29).StartWidth(45).EndWidth(45).Offset(52).Color("#66BB6A").Add();
                range.Start(31).End(44).StartWidth(45).EndWidth(45).Offset(52).Color("#66BB6A").Add();
            }).Pointers(pointer => pointer.Width(0))
            .MajorTicks(majorTick => majorTick.Interval(15).Height(0))
            .MinorTicks(minorTick => minorTick.Interval(5).Height(0)).Add()).Render()
        </div>
    </div>

    <script type="text/javascript">
        var textColor = '#000000';
        var borderColor = '#E5E7EB';
        function gaugeLoad(sender) {
            @* custom code start *@
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            @* custom code end *@
            borderColor = sender.gauge.theme.indexOf('Dark') > -1 ? 'white' : '#bfbfbf';
            textColor = sender.gauge.theme.indexOf('Dark') > -1 || sender.gauge.theme.indexOf('HighContrast') > -1 ? '#FFFFFF' : '#000000';
            if (sender.gauge.theme == 'Bootstrap5Dark' || sender.gauge.theme == 'TailwindDark' || sender.gauge.theme == 'Tailwind3Dark') {
                borderColor = "#4b5563";
            }
            if (sender.gauge.theme == 'FabricDark' || sender.gauge.theme == 'BootstrapDark' || sender.gauge.theme == 'MaterialDark' || sender.gauge.theme == 'HighContrast' || sender.gauge.theme == 'Material' || sender.gauge.theme == 'Fabric' || sender.gauge.theme == 'Bootstrap') {
                borderColor = "#bfbfbf";
            }
            if (sender.gauge.theme == 'Fluent' || sender.gauge.theme == 'Fluent2') {
                borderColor = "#EDEBE9";
            }
            if (sender.gauge.theme == 'FluentDark' || sender.gauge.theme == 'Fluent2Dark' || sender.gauge.theme == 'Fluent2HighContrast') {
                borderColor = "#292827";
            }
            if (sender.gauge.theme == 'Bootstrap5' || sender.gauge.theme == 'Tailwind' || sender.gauge.theme == 'Tailwind3') {
                borderColor = "#E5E7EB";
            }
            sender.gauge.annotations[0].content = "<div style='width: 16px;height: 37px;border: 5px solid " + borderColor + ";margin-left:26px;margin-top:57px;border-radius: 6px;' />";
            sender.gauge.annotations[1].content = "<div style='width: 137px;font-size: 20px;margin-top:150px;margin-left:40px;color: " + textColor + ";'>Charged: 75%</div>";
        }
        
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample shows the battery indicator charged up to 75% by utilizing the linear gauge's functionalities.
        </p>
    </div>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Battery Indicator in ASP.NET MVC Linear Gauge control. Explore here for more details." />
}
@section Description{
    <div id="description">
        <p>

            In this example, you can see how to render and configure a linear gauge to look like a battery indicator. This can be accomplished by combining axis, pointer, multiple ranges, and multiple annotation.
        </p>
        <p>
            More information on the linear gauge can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/linear-gauge/getting-started" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>

}

@section Title{
    <title>ASP.NET MVC Linear Gauge Battery Indicator Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Battery Indicator in ASP.NET MVC Linear Gauge Control</h1>
}

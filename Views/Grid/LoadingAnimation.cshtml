@using Syncfusion.EJ2

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="control-wrapper">
           <div class="control-section">
                @Html.EJS().Grid("Grid").AllowFiltering().AllowSorting().DataSource(dataManger =>
                {
                dataManger.Url("https://ej2services.syncfusion.com/production/web-services/api/UrlDataSource").Adaptor("UrlAdaptor");
                }).Columns(col =>
                {
                    col.Field("EmployeeID").HeaderText("Employee ID").Width("130").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
                    col.Field("Employees").HeaderText("Employee Name").Width("150").Add();
                    col.Field("Designation").HeaderText("Designation").Width("130").Add();
                    col.Field("CurrentSalary").HeaderText("Current Salary").Width("140").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
                }).AllowPaging().Load("load").PageSettings(page=>page.PageCount(3)).LoadingIndicator(l => { l.IndicatorType(Syncfusion.EJ2.Grids.IndicatorType.Shimmer); }).Render()
           </div>
        </div>
    </div>

<div class="col-lg-3 property-section">
    <table id="property" title="Properties" style="width: 100%;">
        <tr>
            <td class="left-side">Indicator Type</td>
            <td>
                @Html.EJS().DropDownList("Dropdown").DataSource((IEnumerable<object>)ViewData["data"]).Value("Shimmer").Change("onChange").Width("100").Render()
            </td>
        </tr>
    </table>
</div>

<script>
    function load(args) {
        this.query = new ej.data.Query().addParams('dataCount', '1000');
    }
    function onChange() {
        var grid = document.getElementById("Grid").ej2_instances[0];
        var dropdown = document.getElementById("Dropdown").ej2_instances[0];
        if (dropdown.value === 'Shimmer') {
            grid.loadingIndicator.indicatorType = 'Shimmer';
            grid.refresh();
        } else {
            grid.loadingIndicator.indicatorType = 'Spinner';
            grid.refresh();
        }
    }
</script>
}
@section ActionDescription{
    <div id="action-description">
        This sample shows the loading indicator for the grid actions when using remote data. In this sample, you can change the loading indicators from the properties panel.
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Loading Animation in ASP.NET MVC Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
     <p>
       The grid has an option to show a loading indicator in-between the time of fetching the data and binding it to the grid during initial rendering or refreshing or after performing any grid action like sorting, filtering, grouping, and more.
    </p>
    <p>The Grid supports the following loading indicator types. They are: </p>
        <ul>
            <li><code>Spinner</code></li>
            <li><code>Shimmer</code></li>
        </ul>
    <p>Use the loading indicator by setting the <code>LoadingIndicator.IndicatorType</code> property as <code>Spinner</code> or <code>Shimmer</code>. The default value of the IndicatorType is <code>Spinner</code>.</p>
    <p> In this demo, the <code>Shimmer</code> type is initially enabled. If you want to use the default value of the loading indicator, use the dropdown to change it.
    </p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Data Grid Loading Animation Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Loading Animation in ASP.NET MVC Data Grid Control</h1>
                }

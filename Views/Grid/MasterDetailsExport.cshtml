@using Syncfusion.EJ2

@{
    ViewData["Title"] = "MasterDetailsExport";
}

@{
    var SecondChildGrid = new Syncfusion.EJ2.Grids.Grid()
    {
        DataSource = (IEnumerable<object>)ViewData["CustomerDataSource"],
        QueryString = "CustomerID",
        Columns = new List<Syncfusion.EJ2.Grids.GridColumn> {
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="CustomerID", HeaderText="Customer ID", Width="90", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="ContactName", HeaderText="Name", Width="100" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="CompanyName", HeaderText="Company", Width="120" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="Country", HeaderText="Country", Width="90" },
        }
    };
    var ChildGrid = new Syncfusion.EJ2.Grids.Grid()
    {
        DataSource = (IEnumerable<object>)ViewData["DataSource"],
        QueryString = "EmployeeID",
        Columns = new List<Syncfusion.EJ2.Grids.GridColumn> {
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="OrderID", HeaderText="Order ID", Width="120" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="Freight", HeaderText="Freight", Width="120", Format="C2", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="ShipName", HeaderText="Ship Name", Width="150" },
                new Syncfusion.EJ2.Grids.GridColumn(){ Field="ShipCity", HeaderText="Ship City", Width="120" },
        },
        ChildGrid = SecondChildGrid
    };
}

@section ControlsSection{
    <div class="control-section ">
        @Html.EJS().Grid("MasterDetailsExport").DataSource((IEnumerable<object>)ViewData["EmpDataSource"]).Columns(col =>
   {

       col.Field("EmployeeID").HeaderText("Employee ID").Width("125").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       col.Field("FirstName").HeaderText("Name").Width("125").Add();
       col.Field("Title").HeaderText("Title").Width("180").Add();
       col.Field("City").HeaderText("City").Width("135").Add();

   }).AllowSorting().Toolbar(new List<string>() { "PdfExport", "ExcelExport" }).ToolbarClick("toolbarClick").ChildGrid(ChildGrid).AllowPdfExport().AllowExcelExport().Render()
    </div>
    <script>
        function toolbarClick(args) {
             if (args.item.id === 'MasterDetailsExport_pdfexport') {
                this.pdfExport({hierarchyExportMode: "All"});
            }
            if (args.item.id === 'MasterDetailsExport_excelexport') {
                this.excelExport({hierarchyExportMode: "All"});
            }
        }
    </script>

}

@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the hierarchy Grid export feature. In this sample, you can export the hierarchy grid by clicking the corresponding export button from the grid's toolbar.</p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Hierarchy Exporting in ASP.NET MVC Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>Grid supports client-side Hierarchy Grid exporting which allows you to export its data to the Excel and Pdf formats.</p>
        <p>
            In this demo, ExcelExport and PdfExport items are defined in the toolbar. For these toolbar items, we have defined actions
            in toolbarClick event to export hierarchy Grid using the
            <code> excelExport </code>, <code> pdfExport </code> methods and the hierarchy grid will export using <code>All</code> mode.
        </p>
        The hierarchy grid allows us to export the grid with following options,
        <ul>
            <li><code>Expanded</code> - Exports only the visible child grids in expanded state.</li>
            <li><code>All</code> - Exports the all the child grids in expanded state.</li>
            <li><code>None</code> - Exports the child grids in collapse state.</li>
        </ul>
        <p>
            We can change the hierarchy grid's export option by using the <code>hierarchyExportMode</code> property.
        </p>
        <p>
            More information on the exporting configuration can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/grid/pdf-export" aria-label="pdf-export">
                pdf-export
            <span class="sr-only">opens in a new tab</span></a> and  <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/grid/excel-exporting" aria-label="excel-export">
                excel-export
            <span class="sr-only">opens in a new tab</span></a> documentation sections.
        </p>
</div>

}






@section Title{
                    <title>ASP.NET MVC Data Grid Hierarchy Exporting Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Hierarchy Exporting in ASP.NET MVC Data Grid Control</h1>
                }
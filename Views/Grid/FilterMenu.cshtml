@using Syncfusion.EJ2
@section ControlsSection{

    <div class="col-lg-8 control-section">
        <div class="control-wrapper">
            <div class="control-section">

                @Html.EJS().Grid("FilterMenu").AllowFiltering().AllowSorting().Columns(col =>
           {

               col.Field("EmployeeID").HeaderText("Employee ID").Width("150").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
               col.Field("Employees").HeaderText("Employee Name").Width("200").Add();
               col.Field("Designation").HeaderText("Designation").Width("180").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
               col.Field("CurrentSalary").HeaderText("CurrentSalary").Width("150").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();


           }).AllowPaging().Load("load").PageSettings(page => page.PageCount(1)).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Menu); }).Render()
            </div>
        </div>
    </div>

    <template>
        <tr class="infinite-row">
            <td class="left-side"><div style='padding-left: 0px;'>Enable OnDemand: </div></td>
            <td><input type="checkbox" tabindex="1" id='dataloadtype' /></td>
        </tr>
    </template>
    <div class="col-lg-4 property-section">



        <table id="property" title="Properties" style="width: 100%;">


            <tr>
                <td class="left-side">Filter Type</td>
                <td>
                    @Html.EJS().DropDownList("FilterType").DataSource((IEnumerable<object>)ViewData["filterType"]).Value("Menu").Change("onChange").Render()
                </td>
            </tr>
        </table>
    </div>

    <script>


        function onChange() {
            var gridObj = document.getElementById("FilterMenu").ej2_instances[0], dropdpwnObj = document.getElementById("FilterType").ej2_instances[0];
            gridObj.filterSettings.type = dropdpwnObj.value;
            var propertyTbody = document.querySelector('#property tbody');
            var enableInfiniteLoad;
            if (dropdpwnObj.value === 'Excel' || dropdpwnObj.value === 'CheckBox') {
                if (propertyTbody.children.length < 2) {
                    var temp = document.getElementsByTagName("template")[0];
                    var cloneTemplate = temp.content.cloneNode(true);
                    propertyTbody.appendChild(cloneTemplate.querySelector("tr.infinite-row"));
                    enableInfiniteLoad = new ej.buttons.CheckBox({
                        change: function(e) {
                            gridObj.filterSettings.enableInfiniteScrolling = e.checked;
                        }
                    });
                    enableInfiniteLoad.appendTo('#dataloadtype');
                } else {
                    enableInfiniteLoad = document.getElementById('dataloadtype').ej2_instances[0];
                    enableInfiniteLoad.checked = false;
                    gridObj.filterSettings.enableInfiniteScrolling = false;
                }
            } else {
                gridObj.filterSettings.enableInfiniteScrolling = false;
                ej.base.remove(document.querySelector('#property tbody tr.infinite-row'));
            }
        }
        function load(args) {
            var hostUrl = 'https://ej2services.syncfusion.com/production/web-services/';
            var urlapi = new ej.data.DataManager({
                url: hostUrl + "api/UrlDataSource",
                adaptor: new ej.data.UrlAdaptor()
            });
            this.dataSource = urlapi;
            this.query = new ej.data.Query().addParams('dataCount', '10000');
        }
    </script>

}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the grid's multiple-type filter functionality and user interface.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Filter Menu in ASP.NET MVC Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            The filtering feature enables the user to view a reduced number of records based on the filter criteria. It can be enabled by setting the <code>AllowFiltering</code> property to true.
        </p>
        <p>The grid supports the following filter types:</p>
        <ul>
            <li><code>FilterBar</code></li>
            <li><code>Menu</code></li>
            <li><code>CheckBox</code></li>
            <li><code>Excel</code></li>
        </ul>
        You can change the filter type by setting <code>FilterSettings->Type</code>.
        <p>In this demo, filter menu is enabled by default. You can switch to other filter types using the dropdown.</p>
        <p>Additionally, we have an on-demand data fetch functionality and UI for the checkbox/Excel filter type. It can be enabled by setting the <code><a target="_blank" class="code"
            href="">filterSettings->enableInfiniteScrolling<span class="sr-only">opens in a new tab</span></a></code> property to true. In this demo, on-demand data fetch is not enabled by default. To enable the on-demand data fetch for the checkbox/Excel filter type, the Enable OnDemand option must be checked after selecting the checkBox/Excel filter type using the dropdown menu.</p>
        <p>The Grid now supports improved <code>in</code> and <code>not in</code> filter operators, allowing users to filter multiple values within the same column. When the menu filter is enabled, a Syncfusion MultiSelect Dropdown component with checkboxes appears to select the <code>in</code> or <code>not in</code> operators.</p>
        <p>
            More information on the filter configuration can be found in this
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Grids.GridFilterSettings.html" aria-label="documentation section">
                documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Data Grid Filter Menu Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Filter Menu in ASP.NET MVC Data Grid Control</h1>
                }

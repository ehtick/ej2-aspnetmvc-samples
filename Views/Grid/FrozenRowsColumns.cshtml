@using Syncfusion.EJ2


@section ControlsSection{
 <div class="col-lg-8 control-section">
    <div class="control-wrapper">
        <div class="control-section">
            @Html.EJS().Grid("FrozenGrid").DataSource((IEnumerable<object>)ViewData["dataSource"]).AllowSelection(false).AllowResizing().Height("410").FrozenRows(2).FrozenColumns(1).Columns(col =>
       {

           col.Field("OrderID").HeaderText("Order ID").Width("150").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).IsPrimaryKey(true).Add();
           col.Field("Freight").HeaderText("Freight").Width("120").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
           col.Field("OrderDate").HeaderText("Order Date").Width("130").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
           col.Field("CustomerID").HeaderText("Customer Name").Width("200").Add();
           col.Field("ShipName").HeaderText("Ship Name").Width("150").Add();
           col.Field("ShippedDate").HeaderText("Shipped Date").Width("130").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
           col.Field("ShipCity").HeaderText("Ship City").Width("200").Add();
           col.Field("ShipAddress").HeaderText("Ship Address").Width("150").Add();
           col.Field("ShipCountry").HeaderText("Ship Country").Width("150").Add();

       }).AllowSorting().AllowFiltering().FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Excel); }).Render()
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">

    <table id="property" title="Properties" style="width: 100%;">
        <tr>
            <td class="left-side">Frozen Rows</td>
            <td style="padding-bottom:10px">
                @Html.EJS().NumericTextBox("rows").Min(1).Max(5).Value(2).Format("n").Decimals(0).ValidateDecimalOnType(true).Render()
            </td>
        </tr>
        <tr>
            <td class="left-side">Frozen Columns</td>
            <td style="padding-bottom:10px">
                @Html.EJS().NumericTextBox("columns").Min(1).Max(2).Value(1).Format("n").Decimals(0).ValidateDecimalOnType(true).Render()
            </td>
        </tr>
        <tr>
            <td class="left-side"></td>
            <td>

                @Html.EJS().Button("set").Content("SET").Render()
            </td>
        </tr>
    </table>
</div>

<script>
    document.getElementById("set").addEventListener("click", function() {
    
        var grid = document.getElementById("FrozenGrid").ej2_instances[0], rows = document.getElementById("rows").ej2_instances[0], columns = document.getElementById("columns").ej2_instances[0];
        grid.frozenColumns = columns.value;
        grid.frozenRows = rows.value;
    })
</script>

}
@section ActionDescription{
	<div id="action-description">
		<p>This sample demonstrates the frozen rows and columns feature of the Grid. Scroll the movable content vertically/horizontally to view the frozen rows/columns
		with the content.</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Default Frozen in ASP.NET MVC Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
		<p>
			The freezing feature enables the user to freeze certain rows/columns to scroll remaining movable content. This can be achieved by setting <b>FrozenRows</b> and <b>FrozenColumns</b> property.
		</p>
		<p>
			In this demo sample, the first column and two rows are set to frozen by using the  <code>FrozenRows</code>  and 
			<code>FrozenColumns</code>  properties.
		</p>

    </div>
}


@section Title{
                    <title>ASP.NET MVC Data Grid Frozen Rows and Columns Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Frozen Rows and Columns in ASP.NET MVC Data Grid Control</h1>
                }

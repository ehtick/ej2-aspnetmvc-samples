@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids;
@using EJ2MVCSampleBrowser.Models;
@using System.Web.Script.Serialization
@{
    var serializer = new JavaScriptSerializer();
}
@{
    ViewData["Title"] = "FIFAStatistics";
}

@section ControlsSection{
    <div class="control-section">
        <div id="tooltip">
            @Html.EJS().Tooltip("tooltip").OpensOn("Hover").Target(".infotooltip").CssClass("fifa_tooltip").Position(Syncfusion.EJ2.Popups.Position.TopCenter).ContentTemplate(@<div id="fifa_grid">
                @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)Model).GridLines(GridLine.Both).AllowSorting(true).EnableStickyHeader(true).AllowTextWrap(true).EnableAltRow(true).EnableHover(false).AllowSelection(false).QueryCellInfo("queryCellInfo").DataBound("dataBound").Columns(col =>
                {
                    col.Field("Year").HeaderText("Year").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Width("100").Add();
                    col.Field("Host").HeaderText("Organizer").Template("<div></div>").Width("140").Add();
                    col.Field("Champions").HeaderText("Champions").Template("<div></div>").Width("140").Add();
                    col.Field("Coach").HeaderText("Winning Coach").Template("<div></div>").Width("185").Add();
                    col.Field("TopScorer").HeaderText("Most Scorer(s)").Template("<div></div>").Width("185").Add();
                    col.Field("BestPlayerAward").HeaderText("Player of season").Template("<div></div>").Width("170").Add();
                }).TextWrapSettings(text => { text.WrapMode(Syncfusion.EJ2.Grids.WrapMode.Content); }).Render()
            </div>).BeforeRender("beforeRender").Render()
        </div>
    </div>

    <style>
        /* Tooltip */
        .fifa_tooltip.e-tooltip-wrap {
            border-radius: 15px;
        }

        .fifa_tooltip.e-tooltip-wrap .e-tip-content {
            padding: 0;
            line-height: 20px;
            font-size: 14px;
        }
        /* Grid */
        #fifa_grid .e-gridcontent,
        #fifa_grid .e-gridcontent .e-content,
        #fifa_grid .e-gridcontent table {
            background: transparent;
        }

        #fifa_grid .goal {
            margin-right: 3px;
            margin-top: 5px;
            opacity: 0.6;
        }

        #fifa_grid .goal path {
            fill: #000000;
        }

        .fluent-dark #fifa_grid .goal path,
        .fluent2-dark #fifa_grid .goal path,
        .tailwind-dark #fifa_grid .goal path,
        .tailwind3-dark #fifa_grid .goal path,
        .bootstrap5\.3-dark #fifa_grid .goal path,
        .material-dark #fifa_grid .goal path,
        .material3-dark #fifa_grid .goal path,
        .fabric-dark #fifa_grid .goal path,
        .bootstrap-dark #fifa_grid .goal path,
        .bootstrap4-dark #fifa_grid .goal path,
        .bootstrap5-dark #fifa_grid .goal path,
        .highcontrast #fifa_grid .goal path {
            fill: #D3D8D4;
        }

        #fifa_grid .e-gridcontent table.tournament::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url(../Content/images/FifaStatistics/background/WorldCup.png);
            background-size: auto;
            background-position: center;
            background-repeat: no-repeat;
            opacity: 0.1;
            pointer-events: none;
        }

        #fifa_grid .e-rowcell img {
            margin: 0 3px;
        }
    </style>

    <script>
            // --- Serialize Tooltip data ---
            var webpfiles = @Html.Raw(serializer.Serialize(FIFAStatisticsDataSource.WebpFiles));
            var countryInfo = @Html.Raw(serializer.Serialize(FIFAStatisticsDataSource.CountryInfo));
            var teamInfo = @Html.Raw(serializer.Serialize(FIFAStatisticsDataSource.TeamInfo));
            var coachInfo = @Html.Raw(serializer.Serialize(FIFAStatisticsDataSource.CoachInfo));
            var topScorerInfo = @Html.Raw(serializer.Serialize(FIFAStatisticsDataSource.TopScorerInfo));
            var bestPlayerInfo = @Html.Raw(serializer.Serialize(FIFAStatisticsDataSource.BestPlayerInfo));

            var tooltipObj;
            var isverticalPopup;

            // Tooltip beforeRender event – sets tooltip content based on the grid cell.
            function beforeRender(args) {
                var gridObj = document.getElementById("Grid").ej2_instances[0];
                var rowInfo = gridObj.getRowInfo(args.target.closest('td'));
                var field = rowInfo.column.field;
                var value = rowInfo.rowData[field];
                var imageSource = '';
                var cellInfo = '';
                var hideImage = false;
                if (value) {
                    switch (field) {
                        case 'Host':
                            value = args.target.title;
                            imageSource = '../Content/images/FifaStatistics/country/' +
                                (webpfiles.indexOf(value) > -1 ? value + '.jpg' : value + '.png');
                            cellInfo = countryInfo[0][value.replace(/ /g, '_')];
                            break;
                        case 'Champions':
                            imageSource = '../Content/images/FifaStatistics/team/' + value + '.png';
                            cellInfo = teamInfo[0][value.replace(/ /g, '_')];
                            break;
                        case 'Coach':
                            if (args.target.tagName === 'IMG') {
                                value = rowInfo.rowData.Champions;
                                imageSource = '../Content/images/FifaStatistics/country/' +
                                    (webpfiles.indexOf(value) > -1 ? value + '.jpg' : value + '.png');
                                cellInfo = countryInfo[0][value.replace(/ /g, '_')];
                            } else {
                                if (value === 'Juan López') { hideImage = true; }
                                imageSource = '../Content/images/FifaStatistics/coach/' + value +
                                    (value === 'Aymoré Moreira' ? '.png' : '.jpg');
                                cellInfo = coachInfo[0][value.replace(/ /g, '_')];
                            }
                            break;
                        case 'TopScorer':
                            value = args.target.title;
                            if (args.target.tagName === 'IMG') {
                                if (value === 'Croatia') { hideImage = true; }
                                imageSource = '../Content/images/FifaStatistics/team/' + value + '.png';
                                cellInfo = teamInfo[0][value.replace(/ /g, '_')];
                            } else {
                                imageSource = '../Content/images/FifaStatistics/top_scorer/' + value + '.jpg';
                                cellInfo = topScorerInfo[0][value.replace(/ /g, '_')];
                            }
                            break;
                        case 'BestPlayerAward':
                            if (args.target.tagName === 'IMG') {
                                value = rowInfo.rowData.BestPlayerCountry;
                                if (value === 'Croatia') { hideImage = true; }
                                imageSource = '../Content/images/FifaStatistics/team/' + value + '.png';
                                cellInfo = teamInfo[0][value.replace(/ /g, '_')];
                            } else {
                                imageSource = '../Content/images/FifaStatistics/best_player/' + value + '.jpg';
                                cellInfo = bestPlayerInfo[0][value.replace(/ /g, '_')];
                            }
                            break;
                    }
                    var containerDiv = document.createElement('div');
                    var imgDiv = document.createElement('div');
                    var img = document.createElement('img');
                    img.alt = '';
                    img.src = imageSource;
                    img.decoding = 'async';
                    img.title = value;
                    img.setAttribute('data-file-width', '945');
                    img.setAttribute('data-file-height', '630');
                    img.classList.add('mw-file-element');
                    var infoDiv = document.createElement('div');
                    infoDiv.innerHTML = cellInfo;
                    if ((args.target.tagName === 'IMG' && field === 'Coach') || field === 'Host') {
                        isverticalPopup = true;
                        tooltipObj.width = 275;
                        img.width = 275;
                        img.height = 175;
                        infoDiv.style.padding = '12px';
                        imgDiv.style.borderBottom = '1px solid #e0e0e0';
                    } else {
                        isverticalPopup = false;
                        tooltipObj.width = 425;
                        containerDiv.style.display = 'inline';
                        imgDiv.style.display = hideImage ? 'none' : 'inline';
                        imgDiv.style.float = 'right';
                        imgDiv.style.borderLeft = '1px solid #e0e0e0';
                        imgDiv.style.margin = '0 0 0 12px';
                        img.width = 190;
                        img.height = 245;
                        infoDiv.style.padding = '12px 0 12px 12px';
                    }
                    imgDiv.appendChild(img);
                    containerDiv.appendChild(imgDiv);
                    containerDiv.appendChild(infoDiv);
                    tooltipObj.content = containerDiv;
                }
            }
            function beforeOpen(args) {
                args.element.style.maxWidth = isverticalPopup ? '275px' : '425px';
                args.element.style.width = isverticalPopup ? '275px' : '425px';

            }
            function queryCellInfo(args) {
                if (args.column.field === 'Host' || args.column.field === 'Champions' ||
                    args.column.field === 'Coach' || args.column.field === 'TopScorer' ||
                    args.column.field === 'BestPlayerAward') {

                    var values = args.data[args.column.field].split(',');
                    var country = args.data.TopScorerCountry ? args.data.TopScorerCountry.split(',') : [];
                    var newRowData = [];
                    for (var k = 0; k < values.length; k++) {
                        var obj = Object.assign({}, args.data);
                        obj[args.column.field] = values[k];
                        if (args.column.field === 'TopScorer') {
                            obj.TopScorerCountry = country[k];
                        }
                        newRowData.push(obj);
                    }
                    args.cell.innerHTML = "";
                    for (var i = 0; i < values.length; i++) {
                        var div = document.createElement('div');
                        var span = document.createElement('span');
                        if (!((args.column.field === 'TopScorer' && values[i].indexOf('Players') > -1) ||
                            values[i] === 'Not awarded')) {
                            var image = renderImage(newRowData[i], args.column.field);
                            span.appendChild(image);
                        }
                        var link;
                        if ((args.column.field === 'TopScorer' &&
                            (values[i].indexOf('Players') > -1 || values[i].indexOf('Ronaldo') > -1)) ||
                            (args.column.field === 'BestPlayerAward' &&
                                (values[i] === 'Not awarded' || values[i] === 'Mario Kempes' ||
                                    values[i] === 'Paolo Rossi' || values[i] === 'Salvatore Schillaci'))) {
                            link = document.createElement('span');
                            link.innerText = values[i];
                        } else {
                            link = document.createElement('a');
                            link.href = 'https://ej2.syncfusion.com/';
                            link.textContent = values[i];
                            link.target = '_blank';
                            link.classList.add('infotooltip');
                            link.title = values[i];
                            link.onclick = function (e) { e.preventDefault(); };
                        }
                        div.appendChild(span);
                        div.appendChild(link);
                        args.cell.appendChild(div);
                    }
                    if (args.column.field === 'TopScorer') {
                        var scoreDiv = renderScoreIcons(args.data);
                        args.cell.appendChild(scoreDiv);
                    }
                    if (args.column.field === 'BestPlayerAward') {
                        var gridObj = document.getElementById("Grid").ej2_instances[0];
                        var rowIndex = gridObj.currentViewData.indexOf(args.data);
                        if (rowIndex >= 0) {
                            args.rowSpan = calculateRowspan(args, rowIndex);
                        }
                    }
                }
            }
            function dataBound() {
                var tableEle = this.element.querySelector('.e-gridcontent table');
                if (tableEle) {
                    tableEle.classList.add('tournament');
                }

            }
            function calculateRowspan(args, rowIndex) {
                var gridObj = document.getElementById("Grid").ej2_instances[0];
                var rowspan = 1;
                for (var i = rowIndex + 1, j = 0; i < gridObj.currentViewData.length; i++, j++) {
                    if (args.data[args.column.field] !== gridObj.currentViewData[i][args.column.field]) {
                        rowspan = j + 1;
                        break;
                    }
                    if (i === gridObj.currentViewData.length - 1) {
                        rowspan = j + 2;
                        break;
                    }
                }
                return rowspan;
            }
            function renderImage(rowDetails, field) {
                var value = '';
                switch (field) {
                    case 'Host':
                        value = rowDetails.Host;
                        break;
                    case 'Champions':
                    case 'Coach':
                        value = rowDetails.Champions;
                        break;
                    case 'TopScorer':
                        value = rowDetails.TopScorerCountry;
                        break;
                    case 'BestPlayerAward':
                        value = rowDetails.BestPlayerCountry;
                        break;
                }
                var src = '../Content/images/FifaStatistics/country/' +
                    (webpfiles.indexOf(value) > -1 ? value + '.jpg' : value + '.png');
                var img = document.createElement('img');
                img.alt = '';
                img.src = src;
                img.decoding = 'async';
                img.title = value;
                img.width = 23;
                img.height = 15;
                if (field === 'Coach' || field === 'TopScorer' || field === 'BestPlayerAward') {
                    img.classList.add('infotooltip');
                }
                img.setAttribute('data-file-width', '945');
                img.setAttribute('data-file-height', '630');
                return img;
            }
            function renderScoreIcons(rowDetails) {

                var div = document.createElement('div');
                for (var i = 0; i < rowDetails.TotalGoal; i++) {
                    var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                    svg.setAttribute('class', 'goal');
                    svg.setAttribute('width', '14');
                    svg.setAttribute('height', '14');
                    svg.setAttribute('viewBox', '0 0 14 14');
                    svg.setAttribute('fill', 'none');
                    var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                    path.setAttribute('fill-rule', 'evenodd');
                    path.setAttribute('clip-rule', 'evenodd');
                    path.setAttribute('d', 'M7 14C10.866 14 14 10.866 14 7C14 3.13401 10.866 0 7 0C3.13401 0 0 3.13401 0 7C0 10.866 3.13401 14 7 14ZM9.45103 9.48743L11.9038 9.65149C12.3112 8.95696 12.5764 8.16672 12.6584 7.32454L10.5776 6.01477C10.46 5.93821 10.3698 5.82336 10.326 5.68938C10.2823 5.5554 10.2877 5.41047 10.3397 5.27922L11.253 2.99875C10.7088 2.38625 10.0334 1.89133 9.27329 1.55774L7.38384 3.13274C7.2772 3.22297 7.13774 3.27219 6.99829 3.27219C6.85884 3.27219 6.72212 3.22297 6.61274 3.13274L4.72329 1.55774C3.96313 1.89133 3.28774 2.38625 2.7436 2.99875L3.65415 5.27922C3.7061 5.41047 3.71157 5.5554 3.66782 5.68938C3.62407 5.82336 3.53657 5.93821 3.41626 6.01477L1.33813 7.32454C1.41743 8.16672 1.6854 8.95696 2.09282 9.65149L4.54556 9.48743C4.68774 9.47922 4.82993 9.51751 4.94204 9.60227C5.05415 9.68704 5.13618 9.80735 5.17173 9.94407L5.77329 12.3284C6.16978 12.4132 6.5772 12.4597 6.99829 12.4597C7.41938 12.4597 7.82954 12.4159 8.22329 12.3284L8.82485 9.94407C8.85767 9.80462 8.9397 9.68704 9.05454 9.60227C9.16938 9.51751 9.30884 9.47922 9.45103 9.48743ZM5.30298 5.81516L6.61274 4.86633C6.84243 4.69954 7.15415 4.69954 7.38384 4.86633V4.8636L8.6936 5.81516C8.92329 5.98196 9.01899 6.27727 8.93149 6.54797L8.4311 8.08743C8.3436 8.35813 8.09204 8.54133 7.80767 8.54133H6.18892C5.90454 8.54133 5.65298 8.35813 5.56548 8.08743L5.06509 6.54797C4.97759 6.27727 5.07329 5.98196 5.30298 5.81516Z');
                    svg.appendChild(path);
                    div.appendChild(svg);
                }
                return div;
            }

            // Initialize tooltipObj and register functions once the DOM is ready
            document.addEventListener("DOMContentLoaded", function () {
                tooltipObj = document.getElementById("tooltip").ej2_instances[0];
                window.queryCellInfo = queryCellInfo;
                window.dataBound = dataBound;
                window.onBeforeRender = beforeRender;
                window.onBeforeOpen = beforeOpen;
            });
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            In this demo, the Syncfusion DataGrid displays comprehensive FIFA World Cup records and statistics, covering the entire history of the tournament from 1930 to 2022. The FIFA World Cup statistics and data utilized in this application are sourced from
            <code><a target="_blank" href="https://en.wikipedia.org/wiki/FIFA_World_Cup_records_and_statistics">Wikipedia</a></code>.
            We sincerely thank Wikipedia for their invaluable resource, which has been instrumental in preparing this demonstration.
        </p>
    </div>
}

@section Meta{
    <meta name="description" content="This example demonstrates the FIFA Statistics in ASP.NET MVC Data Grid control. Explore here for more details." />
}

@section Description{
    <div id="description">
        <p>
            This section provides detailed information about the FIFA World Cup, including the year, host country, champion team, top scorer, best player, and winning coach. The data is enhanced with flags, icons, and hyperlinks for easy access to more details. The Grid
            <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Grids.GridColumn.html#Syncfusion_EJ2_Grids_GridColumn_Template" aria-label="column template">column template<span class="sr-only">opens in a new tab</span></a>
            feature allows custom content in grid cells, creating a rich, interactive display.
        </p>

    </div>
}

@section Title{
    <title>ASP.NET MVC Data Grid Product Use Case Example - Syncfusion Demos </title>
}

@section Header{
    <h1 class='sb-sample-text'>Example of Product Use Case in ASP.NET MVC Data Grid Control</h1>
}

@using Syncfusion.EJ2
@{
    ViewData["Title"] = "ColumnTemplate";
}

@section ControlsSection{
    <div class="control-section">
    @{
        List<object> operators = new List<object>();
        operators.Add(new { value = "contains", text = "Contains" });
        operators.Add(new { value = "doesnotcontain", text = "Does Not Contains" });

        Object filterUI = new Object();
        filterUI = (new { type = "Menu", ui = new { read = "read", write = "write", create = "create" } });
    }
        @Html.EJS().Grid("FlatGrid").DataSource((IEnumerable<object>)ViewData["dataSource"]).Width("auto").Height("359").Columns(col =>
   {
        col.HeaderText("Image").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).Template("#template").Width("180").Add();
        col.Field("EmployeeID").HeaderText("ID").Width("160").Add();
        col.Field("Name").HeaderText("Name").Width("120").Add();
        col.Field("MailID").HeaderText("Email ID").Width("150").Template("#mailIDTemplate").Add();
        col.Field("DateOfJoining").HeaderText("Date Joined").Width("170").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
        col.Field("Designation").HeaderText("Designation").Width("160").Add();
        col.Field("Team").HeaderText("Team(s)").Width("160").Add();
        col.Field("ReportTo").HeaderText("Reporter").Width("120").Add();
        col.Field("EmployeeAvailability").HeaderText("Availability").Width("200").Template("#statusTemplate").Add();
        col.Field("YearOfExperience").HeaderText("Experience").Width("200").Add();
        col.Field("AssetKit").HeaderText("Asset Kit").Width("180").Filter(filterUI).Template("#assetTemplate").Add();
        col.Field("AssetKitDistribution").HeaderText("Assigned Date").Width("170").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
        col.Field("Location").HeaderText("Location").Width("150").Template("#locationTemplate").Add();
        col.Field("PhoneNumber").HeaderText("Contact No").Width("150").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();

   }).AllowSorting().AllowFiltering().FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.CheckBox).Operators(new { stringOperator = operators }); }).QueryCellInfo("queryCellInfo").Render()
    </div>
<style>
    .image img {
        height: 55px;
        width: 55px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
    }
    .statustemp.e-notavailablecolor {
        background-color: indianred;
        width: 100px;
        height: 30px;
    }
    .statustemp.e-availablecolor {
        background-color: #58d378;
        width: 100px;
        height: 30px;
    }
    .statustxt.e-availablecolor {
        color: white
    }
    .statustxt.e-notavailablecolor {
        color: white;
    }
    .statustemp {
        position: relative;
        height: 19px;
        text-align: center
    }
    td.e-rowcell .statustxt.e-availablecolor {
        color: white;
        position: relative;
        top: 4px;
    }
    td.e-rowcell .statustxt.e-notavailablecolor {
        color: white;
        position: relative;
        top: 4px;
    }
    .e-icon-location::before {
        width: 15px !important;
        content: "\e30c";
    }
    .e-location {
        margin-right: 5px;
    }
</style>

<script id="template" type="text/x-template">
    ${employeeTemplate(data)}
</script>
<script id="locationTemplate" type="text/x-template">
    <div>
        <span class="e-location e-icons"></span>${Location}
    </div>
</script>
<script id="mailIDTemplate" type="text/x-template">
    <a href="mailto:${MailID}">${MailID}</a>
</script>
<script id="assetTemplate" type="text/x-template">
    <div id='assetElement'></div>
</script>
<script type="text/x-jsrender" id="statusTemplate">
    ${statusDetail(data)}
</script>
<script type="text/javascript">
    function statusDetail(e) {
        var div = document.createElement('div');
        var span = document.createElement('span');
        if (e.EmployeeAvailability === 'Available') {
            span.className = 'statustxt e-availablecolor';
            span.textContent = 'Available'
            div.className = 'statustemp e-availablecolor'
        }
        if (e.EmployeeAvailability === 'Not Available') {
            span.className = 'statustxt e-notavailablecolor';
            span.textContent = 'Not Available'
            div.className = 'statustemp e-notavailablecolor'
        }
        div.appendChild(span);
        return div.outerHTML;
    }
    function employeeTemplate(e) {
        var divElement = document.createElement('div');
        divElement.className = 'image';
        var imgElement = document.createElement('img');
        imgElement.src = '../Content/images/Employees/' + e.EmployeeID.replace('Emp100', '') + '.png';
        imgElement.alt = e.EmployeeID;
        divElement.appendChild(imgElement);
        return divElement.outerHTML;
    };
    function queryCellInfo(args) {
        if (args.column.field === 'AssetKit') {
            var assetValue = args.data[args.column.field].split(',');
            var asset = new ej.buttons.ChipList({
                chips: assetValue
            });
            asset.appendTo(args.cell.querySelector('#assetElement'));
        }
    }

    var dropInstance;
    function create(args) {
        var flValInput = ej.base.createElement('input', {
            className: 'flm-input',
        });
        args.target.appendChild(flValInput);
        var dropdownData = [
            'Phone',
            'Mouse',
            'Laptop',
            'Keyboard',
            'Headset',
            'Tablet',
            'Projector',
            'Printer',
            'Calculator',
        ];
        dropInstance = new ej.dropdowns.MultiSelect({
            dataSource: dropdownData,
            placeholder: 'Select a value',
            popupHeight: '200px',
            allowFiltering: true,
            mode: 'Box',
        });
        dropInstance.appendTo(flValInput);
    }
    function write(args) {
        if (args.filteredValue && args.filteredValue.length > 0) {
            dropInstance.value = args.filteredValue.split(', ');
        }
    }
    function read(args) {
        var gridInstance = document.getElementById("FlatGrid").ej2_instances[0];
        gridInstance.removeFilteredColsByField(args.column.field);
        if (dropInstance?.value && dropInstance?.value.length) {
            args.fltrObj.filterByColumn(
                args.column.field,
                args.operator,
                dropInstance?.value.sort().join(', ')
            );
        }
    }
</script>
}
@section ActionDescription{
	<div id="action-description">
		<p>This sample demonstrates the usage of template columns in a Grid. In this sample, custom images are shown in the Employee
            Image column.
		</p>
	</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Column Template in ASP.NET MVC Data Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
    <p>
        The Grid creates a custom layout for each cell using the column template feature. The 
        <code>columns->template</code> property accepts either string or HTML element`s ID value, which will be used 
        as the template for the cell.  
    </p>
    <p>
        The column template feature allows the customization of grid cells. In this demo, the Grid showcases the <strong>Employee Image</strong>
        column with employee photos, <strong>Mail ID</strong> column with link tags, <strong>Location</strong> column with location icons, <strong>Asset Kit</strong> column with Syncfusion Chip components and <strong>Employee Availability</strong> column with HTML span elements, using green to indicate available and red to indicate for not available.
    </p>
    <p>The template expression should be provided inside <code>${...}</code> interpolation syntax.</p>
	
    </div>
}

@section Title{
                    <title>ASP.NET MVC Data Grid Column Template Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Column Template in ASP.NET MVC Data Grid Control</h1>
                }

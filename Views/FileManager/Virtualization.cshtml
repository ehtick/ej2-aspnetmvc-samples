@using Syncfusion.EJ2
@using Syncfusion.EJ2.FileManager
@using EJ2MVCSampleBrowser.Models

@{
    string[] items = new string[] { "NewFolder", "Cut", "Copy", "Paste", "Delete", "Download", "Rename", "SortBy", "Refresh", "View", "Details" };
    string[] layout = new string[] { "SortBy", "View", "Refresh", "|", "Paste", "|", "NewFolder", "|", "Details", "|", "SelectAll" };
    string[] file = new string[] { "Cut", "Copy", "|", "Delete", "Download", "Rename", "|", "Details" };
}

@section ControlsSection{
    <div class="control-section">
        <div class="sample-container">
            <!-- File Manager virtualization feature sample -->
            @Html.EJS().FileManager("filemanager").AjaxSettings(
                       new Syncfusion.EJ2.FileManager.FileManagerAjaxSettings
                       {
                           Url = "https://ej2-aspcore-service.azurewebsites.net/api/Virtualization/FileOperations",
                           DownloadUrl = "https://ej2-aspcore-service.azurewebsites.net/api/Virtualization/Download",
                           UploadUrl = "https://ej2-aspcore-service.azurewebsites.net/api/Virtualization/Upload",
                           GetImageUrl = "https://ej2-aspcore-service.azurewebsites.net/api/Virtualization/GetImage"
                       }).ToolbarSettings(new Syncfusion.EJ2.FileManager.FileManagerToolbarSettings()
                       {
                           Items = items
                       }).ContextMenuSettings(new Syncfusion.EJ2.FileManager.FileManagerContextMenuSettings()
                       {
                           File = file,
                           Layout = layout
                       }).EnableVirtualization(true).Render()
        </div>
    </div>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates the implementation of UI virtualization within the File Manager component, enhancing performance and user experience by dynamically loading folders and files as the user scrolls through the items. In both the details view and large icons view, the component efficiently handles extensive data sets, ensuring smooth navigation. Particularly, the <code>documents</code> and <code>text documents</code> folders in this example contain a substantial number of files, showcasing the capability of the File Manager to manage and display large volumes of data seamlessly.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>In this demo, virtualization is enabled by setting the <a href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.FileManager.FileManager.html#Syncfusion_EJ2_FileManager_FileManager_EnableVirtualization" target="_blank" aria-label="enableVirtualization">EnableVirtualization<span class="sr-only">opens in a new tab</span></a> property to <code>true</code>.</p>
        <p>To use the virtual scrolling feature, inject the virtualization module using the <code>FileManager.Inject(Virtualization)</code> section.</p>
        <p>
            <b>Note: </b>File Managerâ€™s upload functionality is restricted in the online demos for security reasons. If you need to test upload functionality, please install
            <a target="_blank" href="https://www.syncfusion.com/downloads" aria-label="downloads">Syncfusion Essential Studio<sup>&reg;</sup> <span class="sr-only">opens in a new tab</span></a>on your machine and run the demo.
        </p>
    </div>
}

@section Meta {
    <meta name="description" content="This example demonstrates the how to enable the virtual scrolling feature in a ASP.NET MVC File Manager control." />
}
@section Title{
    <title>ASP.NET MVC File Manager Virtualization Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Virtualization in ASP.NET MVC File Manager Control</h1>
}

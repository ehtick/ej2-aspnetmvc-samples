@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids
@using Syncfusion.EJ2.TreeGrid
@*custom code start*@

@{
    ViewData["Title"] = "StackedHeader";
}

@*custom code end*@

@section ControlsSection{
    <div class="control-section">
        @(Html.EJS().TreeGrid("StackedHeader")
            .AllowPaging().ClipMode(ClipMode.EllipsisWithTooltip)
            .PageSettings(page => page.PageCount(5))
            .DataSource((IEnumerable<object>)ViewData["datasource"]).ShowColumnChooser(true).ColumnChooserSettings(new Syncfusion.EJ2.TreeGrid.TreeGridColumnChooserSettings { Template= "#column-chooser-template", HeaderTemplate = "#columnchooser-headertemplate", FooterTemplate = "#columnchooser-footertemplate", RenderCustomColumnChooser = "renderCustomColumnChooser" })
            .Columns(col =>
            {
                col.HeaderText("Order Details").TextAlign(TextAlign.Center).Columns(
                    new List<Syncfusion.EJ2.TreeGrid.TreeGridColumn>() {
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "ID", Width = "90",
                            HeaderText = "Order ID",
                            TextAlign =Syncfusion.EJ2.Grids.TextAlign.Right,
                            ShowInColumnChooser=false
                        },
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "Name", Width = "180",
                            HeaderText = "Order Name",
                            TextAlign =Syncfusion.EJ2.Grids.TextAlign.Left,
                        },
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "OrderDate", Width = "110",
                            HeaderText = "Order Date", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right,
                            Format = "yMd"
                        }
                    }).Add();
                col.HeaderText("Shipment Details").TextAlign(TextAlign.Center).Columns(
                    new List<Syncfusion.EJ2.TreeGrid.TreeGridColumn>() {
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "ShipmentCategory", Width = "160",
                            HeaderText = "Shipment Category",TextAlign =Syncfusion.EJ2.Grids.TextAlign.Left
                        },
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "ShippedDate", Width = "110",
                            HeaderText = "Shipped Date", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right,
                            Format = "yMd"
                        },
                    new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "Units", Width = "70",
                        HeaderText = "Units", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right
                    }
                }).Add();
                col.HeaderText("Price Details").TextAlign(TextAlign.Center).Columns(
                    new List<Syncfusion.EJ2.TreeGrid.TreeGridColumn>() {
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "UnitPrice", Width = "115",
                            HeaderText = "Unit Price", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right,
                            Format = "c2"
                        },
                        new Syncfusion.EJ2.TreeGrid.TreeGridColumn { Field = "Price", Width = "110",
                            HeaderText = "Total Price", Format = "C", TextAlign=Syncfusion.EJ2.Grids.TextAlign.Right
                        }
                }).Add();
            }).Toolbar(new List<string>() { "ColumnChooser" })
            .ChildMapping("Children")
            .Height(350).DataBound("OnDatabound")
            .TreeColumnIndex(1).Render()
         )
    </div>
    <script id="columnchooser-headertemplate" type="text/x-template">
        <div>
            <span id="column-chooser-text">Column Options</span>
        </div>
    </script>
    <script type="text/x-template" id="column-chooser-template">
        <div id="tree"></div>
    </script>
    <script id="columnchooser-footertemplate" type="text/x-template">
        <div id="columnChooserFooter">
            <button id="submitButton">Apply</button>
            <button id="abortButton">Close</button>
        </div>
    </script>
    <script>
        var treeObj;
        var treeData;
        // Render TreeView in the column chooser's content
        function renderCustomColumnChooser(targetLHTMLElement, columns) {
            var parentNodes = [
                { id: 1, name: 'Order Details', hasChild: true, expanded: true },
                { id: 2, name: 'Shipment Details', hasChild: true, expanded: true },
                { id: 3, name: 'Price Details', hasChild: true, expanded: true },
            ];
            if (columns && columns.length) {
                treeData = columns.map(function (column) {
                    var parentId;
                    switch (column.field) {
                        case 'Name':
                        case 'OrderDate':
                            parentId = 1;
                            break;
                        case 'ShipmentCategory':
                        case 'Units':
                        case 'ShippedDate':
                            parentId = 2;
                            break;
                        case 'UnitPrice':
                        case 'Price':
                            parentId = 3;
                            break;
                        default:
                            break;
                    }
                    return {
                        id: column.uid,
                        name: column.headerText,
                        pid: parentId,
                        isChecked: column.visible
                    };
                });
                var uniquePids = [];
                treeData.forEach(function (item) {
                    if (uniquePids.indexOf(item.pid) === -1) {
                        uniquePids.push(item.pid);
                    }
                });
                const filteredParents = parentNodes.filter(function (parent) { return uniquePids.indexOf(parent.id) !== -1 });
                treeData = treeData.concat(filteredParents);
            } else {
                treeData = [];
            }
            treeObj = new ej.navigations.TreeView({
                fields: { dataSource: treeData, id: 'id', parentID: 'pid', text: 'name', hasChildren: 'hasChild' },
                showCheckBox: true,
                nodeClicked: nodeCheck,
                keyPress: nodeCheck,
                cssClass: "no-border",
            });
            if (columns && columns.length) {
                treeObj.appendTo(targetLHTMLElement);
            } else {
                // To show text when entered mismatched column name or invalid text
                var noRecordDiv = document.createElement('div');
                noRecordDiv.innerHTML = 'No Matches Found';
                noRecordDiv.className = 'no-record-text';
                targetLHTMLElement.appendChild(noRecordDiv);
            }

        }

        // Handle checking/unchecking nodes in the TreeView (column chooser)
        function nodeCheck(args) {
            let checkedNode = [args.node];
            if (args.event.target.classList.contains('e-fullrow') || args.event.key == "Enter") {
                let getNodeDetails = treeObj.getNode(args.node);
                if (getNodeDetails.isChecked == 'true') {
                    treeObj.uncheckAll(checkedNode);
                } else {
                    treeObj.checkAll(checkedNode);
                }
            }
        }
        function OnDatabound() {
            var treegrid = document.getElementById("StackedHeader").ej2_instances[0];
            let submitButton = new ej.buttons.Button();
            submitButton.appendTo('#submitButton');
            if (document.getElementById('submitButton')) {
                (document.getElementById('submitButton')).onclick = () => {
                    columnChooserSubmit();
                };
            }
            let abortButton = new ej.buttons.Button();
            abortButton.appendTo('#abortButton');
            if (document.getElementById('abortButton')) {
                (document.getElementById('abortButton')).onclick = function () {
                    (treegrid.grid.columnChooserModule).hideDialog();
                };
            }
        }

        // Apply the column chooser selection
        function columnChooserSubmit() {
            var treegrid = document.getElementById("StackedHeader").ej2_instances[0];
            const checkedElements = [];
            const uncheckedElements = [];
            let showColumns = treegrid.getVisibleColumns().filter(function (column) { return (column.showInColumnChooser === true); });
            showColumns = showColumns.map(function (col) { return col.headerText; });
            const treeItems = document.querySelectorAll('.e-list-item');
            treeItems.forEach(function (item) {
                const itemDetails = treeObj.getNode(item);
                if (!itemDetails.hasChildren) {
                    if (item.getAttribute('aria-checked') === 'true') {
                        checkedElements.push(itemDetails.text);
                    } else {
                        uncheckedElements.push(itemDetails.text);
                    }
                }
            });
            showColumns = showColumns.filter(function (col) { uncheckedElements.indexOf(col) === -1 });
            checkedElements.forEach(item => {
                if (!showColumns.includes(item)) {
                    showColumns.push(item);
                }
            });
            var columnsToUpdate = { visibleColumns: showColumns, hiddenColumns: uncheckedElements };
            treegrid.grid.columnChooserModule.changeColumnVisibility(columnsToUpdate);
        }
    </script>
    <style>
        #StackedHeader_gridcontrol_ccdlg .e-columnChooserTemplate {
            overflow-x: auto !important;
            overflow-y: auto;
        }

            #StackedHeader_gridcontrol_ccdlg .e-columnChooserTemplate .e-ul {
                width: fit-content !important;
            }

        #StackedHeader_gridcontrol_ccdlg .e-treeview .e-text-content,
        #StackedHeader_gridcontrol_ccdlg .e-treeview .e-list-text {
            white-space: nowrap !important;
            overflow: hidden;
        }

        .no-record-text {
            padding-left: 4px;
        }

        .e-columnChooserTemplate {
            border: none;
        }
    </style>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the Stacked Header in ASP.NET MVC Tree Grid control. Explore here for more details." />
}


@section ActionDescription{
    <div id="action-description">
        This example demonstrates how to use stacked headers and a customizable column chooser in the Tree Grid component.
    </div>
}

@section Description{
    <div id="description">
        <p>The stacked header category explains the use of the <code>columns -> column</code> property to group columns under common headers, facilitating a clear and structured display of data for enhanced readability and user navigation.
            It categorizes columns into three groups: Order Details, comprising Order ID, Order Name, and Order Date; Shipment Details, comprising Shipment Category, Shipped Date, and Units; and Price Details, comprising Price per Unit and Total Price.
        </p>
        <p>The <b>Column Chooser Template</b> category highlights a customizable layout that allows users to manage column visibility, offering flexibility and improving the overall user experience.<p>
        <p>Key properties include <code>columnChooserSettings -> headerTemplate</code> for a custom header layout, <code>columnChooserSettings -> template</code> for a custom content layout,<code>columnChooserSettings -> footerTemplate</code> for a custom footer layout, and <code>enableSearching</code> to enable or disable search functionality.</p>
        <p>More information on the stacked header configuration can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/columns/column-resizing#resize-stacked-column" aria-label="documentation section">documentation<span class="sr-only">opens in a new tab</span></a> section.
        </p>
    </div>
}

@*custom code end*@
@section Title{
    <title>ASP.NET MVC Tree Grid Stacked Header Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Stacked Header in ASP.NET MVC Tree Grid Control</h1>
}
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Grids;
@using Syncfusion.EJ2.DropDowns;

@*custom code start*@

@{
    ViewData["Title"] = "LockRow";
}

@*custom code end*@

@section ControlsSection{
    <div class="col-lg-8 control-section" role="region" aria-label="TreeGrid Control section">
        <div class="control-wrapper">
            <div class="control-section">
            @{
                var dict = new Dictionary<string, object>();
                dict.Add("number", true);
                dict.Add("min", 0);
            }
            @(Html.EJS().TreeGrid("LockRow").DataSource((IEnumerable<object>)ViewData["datasource"])
                .EditSettings(edit =>
                {
                    edit.AllowEditing(true);
                    edit.Mode(Syncfusion.EJ2.TreeGrid.EditMode.Row);
                    edit.NewRowPosition(Syncfusion.EJ2.TreeGrid.RowPosition.Below);
                })
                .Toolbar(new List<string>() {  "Edit", "Update", "Cancel" })
                .Columns(col =>
                {
                    col.Field("TaskId").HeaderText("Task ID").IsPrimaryKey(true).Width(100)
                        .ValidationRules(new { required = true, number = true })
                        .TextAlign(TextAlign.Right).Add();
                    col.Field("TaskName").HeaderText("Task Name").EditType("stringedit").Width(220)
                        .ValidationRules(new { required = true }).Add();
                    col.Field("StartDate").HeaderText("Start Date").Width(130).Format("yMd")
                        .EditType("datepickeredit")
                        .ValidationRules(new { required = true, date = "M/d/yyyy" })
                        .Edit(new { @params = new { format = "M/d/yyyy" } })
                        .TextAlign(TextAlign.Right).Add();
                    col.Field("Duration").HeaderText("Duration").Width(140).EditType("numericedit")
                        .ValidationRules(dict)
                        .Edit(new { @params = new { format = "n" } })
                        .TextAlign(TextAlign.Right).Add();

                })
                .AllowPaging().ChildMapping("Children")
                .Height(350)
                .EnableHover(false).PageSettings(page=>page.PageSize(2)
                .PageSizeMode(Syncfusion.EJ2.TreeGrid.PageSizeMode.Root))
                .RowDataBound("onrowDataBound").BeginEdit("onBeginEdit").TreeColumnIndex(1)
                .Render()
           )
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section"  aria-label="Property Section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height: 50px">
                <td style="width: 30%">
                    <div>Disable Rows</div>
                </td>
                <td style="width: 50%;padding-right: 10px">
                    <div id='columnddl'>
                         @Html.EJS().MultiSelect("DisableRows").DataSource((IEnumerable<Object>)ViewData["dropdata"]).Mode(VisualMode.CheckBox).ShowDropDownIcon(true).PopupHeight("350px").Value(new List<int>() { 2, 6 }).Fields(new MultiSelectFieldSettings { Text = "text", Value = "value" }).Select("onChange").Removed("onRemove").Render()
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script>
        function onChange(e) {
            var treeGridObj = document.getElementById("LockRow").ej2_instances[0];
            treeGridObj.refresh();
        }
        function onRemove() {
            var treeGridObj = document.getElementById("LockRow").ej2_instances[0];
            treeGridObj.refresh();
        }
        function onrowDataBound(args) {
            var treeGridObj = document.getElementById("LockRow").ej2_instances[0];
            var dropdownObj = document.getElementById("DisableRows").ej2_instances[0];
            if (dropdownObj.value.indexOf(args.data['TaskId'].toString()) !== -1 || dropdownObj.value.indexOf(args.data['TaskId']) !== -1)
                ejs.base.addClass([args.row], 'disableRow'); 
            else
                ejs.base.removeClass([args.row], 'disableRow');
        }
        function onBeginEdit(args) {
            var dropdownObj = document.getElementById("DisableRows").ej2_instances[0];
            if (dropdownObj.value.indexOf(args.rowData['TaskId'].toString()) !== -1 || dropdownObj.value.indexOf(args.rowData['TaskId']) !== -1)
                args.cancel = true;
        }
    </script>
    <style>
        .material .disableRow .e-rowcell {
            color: rgba(0, 0, 0, .38) !important;
        }
        .e-multiselect {
            padding-left: 0px !important;
            padding-top: 0px !important;
        }
    </style>

    @*custom code start*@

    <style>
        .disableRow .e-rowcell,
        .fluent2 .disableRow .e-rowcell{
            color: rgba(0, 0, 0, .38) !important;
        }
        .disableRow .e-rowcell,
        .fluent2-dark .disableRow .e-rowcell{
            color: #757575 !important;
        }
        .disableRow .e-rowcell,
        .fluent2-highcontrast .disableRow .e-rowcell{
            color: #757575 !important;
        }
        .disableRow .e-rowcell,
        .fluent .disableRow .e-rowcell, .fluent-dark .disableRow .e-rowcell, .material-dark .disableRow .e-rowcell, .fabric-dark .disableRow .e-rowcell,
        .bootstrap-dark .disableRow .e-rowcell, .bootstrap5-dark .disableRow .e-rowcell, .bootstrap5\.3-dark .disableRow .e-rowcell, .highcontrast .disableRow .e-rowcell, .tailwind .disableRow .e-rowcell, .tailwind-dark .disableRow .e-rowcell, .tailwind3 .disableRow .e-rowcell, .tailwind3-dark .disableRow .e-rowcell, .material3-dark .disableRow .e-rowcell {
            color: #757575 !important;
        }
        
        .disableRow .e-rowcell,
        .material3 .disableRow .e-rowcell{
            color: rgba(0, 0, 0, .38) !important;
        }

        .disableRow .e-rowcell,
        .fabric .disableRow .e-rowcell {
            color: #c8c8c8 !important;
        }

        .disableRow .e-rowcell,
        .bootstrap .disableRow .e-rowcell, .bootstrap4 .disableRow .e-rowcell, .bootstrap5\.3 .disableRow .e-rowcell, .bootstrap5 .disableRow .e-rowcell {
            color: rgba(0, 0, 0, .35) !important;
        }
    </style>

    @*custom code end*@

}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Lock Row in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This samples demonstrates the way of preventing editing for certain row and disable the locked rows to differentiate edit and non-editable rows in Tree Grid.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The Tree Grid supports CRUD operations. This CRUD operations can be configured in Tree Grid using <code>EditSettings</code>. Also, it has different modes to manipulate the datasource.
        </p>
        <p>
            The available modes are,
        </p>
        <ul>
            <li><code>Row </code></li>
            <li><code>Cell</code></li>
            <li><code>Dialog</code></li>
        </ul>
        <p>
            In this sample, we have provided an option in property panel to prevent editing for certain rows. Using <code>BeginEdit</code>  event of Tree Grid, we prevent the editing for selected Task ID row in the dropdown and disable the corresponding row using <code>RowDataBound</code> event of Tree Grid.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Lock Row Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Lock Row in ASP.NET MVC Tree Grid Control</h1>
                }

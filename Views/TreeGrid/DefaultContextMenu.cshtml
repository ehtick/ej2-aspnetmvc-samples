@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "Selection";
}

@*custom code end*@

@section ControlsSection{
    <div class="control-section">
        @(Html.EJS().TreeGrid("Selection")
        .AllowPaging()
        .AllowSorting()
        .AllowExcelExport()
        .AllowPdfExport()
        .EditSettings(edit => edit.AllowAdding(true).AllowDeleting(true).AllowEditing(true).Mode(Syncfusion.EJ2.TreeGrid.EditMode.Row))
            .PageSettings(page => page.PageSize(10))
            .DataSource((IEnumerable<object>)ViewData["datasource"])
            .ContextMenuItems(
                new List<object>() { "SortAscending",
                                    "SortDescending", "Edit", "Delete",
                                     "Save", "Cancel", "PdfExport", "ExcelExport", "CsvExport",
                                    "FirstPage", "PrevPage", "LastPage", "NextPage","Indent", "Outdent"
                })
            .Columns(col =>
            {
                col.Field("TaskId").HeaderText("Task ID").Width(60).IsPrimaryKey(true).TextAlign(TextAlign.Right).Add();
                col.Field("TaskName").HeaderText("Task Name").Width(170).Add();
                col.Field("StartDate").HeaderText("Start Date").Format("yMd")
                    .EditType("datepickeredit")
                    .TextAlign(TextAlign.Right).Width(100).Add();
                col.Field("EndDate").HeaderText("End Date").Format("yMd")
                    .EditType("datepickeredit")
                    .TextAlign(TextAlign.Right).Width(100).Add();
                col.Field("Duration").HeaderText("Duration").Width(130).MinWidth(120)
                    .EditType("numericedit")
                    .Edit(new { @params = new { format = "n" } })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("Progress").HeaderText("Progress").Width(130).MinWidth(120)
                    .EditType("numericedit")
                    .Edit(new { @params = new { format = "n" } })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("Priority").HeaderText("Priority").Width(75).Add();
            })
            .ChildMapping("Children")
            .TreeColumnIndex(1)
            .Height(350)
            .Render()
        )
    </div>
}
@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Default ContextMenu in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the usage of context menu in Tree Grid component. Right click anywhere on the Tree Grid to view context menu.</p>
    </div>
}

@section Description{
     <p>
        Tree Grid has an option to show the context menu when right click on it. To configure the items in context menu, you should define either default or custom item in <code>ContextMenuItems</code> . Each item will be shown based on its target. 
        The default items are, 
        <br>
    </p>
     <ul>
         <li><code>Edit</code> - Edit the current record.</li>
         <li><code>Delete</code> - Delete the current record.</li>
         <li><code>Save</code> - Save the edited record.</li>
         <li><code>Cancel</code> - Cancel the edited state.</li>
         <li><code>PdfExport</code> - Export the grid as Pdf format.</li>
         <li><code>ExcelExport</code> - Export the grid as Excel format.</li>
         <li><code>CsvExport</code> - Export the grid as CSV format.</li>
         <li><code>SortAscending</code> - Sort the current column in ascending order.</li>
         <li><code>SortDescending</code> - Sort the current column in descending order.</li>
         <li><code>FirstPage</code> - Go to the first page.</li>
         <li><code>PrevPage</code> - Go to the previous page.</li>
         <li><code>LastPage</code> - Go to the last page.</li>
         <li><code>NextPage</code> - Go to the next page.</li>
         <li>
             <code>Add Row</code>
             <ul>
                 <li><code>Above</code> - Add a new row above the selected row</li>
                 <li><code>Below</code> - Add a new row below the selected row</li>
             </ul>
         </li>
         <li><code>Indent</code> - Indents the record to one level of hierarchy.</li>
         <li><code>Outdent</code> - Outdent the record to one level of hierarchy.</li>
     </ul>
    
    <br/>

    <p>
        In this demo, Context Menu feature has enabled by defining the <code>ContextMenuItems</code> property with all default items.
    </p>
    <p>
        More information about ContextMenu can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/context-menu" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>

}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Default ContextMenu Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default ContextMenu in ASP.NET MVC Tree Grid Control</h1>
                }

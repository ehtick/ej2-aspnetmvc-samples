@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "InlineEditing";
}

@*custom code end*@

@section ControlsSection{
    <div class="control-section">

        @{
            var dict = new Dictionary<string, object>();
            dict.Add("number", true);
            dict.Add("min", 0);
        }
        @(Html.EJS().TreeGrid("Editing")
            .DataSource((IEnumerable<object>)ViewData["datasource"])
            .EditSettings(edit => {
                edit.AllowAdding(true);
                edit.AllowDeleting(true);
                edit.AllowEditing(true);
				edit.Mode(Syncfusion.EJ2.TreeGrid.EditMode.Row);
                edit.NewRowPosition(Syncfusion.EJ2.TreeGrid.RowPosition.Below);
            })
            .Toolbar(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })
            .Columns(col =>
            {
                col.Field("TaskId").HeaderText("Task ID").IsPrimaryKey(true).Width(120)
                    .ValidationRules(new { required = true, number = true })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("TaskName").HeaderText("Task Name")
                    .Edit(new {
                        create = "create", 
                        read = "read",
                        write = "write"
                    })
                    .Width(230)
                    .ValidationRules(new { required = true }).Add();
                col.Field("StartDate").HeaderText("Start Date").Width(150).Format("yMd")
                    .EditType("datepickeredit")
                    .ValidationRules(new { required = true, date = "M/d/yyyy" })
                    .Edit(new { @params = new { format = "M/d/yyyy" } })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("EndDate").HeaderText("End Date").Format("yMd").TextAlign(TextAlign.Right)
                    .EditType("datepickeredit")
                    .ValidationRules(new { required = true, date = "M/d/yyyy" })
                    .Edit(new { @params = new { format = "M/d/yyyy" } })
                    .Width(150).Add();
                col.Field("Duration").HeaderText("Duration").Width("140").EditType("numericedit")
                    .ValidationRules(dict)
                    .Edit(new { @params = new { format = "n" } })
                    .TextAlign(TextAlign.Right).Add();

            })
           .Height(400)
           .ChildMapping("Children")
           .TreeColumnIndex(1).Render())
    </div>
    <script>
        var autoCompleteObj, elem;
        function create(){
            elem = document.createElement('input');
            return elem;
        }
        function read() {
            return autoCompleteObj.value;
        }
        function write(args) {
            var inst = document.getElementById("Editing").ej2_instances[0];
            autoCompleteObj = new ej.dropdowns.AutoComplete({
                dataSource: inst.grid.dataSource,
                fields: { value: 'TaskName' },
                value: args.rowData[args.column.field],
		debounceDelay: 0
            });
            autoCompleteObj.appendTo(elem);
        }
    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Edit Template in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This samples demonstrates the Tree Grid Cell Edit template feature. Using Cell Edit Template feature we have rendered the AutoComplete component for "Task Name" column</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The cell edit template is used to add a custom component for a particular column by invoking the following functions:
        </p>
        <p>The available modes are,</p>
        <ul>
            <li><code>Create </code> - It is used to create the element at the time of initialization.</li>
            <li><code>Write</code> - It is used to create the custom component or assign default value at the time of editing.</li>
            <li><code>Read</code> - It is used to read the value from the component at the time of save.</li>
            <li><code>Destroy</code> - - It is used to destroy the component.</li>
        </ul>
        <p>
           In this demo, we have rendered the AutoComplete component for "Task Name" column of Tree Grid using edit  property.
        </p>
        <p>
            More information about Cell Edit template can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/editing/template-editing" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Edit Template Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Edit Template in ASP.NET MVC Tree Grid Control</h1>
                }

@model List<EJ2MVCSampleBrowser.Models.EmployeeManagement>
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@
@{
    ViewData["Title"] = "EmployeeMgmt";
}
@*custom code end*@

@section ControlsSection{
    <div class="control-section">
        <div class="viewer-container">
            <div class="viewer-row">
                <label for="viewer" class="viewer-label">Select Viewer Role:</label>
                <div id="role-selection" class="dropdown-container">
                    @Html.EJS().DropDownList("view").Placeholder("Select a View").PopupHeight("200px").Width("165px").DataSource((IEnumerable<object>)ViewBag.data).Change("valueChange").Value((string)ViewBag.value).Render()
                </div>
            </div>
        </div>
        @(Html.EJS().TreeGrid("EmployeeTreeGrid").AllowSorting().Height(400).AllowFiltering().EnableHover().GridLines(GridLine.Both).QueryCellInfo("onQueryCellInfo")
    .DataSource((IEnumerable<object>)ViewBag.data1)
    .ChildMapping("Children")
    .TreeColumnIndex(0)
    .Columns(col =>
    {
        col.Field("ID").HeaderText("ID").Width(200).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
        col.Field("EmployeeName").HeaderText("Name").Template("#employeeTemplate").HeaderTemplate("#employeeHeaderTemplate").Width(250).ClipMode(ClipMode.EllipsisWithTooltip).Add();
        col.Field("Location").Template("#flagTemplate").HeaderText("Location").Width(200).ClipMode(ClipMode.EllipsisWithTooltip).Add();
        col.Field("JoinDate").HeaderText("Date Joined").Format("yMd").Type("date").Width(180).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
        col.Field("Salary").HeaderText("Salary Per Month").Format("C0").Width(220).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
        col.Field("Email").Template("#emailTemplate").HeaderText("Email").Width(200).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Center).ClipMode(ClipMode.EllipsisWithTooltip).Add();
    })

    .FilterSettings(filter => filter.Type(Syncfusion.EJ2.TreeGrid.FilterType.Menu).HierarchyMode(Syncfusion.EJ2.TreeGrid.FilterHierarchyMode.None))
    .PageSettings(pager => pager.PageSize(10))
    .Render())
    </div>

}

<script type="text/javascript">
    function valueChange(args) {
        var treegridObj = document.getElementById('EmployeeTreeGrid').ej2_instances[0];
        if(treegridObj) {
            treegridObj.clearFiltering();
            treegridObj.clearSorting();
            var role = args.value;
            var columns = [
                { field: "ID", headerText: "ID", width: 200, textAlign: "Left" },
                {
                    field: "EmployeeName",
                    headerText: "Name",
                    width: 250,
                    template: "#employeeTemplate",
                    clipMode: 'EllipsisWithTooltip',
                    headerTemplate: "#employeeHeaderTemplate",
                }
            ];
            switch (role) {
                case "HR":
                    columns.push(
                        { field: "Location", headerText: "Location", width: 200, template: "#flagTemplate", },
                        { field: "JoinDate", headerText: "Date Joined", width: 180, format: { skeleton: 'yMd', type: 'date' }, textAlign: "Right" },
                        { field: "Salary", headerText: "Salary", width: 180, format: "C0", textAlign: "Right" },
                        { field: "Email", headerText: "Email", width: 200, template: "#emailTemplate", clipMode: 'EllipsisWithTooltip', textAlign: "Center" }
                    );
                    break;
                case "Employee":
                    columns.push(
                        { field: "Status", headerText: "Presence", width: 200, template: "#statusTemplate", textAlign: "Center" },
                        { field: "WorkMode", headerText: "Work Mode", clipMode: 'EllipsisWithTooltip', width: 230 },
                        { field: "Email", headerText: "Email", width: 200, template: "#emailTemplate", clipMode: 'EllipsisWithTooltip',textAlign: "Center"}
                    );
                    break;
                case "Help Desk":
                    columns.push(
                        { field: "Status", headerText: "Presence", width: 200, template: "#statusTemplate", textAlign: "Center" },
                        { field: "LeaveAvailability", headerText: "Leave Availability", width: 400, template: "#leaveAvailabilityTemplate", textAlign: "Center", allowFiltering: false },
                        { field: "LeaveCount", headerText: `Leave Taken in ${new Date().getFullYear()}`, width: 230, textAlign: "Center" }
                    );
                    break;
                case "Project Management":
                    columns.push(
                        { field: "Department", headerText: "Department", width: 200, clipMode: 'EllipsisWithTooltip' },
                        { field: "ProjectDetails", headerText: "Project Details", clipMode: 'EllipsisWithTooltip', width: 230},
                        { field: "ProjectStatus", headerText: "Project Status", width: 200, clipMode: 'EllipsisWithTooltip' },
                        { field: "Email", headerText: "Email", width: 200, template: "#emailTemplate", textAlign: "Center", clipMode: 'EllipsisWithTooltip' }
                    );
                    break;
            }
            treegridObj.columns = columns;
            treegridObj.refresh();
        }
    }
</script>

<script id="employeeTemplate" type="text/x-template">
    <td class="employee-cell">
        <div class="employee-content">
            <img src="../Content/images/treegrid/${FullName}.png" alt="${FullName}" class="employee-img" />
            <div class="employee-info">
                <span class="employee-name">${EmployeeName}</span>
                <span class="employee-title">${JobTitle}</span>
            </div>
        </div>
    </td>
</script>

<script id="employeeHeaderTemplate" type="text/x-template">
    <img src="../Content/images/treegrid/Resources.png" alt="Name" width="20" height="20" style="padding-bottom: 1px" class="resources" />
    <span>&nbsp;Name</span>
</script>

<script id="flagTemplate" type="text/x-template">
    <div class="flag-container">
        <img src="../Content/images/treegrid/${Location}.png" class="flag-img" alt="${Location}" />
    </div>
    <div class="flag-text">${Location}</div>
</script>

<script id="emailTemplate" type="text/x-template">
    <td class="email-cell">
        <a href="mailto:${Email}" class="email-link">${Email}</a>
    </td>
</script>

<script id="statusTemplate" type="text/x-template">
    <div class="status-container">
        <span class="statustxt">${Status}</span>
    </div>
</script>

<script id="leaveAvailabilityTemplate" type="text/x-template">
    <div class="leave-bar-container">
        <div class="leave-bar">
            <span class="leave-label">Casual</span>
            <div class="bar casual"></div>
        </div>
        <div class="separator"></div>
        <div class="leave-bar">
            <span class="leave-label">Earned</span>
            <div class="bar earned"></div>
        </div>
        <div class="separator"></div>
        <div class="leave-bar">
            <span class="leave-label">Sick</span>
            <div class="bar sick"></div>
        </div>
    </div>
</script>

<script type="text/javascript">
    function onQueryCellInfo(args) {
        if (args.column.field === "Status") {
            var status = args.data.Status;
            var cell = args.cell;
            const bgColor = status === 'Available' ? '#ccffcc' : status === 'Busy' ? '#ffd09d' : '#ffd7cc';
            const color = status === 'Available' ? '#00cc00' : status === 'Busy' ? '#ff8707' : '#e60000';
            args.cell.querySelector('.statustxt').style.backgroundColor = bgColor;
            args.cell.querySelector('.statustxt').style.color = color;
            args.cell.querySelector('.statustxt').style.borderRadius = "4px";
            args.cell.querySelector('.statustxt').style.padding = "0 4px";
            args.cell.querySelector('.statustxt').style.fontSize = "12px";
            args.cell.querySelector('.statustxt').style.textAlign = "center";
        }
        else if (args.column.field === 'LeaveAvailability') {
            var data = args.data;
            var casual = data.LeaveAvailability.Casual;
            var earned = data.LeaveAvailability.Earned;
            var sick = data.LeaveAvailability.Sick;

            var casualEl = args.cell.querySelector('.bar.casual');
            var earnedEl = args.cell.querySelector('.bar.earned');
            var sickEl = args.cell.querySelector('.bar.sick');

            if (casualEl) updateBar(casualEl, casual);
            if (earnedEl) updateBar(earnedEl, earned);
            if (sickEl) updateBar(sickEl, sick);
        }
    }

    function updateBar(barEl, value) {
        var percent = (value / 12) * 100;

        barEl.innerHTML = `
                <div class="bar-fill" style="width:${percent}%;"></div>
                <div class="barlabel">${value}</div>
            `;

        var fillEl = barEl.querySelector('.bar-fill');
        fillEl.classList.remove('low', 'medium', 'high');

        if (value > 8) fillEl.classList.add('high');
        else if (value > 4) fillEl.classList.add('medium');
        else fillEl.classList.add('low');
    }
</script>

<script id="leaveAvailabilityTemplate" type="text/x-template">
    <div class="leave-bar-container">
        <div class="leave-bar">
            <span class="leave-label">Casual</span>
            <div class="bar casual"></div>
        </div>
        <div class="separator"></div>
        <div class="leave-bar">
            <span class="leave-label">Earned</span>
            <div class="bar earned"></div>
        </div>
        <div class="separator"></div>
        <div class="leave-bar">
            <span class="leave-label">Sick</span>
            <div class="bar sick"></div>
        </div>
    </div>
</script>

<script id="leaveCountHeaderTemplate" type="text/x-template">
    Leave Taken (
    <span id="leaveYear"></span>)
</script>

@*custom code start*@

<style>
    #EmployeeTreeGrid .e-mail,
    #EmployeeTreeGrid .e-icon-userlogin,
    #EmployeeTreeGrid .e-location,
    #EmployeeTreeGrid .e-icon-calender {
        margin-right: 5px;
        font-size: 12px !important;
    }

    /* Light Themes */
    .tailwind #EmployeeTreeGrid .email-link,
    .tailwind3 #EmployeeTreeGrid .email-link,
    .bootstrap #EmployeeTreeGrid .email-link,
    .bootstrap4 #EmployeeTreeGrid .email-link,
    .bootstrap5 #EmployeeTreeGrid .email-link,
    .fluent #EmployeeTreeGrid .email-link,
    .fluent2 #EmployeeTreeGrid .email-link,
    .fluent2-highcontrast #EmployeeTreeGrid .email-link,
    .highcontrast #EmployeeTreeGrid .email-link,
    .material #EmployeeTreeGrid .email-link,
    .material3 #EmployeeTreeGrid .email-link,
    .fabric #EmployeeTreeGrid .email-link {
        background-color: #ebf1ff;
        font-size: xx-small;
    }

    .tailwind #EmployeeTreeGrid .employee-title,
    .tailwind3 #EmployeeTreeGrid .employee-title,
    .bootstrap #EmployeeTreeGrid .employee-title,
    .bootstrap4 #EmployeeTreeGrid .employee-title,
    .bootstrap5 #EmployeeTreeGrid .employee-title,
    .fluent #EmployeeTreeGrid .employee-title,
    .fluent2 #EmployeeTreeGrid .employee-title,
    .fluent2-highcontrast #EmployeeTreeGrid .employee-title,
    .highcontrast #EmployeeTreeGrid .employee-title,
    .material #EmployeeTreeGrid .employee-title,
    .material3 #EmployeeTreeGrid .employee-title,
    .fabric #EmployeeTreeGrid .employee-title {
        color: gray;
    }

    /* Dark Themes */
    .tailwind-dark #EmployeeTreeGrid .email-link,
    .tailwind3-dark #EmployeeTreeGrid .email-link,
    .bootstrap-dark #EmployeeTreeGrid .email-link,
    .bootstrap5-dark #EmployeeTreeGrid .email-link,
    .fluent-dark #EmployeeTreeGrid .email-link,
    .fluent2-dark #EmployeeTreeGrid .email-link,
    .material-dark #EmployeeTreeGrid .email-link,
    .material3-dark #EmployeeTreeGrid .email-link,
    .fabric-dark #EmployeeTreeGrid .email-link {
        background-color: #000000aa;
        color: #6179ff;
        font-size: xx-small;
    }

    .tailwind-dark #EmployeeTreeGrid .employee-title,
    .tailwind3-dark #EmployeeTreeGrid .employee-title,
    .bootstrap-dark #EmployeeTreeGrid .employee-title,
    .bootstrap5-dark #EmployeeTreeGrid .employee-title,
    .fluent-dark #EmployeeTreeGrid .employee-title,
    .fluent2-dark #EmployeeTreeGrid .employee-title,
    .material-dark #EmployeeTreeGrid .employee-title,
    .material3-dark #EmployeeTreeGrid .employee-title,
    .fabric-dark #EmployeeTreeGrid .employee-title {
        color: lightgray;
    }

    #EmployeeTreeGrid .e-headertext,
    #EmployeeTreeGrid .e-headercelldiv {
        font-size: medium;
    }

    #EmployeeTreeGrid .employee-cell {
        padding: 8px 10px;
    }

    #EmployeeTreeGrid .employee-content {
        display: flex;
        align-items: center;
    }

    #EmployeeTreeGrid .employee-img {
        border-radius: 50%;
        margin: 0 10px;
        width: 30px;
        height: 30px;
    }

    #EmployeeTreeGrid .employee-info {
        display: flex;
        flex-direction: column;
    }

    #EmployeeTreeGrid .employee-name {
        font-size: 14px;
        font-weight: 500;
    }

    #EmployeeTreeGrid .employee-title {
        font-size: 10px;
    }

    #EmployeeTreeGrid .flag-container {
        display: inline-block;
    }

    #EmployeeTreeGrid .flag-img {
        width: 20px;
        height: 13px;
    }

    #EmployeeTreeGrid .flag-text {
        display: inline-block;
        padding: 0 6px;
        vertical-align: middle;
    }

    #EmployeeTreeGrid .email-cell {
        padding: 8px 10px;
    }

    #EmployeeTreeGrid .email-link {
        font-size: 13px;
        padding: 4px 8px;
    }

    .fluent2,
    .fluent2-dark,
    .fluent2-highcontrast {
        #EmployeeTreeGrid #columnddl .e-input-group

    {
        width: 140px !important;
    }

    }

    #EmployeeTreeGrid .leave-bar-container {
        display: flex;
        justify-content: center;
        gap: 8px;
        padding: 2px 0;
    }

    #EmployeeTreeGrid .leave-bar {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    #EmployeeTreeGrid .leave-label {
        text-align: right;
    }

    #EmployeeTreeGrid .bar {
        width: 50px;
        height: 15px;
        background-color: #eee;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 13px;
        font-weight: 500;
        color: #000000;
        padding: 6px 4px;
    }

    #EmployeeTreeGrid .barlabel {
        position: absolute;
        z-index: 1;
        pointer-events: none;
    }

    #EmployeeTreeGrid .bar-fill {
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

        #EmployeeTreeGrid .bar-fill.low {
            background-color: #df2222;
        }

        #EmployeeTreeGrid .bar-fill.medium {
            background-color: #ffc400;
        }

        #EmployeeTreeGrid .bar-fill.high {
            background-color: #00b300;
        }

    #EmployeeTreeGrid .separator {
        width: 1px;
        background-color: #ccc;
        margin: 0 8px;
    }

    .viewer-container {
        margin: 10px;
        
    }

    .viewer-row {
        display: flex;
        align-items: center;
    }

    .viewer-label {
        margin-right: 10px;
        font-weight: bold;
    }

    .dropdown-container {
        width: 300px;
    }
</style>
@*custom code end*@

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates role-based rendering in the TreeGrid." />
}


@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases the Syncfusion® Tree Grid. It presents comprehensive employee information customized for various viewer roles: HR, employee, help desk, and project management. 
            The application uses a structured employee dataset with profiles, work modes, leave balances, and other relevant data.
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            This section highlights dynamic column generation and custom templates to present data that is specific and
            relevant to each viewer role. Features such as <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/sorting">Sorting</a>,
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/filtering/filtering#filter-hierarchy-modes">Filtering with hierarchical support</a> and
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/columns/columns-mvc">Column formatting</a> are seamlessly integrated. The Tree Grid
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/columns/column-template">Column template</a> is utilized to render visual elements like progress bars within cells, further
            enhancing the user experience. The Tree Grid flexibility and customization capabilities make it a powerful tool for organizational data representation.
        </p>

        <p>
            <br /> More information about Tree Grid instantiation can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/getting-started-mvc">
                documentation section
            </a>.
        </p>
    </div>
}

@*custom code end*@
@section Title{
    <title>ASP.NET MVC Tree Grid Employee Management Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Employee Management in ASP.NET MVC Tree Grid Control</h1>
}

@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "Exporting";
}
@*custom code end*@

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @(Html.EJS().TreeGrid("Exporting")
            .AllowExcelExport()
            .AllowPdfExport()
            .Height(400)
            .DataSource((IEnumerable<object>)ViewData["datasource"])
            .Toolbar(new List<string> { "ExcelExport" , "CsvExport", "PdfExport" })
            .Columns(col =>
            {
                col.Field("TaskId").HeaderText("Task ID").Width(70).TextAlign(TextAlign.Right).Add();
                col.Field("TaskName").HeaderText("Task Name").Width(200).Add();
                col.Field("StartDate").HeaderText("Start Date").Format("yMd").TextAlign(TextAlign.Right).Width(90).Add();
                col.Field("EndDate").HeaderText("End Date").Format("yMd").TextAlign(TextAlign.Right).Width(90).Add();
                col.Field("Duration").HeaderText("Duration").Width(80).TextAlign(TextAlign.Right).Add();
                col.Field("Progress").HeaderText("Progress").Width(80).TextAlign(TextAlign.Right).Add();
                col.Field("Priority").HeaderText("Priority").Width(90).Add();
            })
            .ToolbarClick("onToolbarClick")
            .ChildMapping("Children")
            .TreeColumnIndex(1)
            .Render()
        )
        </div>
    </div>

    <div class="col-lg-2 property-section">
        <table id="property" title="Export Customization" style="width: 200px">
            <tr>
                <td style="width: 20px;">
                    @Html.EJS().CheckBox("checked").Change("onChange").Checked(true).Label("Persist collapsed state").Render()
                </td>
            </tr>
        </table>
    </div>

    <style>
        #property td div.e-checkbox-wrapper {
            padding-left: 0px !important;
            padding-top: 0px !important;
        }
    </style>

    <script>
        var collapsedStatePersist = true;
        function onToolbarClick(args) {
            if (args.item.id === this.grid.element.id + '_excelexport') {
                var excelExportProperties = {
                    isCollapsedStatePersist: collapsedStatePersist
                };
                this.excelExport(excelExportProperties);
            } else if (args.item.id === this.grid.element.id + '_pdfexport') {
                if (this.enableRtl === true && this.locale === 'ar') {
                    var innercontent = 'You need custom fonts to export Arabic characters, refer this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/pdf-export/#add-custom-font-for-pdf-exporting" aria-label="documentation section" >documentation section</a>';
                    ej.popups.DialogUtility.alert({ content: innercontent });
                } else {
                    var pdfExportProperties = {
                        isCollapsedStatePersist: collapsedStatePersist
                    };
                    this.pdfExport(pdfExportProperties);
                }
            } else if (args.item.id === this.grid.element.id + '_csvexport') {
                this.csvExport();
            }
        }

        function onChange(args) {
            if (args.checked) {
                collapsedStatePersist = true;
            }
            else {
                collapsedStatePersist = false;
            }
        }

    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Default Exporting in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the client-side exporting of the Tree Grid, which allows you to export its data to the Excel, Pdf and CSV formats. Use the toolbar buttons to export TreeGrid data to desired format.</p>
        <p>By using the Persist collapsed state checkbox we can persist the Expand/Collpase state of Tree Grid in exported document </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
           Tree Grid supports client-side exporting which allows you to export its data to the Excel, Pdf and CSV formats. 
        </p>
        <p>
            In this demo, for the toolbar items of exporting, we have defined actions in <code>ToolbarClick</code> event to export the Tree Grid data using the <code>excelExport</code>, <code>pdfExport</code> and <code>csvExport</code> methods
        </p>
        <p>
            More information on the  
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/treegrid/pdf-export/pdf-export" aria-label="pdfexport">
            Pdf exporting <span class="sr-only">opens in a new tab</span></a> and
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/treegrid/excel-export/excel-export" aria-label="excelexport">
            Excel exporting<span class="sr-only">opens in a new tab</span></a>
            can be found in documentation section.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Default Exporting Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Exporting in ASP.NET MVC Tree Grid Control</h1>
                }
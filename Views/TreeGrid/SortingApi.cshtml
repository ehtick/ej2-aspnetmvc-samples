@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "SortingApi";
}

@*custom code end*@

@section ControlsSection{
<div class="col-lg-9 control-section">
     <div class="control-section">
        @(Html.EJS().TreeGrid("SortingApi")
            .DataSource((IEnumerable<object>)ViewData["datasource"]).Columns(col =>
            {
                col.Field("TaskId").HeaderText("Task ID").Width(120).TextAlign(TextAlign.Right).Add();
                col.Field("TaskName").HeaderText("Task Name").Width(200).Add();
                col.Field("StartDate").HeaderText("Start Date").Format("yMd").TextAlign(TextAlign.Right).Width(120).Add();
                col.Field("Duration").HeaderText("Duration").Width(120).TextAlign(TextAlign.Right).Add();
                col.Field("Progress").HeaderText("Progress").Width(110).TextAlign(TextAlign.Right).Add();

            })
            .Height(410)
            .AllowSorting()
            .ChildMapping("Children")
            .TreeColumnIndex(1)
            .Render()
        );
    </div>
</div>
  <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height: 50px">
                <td style="width: 20%">
                    <div>Column</div>
                </td>
                <td style="width: 150%;padding-right: 10px">
                    @Html.EJS().DropDownList("Column").DataSource((IEnumerable<object>)ViewData["dd"]).Width("135px").Value("TaskId").Fields(new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "name", Value = "id" }).Render()
                </td>
            </tr>
            <tr style="height: 20">
                <td style="width: 30%">
                    <div>Direction</div>
                </td>
                <td style="width: 150%;padding-right: 10px">
                    @Html.EJS().DropDownList("Direction").DataSource((IEnumerable<object>)ViewData["index"]).Width("135px").Value("Ascending").Fields(new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "name", Value = "id" }).Render()
                </td>
            </tr>
            <tr>
            <td class="left-side" style="padding-top:10px; padding-right: 10px">
                @Html.EJS().Button("sort").Content("Sort").Render()
            </td>
            <td style="padding-top:10px; padding-right:10px">
                @Html.EJS().Button("clear").Content("Clear").Render()
            </td>
        </tr>
        </table>
    </div>
      <script>
        document.getElementById("sort").addEventListener("click", function() {
            var treegrid = document.getElementById("SortingApi").ej2_instances[0];
            var dropDownColumns = document.getElementById("Column").ej2_instances[0];
            var dropDownDirection = document.getElementById("Direction").ej2_instances[0];
            var columnName= dropDownColumns.value;
            var sortType = dropDownDirection.value;
            treegrid.sortByColumn(columnName, sortType, false); 
        })
        document.getElementById("clear").addEventListener("click", function () {
            var treegrid = document.getElementById("SortingApi").ej2_instances[0];
            treegrid.clearSorting();
        })
    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Sorting API in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }

@section ActionDescription{
    <div id="action-description">
        <p> This sample demonstrates the usage of sorting API in Tree Grid. Through property panel, we can sort/unsort the columns using corresponding sorting API.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            Sorting feature enables us to order the data in a particular direction. It can be enabled by setting the <code>AllowSorting</code> as true.
        </p>
        <p class="e-treegrid" style="border:none">To sort a Tree Grid column simply click the column header. The icons <span class="e-icons e-icon-ascending"></span>(ascending)
            and <span class="e-icons e-icon-descending"></span>(descending) specifies the sort direction of a column.</p>
        <p>By default, multi-sorting is enabled in Tree Grid, to sort multiple column hold <strong>CTRL</strong> key and click the column
            header. To clear sort for a column, hold <strong>SHIFT</strong> key and click the column header.</p>
        <p>
            While using Tree Grid in a touch device, you have an option for multi sorting in single tap on the Tree Grid header. By tapping on
            the Tree Grid header, it will show the toggle button in small popup with sort icon. Now tap the button to enable the multi-sorting
            in single tap.
        </p>
        <p>In this demo, select the column and direction from the properties panel then click the Sort button. Use the Clear button
            to remove sort for the selected column.
        </p>
        <p>More information on the sorting feature configuration can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/sorting" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.</p>
    </div>

}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Sorting API Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Sorting API in ASP.NET MVC Tree Grid Control</h1>
                }

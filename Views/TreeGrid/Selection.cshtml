@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "Selection";
}

@*custom code end*@

@section ControlsSection{    
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            @(Html.EJS().TreeGrid("TreeGrid")
                .AllowPaging()
                .DataSource((IEnumerable<object>)ViewData["datasource"])
                .SelectionSettings(sel=> {
                    sel.Type(SelectionType.Multiple);
                })
                .AllowSelection()
                .Columns(col =>
                {
                    col.Field("TaskId").HeaderText("Task ID").Width(80).TextAlign(TextAlign.Right).Add();
                    col.Field("TaskName").HeaderText("Task Name").Width(200).Add();
                    col.Field("StartDate").HeaderText("Start Date").Format("yMd").TextAlign(TextAlign.Right).Width(100).Add();
                    col.Field("Duration").HeaderText("Duration").Width(90).TextAlign(TextAlign.Right).Add();
                    col.Field("Progress").HeaderText("Progress").Width(90).TextAlign(TextAlign.Right).Add();
                })
                .PageSettings(p=>p.PageSize(10))
                .ChildMapping("Children")
                .Height(350)
                .TreeColumnIndex(1)
                .Render()
            )
        </div>
    </div>

   <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr>
                <td style="width: 30%">
                    <div style="padding-top: 7px">Selection Type</div>
                </td>
                <td style="width: 70%;padding-right: 10px">
                     <div id="selectiondd1">
                        @Html.EJS().DropDownList("type").DataSource((IEnumerable<object>)ViewData["typedata"]).PopupHeight("220px").Index(1).Fields(new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "type", Value = "id" }).Width("110px").Change("onTypeChange").Render()        
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 30%">
                    <div>
                        Selection Mode
                    </div>
                </td>
                <td style="width: 70%">
                    <div style="padding-right: 10px;padding-bottom: 10px"> 
                        @Html.EJS().DropDownList("mode").DataSource((IEnumerable<object>)ViewData["modedata"]).PopupHeight("220px").Index(0).Fields(new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "mode", Value = "id" }).Width("110px").Change("onModeChange").Render()        
                    </div>
                </td>
            </tr>
            <tr id='cellselection' style='display: none'>
                <td style="width: 30%;">
                    <div>
                        Cell Selection Mode
                    </div>
                </td>
                <td style="width: 70%;">
                    <div style="padding-right: 10px;padding-bottom: 10px"> 
                        @Html.EJS().DropDownList("cellmode").DataSource((IEnumerable<object>)ViewData["cellmodedata"]).PopupHeight("220px").Index(0).Fields(new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "cellmode", Value = "id" }).Width("110px").Change("onCellModeChange").Render()
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script>
        function onTypeChange(e) {
            var type = e.value;
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            var dropDownMode = document.getElementById("mode").ej2_instances[0];
            var mode = dropDownMode.value;
            treegrid.selectionSettings.type = type;
            if (type === 'Multiple' && mode === 'Cell') {
                document.getElementById('cellselection').style.display = 'table-row';
            }
            else {
                document.getElementById('cellselection').style.display = 'none';
            }

        }

        function onModeChange(e) {
            var mode = e.value;
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            var dropDownType = document.getElementById("type").ej2_instances[0];
            var type = dropDownType.value;
            treegrid.selectionSettings.mode = mode;
            if (type === 'Multiple' && mode === 'Cell') {
                document.getElementById('cellselection').style.display = 'table-row';
            }
            else {
                document.getElementById('cellselection').style.display = 'none';
            }

        }

        function onCellModeChange(e) {
            var treegrid = document.getElementById("TreeGrid").ej2_instances[0];
            treegrid.selectionSettings.cellSelectionMode = e.value;
        }

    </script>

}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Default Selection in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates the selection feature in Grid, which allows you to select row or simple mouse down or keyboard interaction.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>Selection provides an interactive support to highlight the row or cell that you select. Selection can be done through a simple Mouse down or Keyboard interaction. To enable selection, set <code>AllowSelection</code> as true.</p>
        <p>
            Tree Grid supports two types of selection which can be set using
            <code>
                SelectionSettings->Type
            </code> property. They are,
        </p>
        <ul>
            <li><code>Single</code> - Enabled by default. Allows the user to select single row/cell at a time.</li>
            <li><code>Multiple</code> - Allows the user to select more than one row/cell at a time.</li>
        </ul>
        <p>
            Also, supports three modes of selection which can be set using
            <code>
                SelectionSettings->Mode
            </code> property. They are,
        </p>
        <ul>
            <li><code>Row</code> - Enabled by default. Enables the row selection in Tree Grid.</li>
            <li><code>Cell</code> - Enables the cell selection in Tree Grid.</li>
            <li>
                <code>Both</code> - Enables both the row and cell selection in Tree Grid.
                Clicking any cell will select the both row and cell simultaneously.
            </li>
        </ul>
        <p>
            The Tree Grid supports two types of cell selection mode that can be set by using the
            <code>
                SelectionSettings->CellSelectionMode
            </code> property. They are,
        </p>
        <ul>
            <li>
                <code>Flow</code> - The Flow value is set by default. The range of cells are selected between the start index
                and end index that includes in between cells of rows.
            </li>
            <li>
                <code>Box</code> - Range of cells are selected from the start and
                end column indexes that includes in between cells of rows within the range.
            </li>
        </ul>
        <p>
            To perform the multi-selection, hold <strong>CTRL</strong> key and click the desired rows/cells.
            To select range of rows/cells, hold <strong>SHIFT</strong> key and click the rows/cells.
        </p>
        <p>
            While using the Tree Grid in a touch device environment, there is an option for multi-selection
            through single tap on the row and it will show a popup with the multi-selection symbol.
            Tap the icon to enable multi-selection in a single tap.
        </p>
        <p>
            More information on the selection configuration can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/selection/selection" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Default Selection Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Selection in ASP.NET MVC Tree Grid Control</h1>
                }

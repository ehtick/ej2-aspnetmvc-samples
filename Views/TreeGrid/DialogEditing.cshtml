@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "InlineEditing";
}
@*custom code end*@

@section ControlsSection{
    @{ 
        var dict = new Dictionary<string, object>();
        dict.Add("number", true);
        dict.Add("min", 0);
    }
    <div class="control-section">
        @(Html.EJS().TreeGrid("Editing")
            .DataSource((IEnumerable<object>)ViewData["datasource"])
            .EditSettings(edit => {
                edit.AllowAdding(true);
                edit.AllowDeleting(true);
                edit.AllowEditing(true);
                edit.Mode(Syncfusion.EJ2.TreeGrid.EditMode.Dialog);
                edit.NewRowPosition(Syncfusion.EJ2.TreeGrid.RowPosition.Below);
            })
            .Toolbar(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })
            .Columns(col =>
            {
                col.Field("TaskId").HeaderText("Task ID").IsPrimaryKey(true).Width(120)
                    .ValidationRules(new { required = true, number = true })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("TaskName").HeaderText("Task Name").EditType("stringedit").Width(225)
                    .ValidationRules(new { required = true }).Add();
                col.Field("StartDate").HeaderText("Start Date").Width(150).Format("yMd")
                    .EditType("datepickeredit")
                    .ValidationRules(new { required = true, date = "M/d/yyyy" })
                    .Edit(new { @params = new { format = "M/d/yyyy" } })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("EndDate").HeaderText("End Date").Format("yMd").TextAlign(TextAlign.Right)
                    .EditType("datepickeredit")
                    .ValidationRules(new { required = true, date = "M/d/yyyy" })
                    .Edit(new { @params = new { format = "M/d/yyyy" } })
                    .Width(150).Add();
                col.Field("Duration").HeaderText("Duration").Width(110).EditType("numericedit")
                    .ValidationRules(dict)
                    .Edit(new { @params = new { format = "n" } })
                    .TextAlign(TextAlign.Right).Add();
                col.Field("Progress").HeaderText("Progress").Width(110).EditType("numericedit")
                    .ValidationRules(dict)
                    .Edit(new { @params = new { format = "n" } })
                    .TextAlign(TextAlign.Right).Add();

            })
           .Height(400)
           .ChildMapping("Children")
           .TreeColumnIndex(1).Render());
    </div>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Dialog Editing in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates CRUD operations in Tree Grid. You can perform CRUD operations as follows,</p>
        <ul>
            <li><code>Add </code> - To add new record, click Add toolbar button.</li>
            <li><code>Edit</code> - To edit record, double click a row or click toolbar Edit button after selected a row.</li>
            <li><code>Delete</code> - To delete record, click toolbar Delete button after selected a row.</li>
            <li><code>Update, Cancel</code> - You can save or discard changes by click toolbar Update and Cancel button respectively.</li>
        </ul>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The Tree Grid supports CRUD operations. This CRUD operations can be configured in Tree Grid using EditSettings. Also, it has different modes to manipulate the datasource.
        </p>
        <p>
            The available modes are,
        </p>
        <ul>
            <li><code>Row </code></li>
            <li><code>Cell</code></li>
            <li><code>Dialog</code></li>
        </ul>
        <p>
            In this demo, Dialog mode is enabled for editing by defining <code>EditSettings=>Mode</code> as <code>Dialog</code>. You can start editing by double clicking a row or clicking on toolbar's Edit button, then the currently selected row will be shown on a dialog and you can change the row values and save edited data to the datasource.
            More information on the dialog editing can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/editing/dialog-editing" aria-label="documentation section" >documentation<span class="sr-only">opens in a new tab</span></a> section.
        </p>
    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Dialog Editing Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Dialog Editing in ASP.NET MVC Tree Grid Control</h1>
                }
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewData["Title"] = "GridLines";
}

@*custom code end*@

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="control-section">
            @(Html.EJS().TreeGrid("GridLines")
            .DataSource((IEnumerable<object>)ViewData["datasource"])
            .Columns(col =>
            {
           col.Field("TaskId").HeaderText("Task ID").Width(80).TextAlign(TextAlign.Right).Add();
           col.Field("TaskName").HeaderText("Task Name").Width(200).Add();
           col.Field("StartDate").HeaderText("Start Date").Format("yMd").TextAlign(TextAlign.Right).Width(100).Add();
           col.Field("Duration").HeaderText("Duration").Width(90).TextAlign(TextAlign.Right).Add();
           col.Field("Progress").HeaderText("Progress").Width(90).TextAlign(TextAlign.Right).Add();

            })
           .AllowPaging()
            .PageSettings(page=>page.PageSize(10))
            .Height(350)
           .ChildMapping("Children")
           .TreeColumnIndex(1).Render());
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height: 50px">
                <td style="width: 30%">
                    <div style="padding-left:1px">Grid Lines</div>
                </td>
                <td style="width: 50%">
                    @Html.EJS().DropDownList("Lines").DataSource((IEnumerable<object>)ViewData["dropdata"]).Width("130").Value("Horizontal").Fields(new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings { Text = "type", Value = "id" }).Change("onChange").Render()
                </td>
            </tr>
        </table>
    </div>
    <script>
        function onChange(args) {
            var treegrid = document.getElementById("GridLines").ej2_instances[0];
            var lines = args.value;
            treegrid.gridLines = lines;
        }
    </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Grid Lines in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This demo explains the default functionalities of filtering and how to define the template for filter bar in Syncfusion Essential JS2 Tree Grid
        </p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The <code>gridLines</code> property is used to control the line visibility that separates the rows and columns.
            Tree Grid allows us to display the following grid lines,
        </p>
        <ul>
            <li><code>Default</code> - Shows the Horizontal line.</li>
            <li><code>None</code> - Shows no line.</li>
            <li><code>Both</code> - Shows both Horizontal and Vertical lines.</li>
            <li><code>Horizontal</code> - Shows the Horizontal line.</li>
            <li><code>Vertical</code> - Shows the Vertical line.</li>
        </ul>
        <p>
            In this demo, you can modify the visibility of gridlines by selecting values in the dropdown.
        </p>
        <p>
            More information on the gridLines configuration can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/cell/cell" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
        </p>

    </div>
}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Grid Lines Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Grid Lines in ASP.NET MVC Tree Grid Control</h1>
                }

@using Syncfusion.EJ2
@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2.Grids
@{
    ViewData["Title"] = "FrozenAPI";
}

@section ControlsSection{
    <div class="control-section">
        <div class="grid-freezeprop">
            <div class="grid-freezecol">
                <div class="grid-freezecol">
                    <span>
                        Column
                    </span>
                </div>
                <div class="grid-freezecol">
                    @Html.EJS().DropDownList("column").DataSource((IEnumerable<object>)ViewData["columns"]).Change("columnChange").Value("TaskId").Fields(field => { field.Value("id").Text("name"); }).Render()
                </div>
            </div>
            <div class="grid-freezecol">
                <div class="grid-freezecol">
                    <span>
                        Freeze Direction
                    </span>
                </div>
                <div class="grid-freezecol">
                    @Html.EJS().DropDownList("FreezeDirection").DataSource((IEnumerable<object>)ViewData["direction"]).Change("directionChange").Value("Left").Fields(field => { field.Value("id").Text("name"); }).Render()
                </div>
            </div>
        </div>
        @Html.EJS().TreeGrid("FreezeTreeGrid").DataSource((IEnumerable<object>)ViewData["datasource"]).AllowSelection(false).AllowResizing().Columns(col =>
    {
        col.Field("TaskId").HeaderText("Task ID").Width(100).Freeze(FreezeDirection.Left).TextAlign(TextAlign.Right).Add();
        col.Field("TaskName").HeaderText("Task Name").Width(250).Add();
        col.Field("StartDate").HeaderText("Start Date").Width(130).TextAlign(TextAlign.Right).Format("yMd").Add();
        col.Field("EndDate").HeaderText("End Date").Width(150).TextAlign(TextAlign.Right).Format("yMd").Add();
        col.Field("Duration").HeaderText("Duration").Width(130).TextAlign(TextAlign.Right).Add();
        col.Field("Progress").HeaderText("Progress").Width(130).TextAlign(TextAlign.Right).Add();
        col.Field("Priority").HeaderText("Priority").Width(160).TextAlign(TextAlign.Left).Add();
        col.Field("Designation").HeaderText("Designation").Width(190).TextAlign(TextAlign.Left).Add();
        col.Field("EmployeeID").HeaderText("Employee ID").Width(120).TextAlign(TextAlign.Right).Add();
        col.Field("Approved").HeaderText("Approved").Freeze(FreezeDirection.Right).TextAlign(TextAlign.Left).DisplayAsCheckBox(true).Type("boolean").Width(140).Add();
    }).Height(410).ChildMapping("Children").TreeColumnIndex(1).Render()

        @Html.EJS().Dialog("AlertDialog").Header("Frozen").Content("Atleast one Column should be in movable").ShowCloseIcon(false).Target(".control-section").Width("300px").Visible(false).AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.None }).Buttons((List<DialogDialogButton>)ViewData["DefaultButtons"]).Render()
    </div>

    <style>
        .grid-freezeprop {
            padding-bottom: 5px;
        }

        .grid-freezecol {
            display: inline-block;
            DialogBuilder .Buttons(System.Collections.Generic.List<Syncfusion.EJ2.Popups.DialogDialogButton>)' and 'Syncfusion.EJ2.Popups.DialogBuilder.Buttons(System.Action<Syncfusion.EJ2.Popups.DialogDialogButtonBuilder>)'' padding-right: 10px;
        }
    </style>

    <script>
        var refresh = true;
        function columnChange(e) {
            var treegrid = document.getElementById("FreezeTreeGrid").ej2_instances[0];
            var columnName = e.value;
            var column = treegrid.getColumnByField(columnName);
            var directionDropDown = document.getElementById("FreezeDirection").ej2_instances[0];
            var value = column.freeze === undefined ? 'Center' : column.freeze;
            refresh = directionDropDown.value === value;
            directionDropDown.value = value;
        }

        function directionChange(e) {
            if (refresh) {
                var treegrid = document.getElementById("FreezeTreeGrid").ej2_instances[0];
                var columnName = document.getElementById("column").ej2_instances[0].value;
                var mvblColumns = treegrid.getMovableColumns();
                if (mvblColumns.length === 1 && columnName === mvblColumns[0].field && e.value !== mvblColumns[0].freeze) {
                    document.getElementById("AlertDialog").ej2_instances[0].show();
                    refresh = false; this.value = "Center"; this.refresh();
                } else {
                    let columns = treegrid.getColumns();
                    let column = columns.find(col => col.field === columnName);
                    if (column) {
                        column.freeze = e.value === 'Center' ? undefined : e.value;
                    }
                    treegrid.columns = columns;
                }
            }
            refresh = true;
        }
        function alertDlgBtnClick() {
            document.getElementById("AlertDialog").ej2_instances[0].hide();
        }
    </script>
}
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the freeze direction feature of the Tree Grid. Scroll the movable content
            horizontally to view the frozen columns with the content.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Freeze Direction in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            The freezing feature enables the user to freeze certain rows/columns at both sides to scroll remaining movable
            content. This can be achieved by setting <code>
                <a target="_blank" class="code"
                   href="https://ej2.syncfusion.com/aspnetmvc/documentation/tree-grid/scrolling/#frozen-rows-and-columns" aria-label="freeze">
                    Freeze
                <span class="sr-only">opens in a new tab</span></a>
            </code> property in column settings.

        </p>
        <p>
            In this demo sample, the <b>Task ID</b> column freezed at left side and <b>Approved</b> column freezed at
            right side using <code>Column->Freeze</code>property.
        </p>
    </div>
}


@section Title{
                    <title>ASP.NET MVC Tree Grid Freeze Direction Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Freeze Direction in ASP.NET MVC Tree Grid Control</h1>
                }

@using Syncfusion.EJ2.QueryBuilder;

@helper RenderTooltip()
{
    @Html.EJS().Tooltip("Tooltip").OpensOn("Click").Content("Copied to clipboard").ContentTemplate(@<div class="e-icons e-copy"></div>).Render()
}
@helper RenderSpELTooltip()
{
    @Html.EJS().Tooltip("SpelTooltip").OpensOn("Click").Content("Copied to clipboard").ContentTemplate(@<div class="e-icons e-copy"></div>).Render()
}
@section ControlsSection{
    <div class="col-lg-12 control-section">
        @Html.EJS().QueryBuilder("querybuilder").Columns(col =>
    {
        col.Field("Category").Label("Category").Type("string").Add();
        col.Field("PaymentMode").Label("Payment Mode").Type("string").Template(new { create = "paymentCreate", destroy = "paymentDestroy", write = "paymentWrite" }).Operators(ViewData["paymentOperator"]).Add();
        col.Field("TransactionType").Label("Transaction Type").Type("boolean").Template(new { create = "transactionCreate", destroy = "transactionDestroy", write = "transactionWrite" }).Operators(ViewData["transactionOperator"]).Add();
        col.Field("Description").Label("Description").Type("string").Add();
        col.Field("Date").Label("Date").Type("date").Add();
        col.Field("Amount").Label("Amount").Type("number").Template(new { create = "amountCreate", destroy = "amountDestroy", write = "amountWrite" }).Operators(ViewData["amountOperator"]).Add();
    }).DataSource(ViewData["dataSource"]).Rule((Syncfusion.EJ2.QueryBuilder.QueryBuilderRule)ViewData["rule"]).MaxGroupCount(5).Width("100%").RuleChange("updateRule").Render()

        <div class="e-query-preview">
            @(Html.EJS().Tab("defaultTab").Created("tabCreated").Selected("changeTab")
        .ContentTemplate(
        @<div>
            <div class="e-tab-header">
                <div>CEL</div>
                <div>SpEL</div>
            </div>
            <div class="e-content">
                <div>
                    <div class="preview-content">
                        <div class="e-preview-options">
                            <div class="copy-tooltip" style="display: none" id="copy-cel">
                                @RenderTooltip()
                            </div>
                        </div>
                        <div readonly class="e-text-area-content e-cel-content">
                            <pre class="e-pre-content"></pre>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="preview-content">
                        <div class="e-preview-options">
                            <div class="copy-tooltip" style="display: none" id="copy-spel">
                                @RenderSpELTooltip()
                            </div>
                        </div>
                        <div readonly class="e-text-area-content e-spel-content">
                            <pre class="e-pre-content"></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        ).Render()
        )
        </div>
    </div>


}

@section Meta{
    <meta name="description" content="This example demonstrates the Value Template in ASP.NET MVC Query Builder control. Explore here for more details." />
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the integration of the Dropdown List and Slider components as templates in the Query Builder control and also showing the different types of queries such as CEL and SpEL. The query preview can be changed using the tab component.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            This sample illustrates how to integrate the Dropdown List, Slider, and Checkbox components with the Query Builder. The available types of templates are:
            <ul>
                <li>
                    <code>DropDownList</code>
                </li>
                <li>
                    <code>AutoComplete</code>
                </li>
                <li>
                    <code>CheckBox</code>
                </li>
                <li>
                    <code>Slider</code>
                </li>
            </ul>
        </p>
        <p>In this demo, queries are exported in CEL and SpEL formats.</p>
        <p>
            More information about Query Builder can be found in this
            <a target="_blank" href="http://ej2.syncfusion.com/aspnetmvc/documentation/query-builder/getting-started" aria-label="documentation section">
                documentation section
            <span class="sr-only">opens in a new tab</span></a>.
        </p>
    </div>
}

@section Scripts {
    <script>
        var celElement = document.getElementsByClassName("e-cel-content")[0];
        var spelElement = document.getElementsByClassName("e-spel-content")[0];
        var spelPreviewElement = document.getElementsByClassName("preview-content")[1];
        var celPreviewElement = document.getElementsByClassName("preview-content")[0];
        var copyCelTooltip = document.getElementById('copy-cel');
        var copySpelTooltip = document.getElementById('copy-spel');

        celPreviewElement.addEventListener('mouseenter', function () {
            var elem = document.getElementsByClassName("copy-tooltip");
            elem[0].style.display = 'block';
        });

        celPreviewElement.addEventListener('mouseleave', function () {
            var elem = document.getElementsByClassName("copy-tooltip");
            elem[0].style.display = 'none';
        });

        copyCelTooltip.addEventListener('click', function (args) {
           navigator.clipboard.writeText(content);
            setTimeout(function () {
                ej.base.getComponent(args.target.closest('.e-tooltip'), 'tooltip').close();
            }, 1000);
        });

        spelPreviewElement.addEventListener('mouseenter', function () {
            var elem = document.getElementsByClassName("copy-tooltip");
            elem[1].style.display = 'block';
        });

        spelPreviewElement.addEventListener('mouseleave', function () {
            var elem = document.getElementsByClassName("copy-tooltip");
            elem[1].style.display = 'none';
        });

        copySpelTooltip.addEventListener('click', function (args) {
            navigator.clipboard.writeText(content);
            setTimeout(function () {
                ej.base.getComponent(args.target.closest('.e-tooltip'), 'tooltip').close();
            }, 1000);
        });
    </script>
}
<script>
    var content = "";
    var currentIndex = 0;
    function paymentCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'text');
        return elem;
    }
    function paymentDestroy(args) {
        var dropdown = ej.base.getComponent(document.getElementById(args.elementId), 'dropdownlist');
        if (dropdown) {
            dropdown.destroy();
        }
    }
    function paymentWrite(args) {
        var ds = ['Cash', 'Debit Card', 'Credit Card', 'Net Banking', 'Wallet'];
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var dropDownObj = new ej.dropdowns.DropDownList({
            dataSource: ds,
            value: args.values ? args.values : ds[0],
            change: function (e) {
                qryBldrObj.notifyChange(e.itemData.value, e.element);
            }
        });
        dropDownObj.appendTo('#' + args.elements.id);

    }
    function transactionCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'checkbox');
        return elem;

    }
    function transactionDestroy(args) {
        ej.base.getComponent(document.getElementById(args.elementId), 'checkbox').destroy();
    }
    function transactionWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var checked = args.values === 'IsExpensive' ? true : false;
        var boxObj = new ej.buttons.CheckBox({
            label: 'Is Expensive',
            checked: checked,
            change: function (e) {
                qryBldrObj.notifyChange(e.checked ? 'expensive' : 'income', e.event.target);
            }
        });
        boxObj.appendTo('#' + args.elements.id);

    }
    function amountCreate() {
        var elem = document.createElement('div');
        elem.setAttribute('class', 'ticks_slider');
        return elem;

    }
    function amountDestroy(args) {
        ej.base.getComponent(document.getElementById(args.elementId), 'slider').destroy();
    }
    function amountWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var slider = new ej.inputs.Slider({
            value: args.values,
            min: 0,
            max: 100,
            type: 'MinRange',
            tooltip: { isVisible: true, placement: 'Before', showOn: 'Hover' },
            created: function (e) {
                if (document.getElementById('right-pane')) {
                    document.getElementById('right-pane').addEventListener('scroll', onScroll);
                }
            },
            change: function (e) {
                qryBldrObj.notifyChange(e.value, args.elements);
            }
        });
        slider.appendTo('#' + args.elements.id);
    }

    function onScroll() {
        var slider = document.getElementsByClassName('ticks_slider'), sliderObj;
        for (var i = 0, len = slider.length; i < len; i++) {
            sliderObj = slider[i].ej2_instances[0];
            // Refreshing each slider tooltip object position
            sliderObj.refreshTooltip();
        }
    }

    function tabCreated() {
        setTimeout(function () {
            updateCELContentTemplate();
        }, 100);
    }

    function changeTab(args) {
        currentIndex = args.selectedIndex;
        setTimeout(function () {
            updateContentTemplate();
        }, 100);
    }

    function updateCELContentTemplate() {
        var celQuery = '';
        var qbObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var allRules = qbObj.getValidRules(qbObj.rule);
        content = getCELQuery(allRules, celQuery);
        celElement.value = content;
        document.querySelector('.e-cel-content .e-pre-content').textContent = content;
        hljs.highlightBlock(document.querySelector('.e-cel-content'));
        celElement.style.display = 'block';
    }
    function updateSpELContentTemplate() {
        var qbObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var allRules = qbObj.getValidRules(qbObj.rule);
        var spELQuery = getSpELQuery(allRules);
        content = spELQuery;
        spelElement.value = content;
        document.querySelector('.e-spel-content .e-pre-content').textContent = content;
        hljs.highlightBlock(document.querySelector('.e-spel-content'));
        spelElement.style.display = 'block';
    }

    function getCELQuery(rules, celQuery) {
        celQuery = '';
        celQuery = convertQuery(rules, celQuery, null, 'CEL');
        return celQuery;
    }

    function getSpELQuery(rules, spELQuery) {
        spELQuery = '';
        spELQuery = convertQuery(rules, null, spELQuery, null);
        return spELQuery;
    }

    function convertQuery(rules, celQuery, spELQuery, type) {
        celQuery = celQuery || ''; // Set celQuery to an empty string if not provided
        spELQuery = spELQuery || ''; // Set spELQuery to an empty string if not provided
        type = type || '';
        var isRoot = false;
        var celOperators = {
            equal: '==', notequal: '!=', greaterthan: '>', greaterthanorequal: '>=', lessthan: '<', in: 'in', notin: 'in',
            lessthanorequal: '<=', startswith: 'startsWith', endswith: 'endsWith', contains: 'contains', isnull: '== null', isnotnull: '!= null',
            isempty: '== ""', isnotempty: '!= ""'
        };
        var spELOperators = {
            equal: '==', notequal: '!=', greaterthan: '>', greaterthanorequal: '>=', lessthan: '<', in: 'in', notin: 'in',
            lessthanorequal: '<=', startswith: 'matches', endswith: 'matches', contains: 'matches', isnull: '== null', isnotnull: '!= null',
            isempty: '== ""', isnotempty: '!= ""'
        };
        if (type === 'CEL') {
            if (!celQuery && celQuery !== '') {
                celQuery = '';
                isRoot = true;
            }
            else {
                celQuery += '(';
            }
        }
        else {
            if (!spELQuery && spELQuery !== '') {
                spELQuery = '';
                isRoot = true;
            }
            else {
                spELQuery += '(';
            }
        }
        var condition = rules.condition;
        if (rules.rules) {
            for (var j = 0, jLen = rules.rules.length; j < jLen; j++) {
                if (rules.rules[j].rules) {
                    if (type === 'CEL') {
                        celQuery = convertQuery(rules.rules[j], celQuery, null, 'CEL');
                    }
                    else {
                        spELQuery = convertQuery(rules.rules[j], null, spELQuery, 'SpEL');
                    }
                }
                else {
                    var rule = rules.rules[j];
                    var valueStr = '';
                    var ruleOpertor = (type === 'CEL') ? celOperators[rule.operator] : spELOperators[rule.operator];
                    var operator = rule.operator.toString();
                    if (rule.value && typeof rule.value === 'object') {
                        if (operator === 'between') {
                            var ruleCondition = ' ' + '&&' + ' ';
                            if (rule.type === 'date') {
                                valueStr += '(' + rule.field + ' >= "' + rule.value[0] + '"' + ruleCondition + rule.field + ' <= "' + rule.value[1] + '")';
                            }
                            else {
                                valueStr += '(' + rule.field + ' >= ' + rule.value[0] + ruleCondition + rule.field + ' <= ' + rule.value[1] + ')';
                            }
                        }
                        else if (operator === 'notbetween') {
                            var ruleCondition = ' ' + '||' + ' ';
                            if (rule.type === 'date') {
                                valueStr += '(' + rule.field + ' < "' + rule.value[0] + '"' + ruleCondition + rule.field + ' > "' + rule.value[1] + '")';
                            }
                            else {
                                valueStr += '(' + rule.field + ' < ' + rule.value[0] + ruleCondition + rule.field + ' > ' + rule.value[1] + ')';
                            }
                        }
                        else {
                            if (type === 'CEL') {
                                if (rule.value !== null) {
                                    var value = rule.value[0] ? rule.value[0] : "";
                                    valueStr += '["' + value + '"';
                                    for (var k = 1, kLen = rule.value.length; k < kLen; k++) {
                                        valueStr += ', "' + rule.value[k] + '"';
                                    }
                                    valueStr += ']';
                                }
                            }
                            else {
                                if (rule.value !== null) {
                                    var value = rule.value[0] ? rule.value[0] : "";
                                    valueStr += '(' + rule.field + ' == "' + value + '"';
                                    for (var k = 1, kLen = rule.value.length; k < kLen; k++) {
                                        valueStr += ' or ' + rule.field + ' == "' + rule.value[k] + '"';
                                    }
                                    valueStr += ')';
                                }
                            }
                        }
                    }
                    else {
                        if (type === 'CEL') {
                            if (rule.type === 'number' || rule.value === 'boolean' || rule.value === null) {
                                valueStr += rule.value;
                            }
                            else {
                                valueStr += '"' + rule.value + '"';
                            }
                        }
                        else {
                            if (operator.indexOf('startswith') > -1) {
                                valueStr += rule.value ? '"^' + rule.value + '"' : '(' + rule.value + ')';
                            }
                            else if (operator.indexOf('endswith') > -1) {
                                valueStr += rule.value ? '"' + rule.value + '$"' : '(' + rule.value + ')';
                            }
                            else if (operator.indexOf('contains') > -1) {
                                valueStr += rule.value ? '"' + rule.value + '"' : '(' + rule.value + ')';
                            }
                            else if (operator.indexOf('isempty') > -1) {
                                valueStr += '';
                            }
                            else {
                                if (rule.type === 'number' || rule.value === 'boolean' || rule.value === null) {
                                    valueStr += rule.value;
                                }
                                else {
                                    valueStr += '"' + rule.value + '"';
                                }
                            }
                        }
                    }
                    if (operator.indexOf('null') > -1 || (operator.indexOf('empty') > -1)) {
                        if (rule.field.indexOf(' ') > -1) {
                            rule.field = '"' + rule.field + '"';
                        }
                        if (type === 'CEL') {
                            celQuery += rule.field + ' ' + ruleOpertor;
                        }
                        else {
                            spELQuery += rule.field + ' ' + ruleOpertor;
                        }
                    }
                    else {
                        if (rule.field.indexOf(' ') > -1) {
                            rule.field = '"' + rule.field + '"';
                        }
                        if (type === 'CEL') {
                            if (operator.indexOf('startswith') > -1 || (operator.indexOf('endswith') > -1) || (operator.indexOf('contains') > -1)) {
                                celQuery += rule.field + '.' + ruleOpertor + '(' + valueStr + ')';
                            }
                            else if (operator.indexOf('between') > -1) {
                                celQuery += valueStr;
                            }
                            else if (operator.indexOf('notin') > -1) {
                                celQuery += '!(' + rule.field + ' ' + ruleOpertor + ' ' + valueStr + ')';
                            }
                            else {
                                celQuery += rule.field + ' ' + ruleOpertor + ' ' + valueStr;
                            }
                        }
                        else {
                            if (operator.indexOf('between') > -1 || operator === 'in') {
                                spELQuery += valueStr;
                            }
                            else if (operator.indexOf('notin') > -1) {
                                spELQuery += '!' + valueStr;
                            }
                            else {
                                spELQuery += rule.field + ' ' + ruleOpertor + ' ' + valueStr;
                            }
                        }
                    }
                    if (rule.condition && rule.condition !== '') {
                        condition = rule.condition;
                    }
                }
                if (j !== jLen - 1) {
                    var rule = rules.rules[j];
                    if (condition === '' || (rule && rule.condition !== '' && rule.custom && (rule.custom).isCustom)) {
                        condition = rule.condition;
                    }
                    if (type === 'CEL') {
                        condition = condition.toUpperCase();
                        if (condition === 'AND') {
                            celQuery += ' && ';
                        }
                        else {
                            celQuery += ' || ';
                        }
                    }
                    else {
                        condition = condition.toLowerCase();
                        spELQuery += ' ' + condition + ' ';
                    }
                }
            }
        }
        if (!isRoot) {
            if (type === 'CEL') {
                celQuery += ')';
            }
            else {
                spELQuery += ')';
            }
        }
        if (type === 'CEL') {
            return celQuery;
        }
        return spELQuery;
    };

    function updateRule() {
        updateContentTemplate();
    }

    function updateContentTemplate() {
        switch (currentIndex) {
            case 0:
                updateCELContentTemplate();
                break;
            case 1:
                updateSpELContentTemplate();
                break;
        }
    }

</script>
@*custom code start*@
<style>
    .e-control-wrapper.e-slider-container.e-horizontal {
        height: 0;
    }

    .e-querybuilder {
        margin: 3% auto;
    }

    #ruleContent {
        border: 1px solid #d3d3d3;
        width: 100%;
        height: 500px;
        overflow: auto;
    }

    .property-panel-table td:first-child {
        width: auto;
    }

    .property-panel-table div.row,
    .property-panel-table div.e-radio-wrapper {
        padding-bottom: 10px;
    }

    .highcontrast textarea#ruleContent {
        background-color: #000;
    }

    .material-dark textarea#ruleContent {
        background-color: inherit;
    }

    .fabric-dark textarea#ruleContent {
        background-color: inherit;
    }

    .bootstrap-dark textarea#ruleContent {
        background-color: inherit;
    }

    .tailwind-dark textarea#ruleContent {
        background-color: inherit;
    }

    .e-query-builder {
        margin: 0 auto;
    }

    .e-query-preview {
        margin-top: 20px !important;
        border: 1px solid #e5e7eb;
        border-radius: 4px;
        height: 300px;
        margin-bottom: 10px;
    }

        .e-query-preview .e-tab {
            height: 200px;
        }

            .e-query-preview .e-tab .e-content {
                margin: 10px;
            }

        .e-query-preview .e-preview-options {
            padding: 10px;
            height: 54px;
        }

        .e-query-preview .e-radio-option {
            margin-left: 20px;
        }

        .e-query-preview .copy::before {
            content: '\e77c';
            font-size: 25px;
        }

        .e-query-preview .copy-tooltip {
            height: 32px;
            width: 32px;
            position: absolute;
            cursor: pointer;
            right: 12px;
            top: 12px;
            background: #f4f4f4;
            border-radius: 2px;
        }

            .e-query-preview .copy-tooltip.e-control.e-tooltip:hover {
                background: #D8D8D8;
            }

        .e-query-preview .e-icons.e-copy {
            padding-left: 3px;
            padding-top: 4px;
            color: rgba(0, 0, 0, .54);
            float: right;
            font-size: 25px;
            padding-right: 5px;
            padding-top: 4px;
            color: rgba(0, 0, 0, .54);
        }

        .e-query-preview .copy-tooltip {
            position: unset;
            margin-top: 10px;
            float: right;
            height: 32px;
            width: 32px;
            cursor: pointer;
            background: #f4f4f4;
            border-radius: 2px;
        }

        .e-query-preview .CodeMirror {
            height: 180px !important;
        }

    .e-query-builder .query-template-control .cndtnbtn.e-control.e-dropdownlist.e-lib.e-input {
        padding-left: 10px;
    }

    .e-query-builder .query-template-control span.e-custom-group-btn {
        max-width: 100px;
        border-radius: 5px !important;
        border-width: 1px !important;
    }

    .e-query-preview .preview-content {
        margin-top: 10px;
    }

    .e-query-preview .e-cel-content,
    .e-query-preview .e-spel-content {
        margin: 10px;
        border: none;
        height: 180px;
        width: 98%;
    }

    .e-query-preview .e-mongo-content,
    .e-query-preview .e-json-content {
        height: 220px;
    }

    .e-query-preview .e-text-area-content:focus-visible {
        outline: none;
    }

    .e-query-preview .preview {
        margin-top: 20px;
    }

    .content-area {
        height: 260px !important;
        width: 99% !important;
        overflow-x: hidden;
        margin: 10px !important;
    }


    .e-text-area-content {
        margin: 10px !important;
        overflow: auto;
        border: none;
        width: 96%;
    }

    .e-text-area-content:focus-visible {
        outline: none;
    }

    .e-pre-content {
        background: transparent;
        border: none;
    }

    @@media only screen and (max-width: 700px) {
        .e-query-preview .copy-tooltip {
           display: block !important;
        }
    }

    .highcontrast .e-query-json-preview .e-icons.e-copy,
    .fluent2-dark .e-query-preview .e-icons.e-copy,
    .fluent2-highcontrast .e-query-preview .e-icons.e-copy {
        padding-bottom: 3px;
        color: white;
        background-color: black;
    }

    .tailwind3-dark #content-area,
    .tailwind3-dark .e-query-preview .e-text-area-content {
        background: transparent;
    }

    .tailwind3-dark .e-query-preview .e-pre-content {
        color: white;
    }
</style>
@*custom code end*@
@section Title{
    <title>ASP.NET MVC Query Builder Value Template Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Value Template in ASP.NET MVC Query Builder Control</h1>
}

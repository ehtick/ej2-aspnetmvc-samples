a@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div class="row linear-parent" style="margin-left: 10%">
            <div style="margin-top: 1%">
                <div class="col-lg-12 col-sm-12 progressbar-label-linear">Determinate</div>
                <div id="lineardeterminate">
                    @(Html.EJS().ProgressBar("lineardeterminate").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Linear).Value(100)
                                              .Height("60").Load("Load")
                                              .Minimum(0).Maximum(100)
                                              .Animation(an => an.Enable(true).Delay(0).Duration(2000))
                                              .Render())
                </div>
            </div>
            <div style="margin-top: 2.5%">
                <div class="col-lg-12 col-sm-12 progressbar-label-linear">Indeterminate</div>
                <div id="linearindeterminate">
                    @(Html.EJS().ProgressBar("linearindeterminate").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Linear).Value(20)
                                              .Height("60").Load("Load").IsIndeterminate(true)
                                              .Minimum(0).Maximum(100)
                                              .Animation(an => an.Enable(true).Delay(0).Duration(2000))
                                              .Render())
                </div>
            </div>
            <div style="margin-top: 2.5%">
                <div class="col-lg-12 col-sm-12 progressbar-label-linear">Segment</div>
                <div id="linearsegment">
                    @(Html.EJS().ProgressBar("linearsegment").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Linear).Value(100)
                                              .Height("60").Load("Load").SegmentCount(8)
                                              .Minimum(0).Maximum(100)
                                              .Animation(an => an.Enable(true).Delay(0).Duration(2000))
                                              .Render())
                </div>
            </div>
            <div style="margin-top: 2.5%">
                <div class="col-lg-12 col-sm-12 progressbar-label-linear">Buffer</div>
                <div id="linearbuffer">
                    @(Html.EJS().ProgressBar("linearbuffer").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Linear).Value(40)
                                              .Height("60").Load("Load").SecondaryProgress(60).SecondaryProgressColor(" ")
                                              .Minimum(0).Maximum(100)
                                              .Animation(an => an.Enable(true).Delay(0).Duration(2000))
                                              .Render())
                </div>
            </div>
            <div style="margin-top: 2.5%">
                <div class="col-lg-12 col-sm-12 progressbar-label-linear">Active</div>
                <div id="linearactive">
                    @(Html.EJS().ProgressBar("linearactive")
                                              .Type(Syncfusion.EJ2.ProgressBar.ProgressType.Linear)
                                              .Value(100)
                                              .Height("60")
                                              .Load("Load")
                                              .Minimum(0)
                                              .Maximum(100)
                                              .IsActive(true)
                                              .Animation(an => an.Enable(true).Delay(0).Duration(2000))
                                              .Render())
                </div>
            </div>
        </div>
        <div class="row linear-parent">
            <button id="reLoad" class="e-control e-btn e-lib e-outline e-primary">Reload</button>
        </div>
    </div>



    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }

        .linear-parent {
            text-align: center;
            width: 80%;
            margin: auto !important;
        }

        .progressbar-label-linear {
            text-align: left;
            font-family: Roboto-Regular;
            font-size: 14px;
            color: #3D3E3C;
            margin-left: 10px;
            padding: 0px;
            top: 10px;
        }

        #reLoad {
            border-radius: 4px;
            text-transform: capitalize;
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/Progressbar/theme-color.js"></script>
    <script>
        var div = document.getElementsByClassName('progressbar-label-linear');
        var Load = function (args) {
            var selectedTheme = loadProgressBarTheme(args);
            if (args.progressBar.theme === 'HighContrast' || args.progressBar.theme === 'Bootstrap5Dark' || args.progressBar.theme === 'BootstrapDark' || args.progressBar.theme === 'FabricDark'
                || args.progressBar.theme === 'TailwindDark' || args.progressBar.theme === 'Tailwind3Dark' || args.progressBar.theme === 'MaterialDark' || args.progressBar.theme === 'FluentDark' || args.progressBar.theme === 'Material3Dark' || args.progressBar.theme === 'Fluent2HighContrast' || args.progressBar.theme === 'Fluent2Dark') {
                for (let i = 0; i < div.length; i++) {
                    div[i].setAttribute('style', 'color:white');
                }
            }
            if (selectedTheme === 'fabric') {
                args.progressBar.secondaryProgressColor = '#b0d0e9'
            } else if (selectedTheme === 'material-dark') {
                args.progressBar.secondaryProgressColor = '#b8b8b8'
            } else if (selectedTheme === 'material') {
                args.progressBar.secondaryProgressColor = '#f087ab'
            } else if (selectedTheme === 'bootstrap5-dark') {
                args.progressBar.secondaryProgressColor = '#2b5288'
            } else if (selectedTheme === 'bootstrap5') {
                args.progressBar.secondaryProgressColor = '#98c5f5'
            } else if (selectedTheme === 'bootstrap') {
                args.progressBar.secondaryProgressColor = '#acc6dc'
            } else if (selectedTheme === 'bootstrap4') {
                args.progressBar.secondaryProgressColor = '#98c5f5'
            } else if (selectedTheme === 'bootstrap-dark') {
                args.progressBar.secondaryProgressColor = '#b8b8b8'
            } else if (selectedTheme === 'highcontrast') {
                args.progressBar.secondaryProgressColor = '#aca379'
            } else if (selectedTheme === 'fluent-dark') {
                args.progressBar.secondaryProgressColor = '#2b5288'
            } else if (selectedTheme === 'fluent') {
                args.progressBar.secondaryProgressColor = '#98c5f5'
            } else if (selectedTheme === 'tailwind-dark') {
                args.progressBar.secondaryProgressColor = '#22D3EE'
            } else if (selectedTheme === 'tailwind') {
                args.progressBar.secondaryProgressColor = '#4F46E5'
            } else if (selectedTheme === 'fluent2') {
                args.progressBar.secondaryProgressColor = '#0F6CBD';
            } else if (selectedTheme === 'fluent2-highcontrast') {
                args.progressBar.secondaryProgressColor = '#1AEBFF';
            } else if (selectedTheme === 'fluent2-dark') {
                args.progressBar.secondaryProgressColor = '#115EA3';
            } else if (selectedTheme === 'tailwind3-dark') {
                args.progressBar.secondaryProgressColor = '#6366F1'
            } else if (selectedTheme === 'tailwind3') {
                args.progressBar.secondaryProgressColor = '#4F46E5'
            }
        }
        var replayBtn = document.getElementById('reLoad');
        replayBtn.onclick = function () {
            var lineardeterminate = document.getElementById('lineardeterminate').ej2_instances[0];
            var linearindeterminate = document.getElementById('linearindeterminate').ej2_instances[0];
            var linearbuffer = document.getElementById('linearbuffer').ej2_instances[0];
            var linearsegment = document.getElementById('linearsegment').ej2_instances[0];
            var linearactive = document.getElementById('linearsegment').ej2_instances[0];
            lineardeterminate.refresh();
            linearindeterminate.refresh();
            linearbuffer.refresh();
            linearsegment.refresh();
            linearactive.refresh();
        };
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Linear in ASP.NET MVC Progress Bar control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates a linear progress bar with determinate and indeterminate states, segments and buffer values.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure a linear progress bar. A progress bar is used to visualize the progression of an extended operation. The sample shows the determinate and indeterminate states, buffer values and segments of a linear progress bar.
    </p>
}
@section Title{
    <title>ASP.NET MVC Progress Bar Linear Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Linear in ASP.NET MVC Progress Bar Control</h1>
}
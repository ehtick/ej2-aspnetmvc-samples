@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div class="row linear-parent">
            <div>
                <div class="col-lg-12 col-sm-12 progressbar-mode"></div>
                <div id="linearprogress">
                @(Html.EJS()
                .ProgressBar("linearprogress")
                .Type(Syncfusion.EJ2.ProgressBar.ProgressType.Linear)
                .Value(10)
                .Width("90%")
                .Height("30")
                .IsActive(true)
                .Role(Syncfusion.EJ2.ProgressBar.ModeType.Danger)
                .Load("progressLoad")
                .Render()
                )
                </div>
            </div>
        </div>
        <div class="row linear-button">
            <button id="reLoad" class="e-control e-btn e-lib e-outline e-primary">Increment</button>
        </div>
    </div>

    @*custom code start*@
    <style scoped>
        #control-container {
            padding: 0px !important;
        }

        .linear-parent {
            text-align: center;
            width: 75%;
            margin: auto;
        }

        .linear-button {
            text-align: center;
            padding: 2%;
        }

        .progressbar-mode {
            text-align: left;
            font-family: Roboto-Regular;
            font-size: 14px;
            color: #3D3E3C;
            margin-left: 10px;
            margin-top: 15%;
            padding: 0px;
            top: 20px;
        }

        #reLoad {
            border-radius: 4px;
            text-transform: capitalize;
        }
    </style>
    <script>
        var progressLoad = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            args.progressBar.theme = (selectedTheme.charAt(0).toUpperCase() +
                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast').replace(/5.3/i, '5');
        };
        var replayBtn = document.getElementById('reLoad');
        replayBtn.onclick = function () {
            var linearProgress = document.getElementById('linearprogress').ej2_instances[0];
            linearProgress.value += 30;
            if (linearProgress.value < linearProgress.maximum) {
                if (linearProgress.value <= 40) {
                    linearProgress.role = 'Warning';
                } else if (linearProgress.value <= 70) {
                    linearProgress.role = 'Info';
                }
            } else if (linearProgress.value === linearProgress.maximum) {
                linearProgress.role = 'Success';
                replayBtn.innerHTML = 'Reload'
            } else {
                linearProgress.value = 10;
                linearProgress.role = 'Danger';
                replayBtn.innerHTML = 'Increment'
            }
        };
    </script>
    @*custom code end*@
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Linear in ASP.NET MVC Progress Bar control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates a Active state of the progress bar.
    </p>
}
@section Description{
    <p>
        This demo for Essential JS2 Progress Bar control shows the Active state of the progress bar using isActive property.
    </p>
}
@section Title{
    <title>ASP.NET MVC Progress Bar Linear Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example for Linear in ASP.NET MVC Progress Bar Control</h1>
}

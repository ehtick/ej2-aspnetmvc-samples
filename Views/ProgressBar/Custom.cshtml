@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section progress-bar-parent">
        <div class="row">
            <div class="col-lg-4 col-md-4 col-sm-4 paligncenter">
                <div id="label-container">
                    @(Html.EJS().ProgressBar("label-container").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Circular).Value(80)
                                           .Width("160px").Height("160px").StartAngle(180).EndAngle(180).Load("progressLoad")
                                           .Minimum(0).Maximum(100).CornerRadius(Syncfusion.EJ2.ProgressBar.CornerType.Round)
                                           .Animation(an => an.Enable(true).Delay(0).Duration(2000))
                                           .Annotations(an => { an.Content("<div class='annotaion-pro' id='point1' ><span>80%</span></div>").Add(); }).Render())
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 paligncenter">
                <div id="pause-container">
                    @(Html.EJS().ProgressBar("pause-container").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Circular).Value(100)
                                                    .Width("160px").Height("160px")
                                                    .Minimum(0).Maximum(100).Load("progressLoad")
                                                    .Animation(an => an.Enable(true).Delay(0).Duration(2000)).ProgressCompleted("progressCompleted")
                                                    .Annotations(an =>
                                                    {
                                                        an.Content("<img src=\"@Url.Content(\"~/Content/ProgressBar/material-pause.svg\")\" />").Add();
                                                    }).Render())
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 paligncenter">
                <div id="download-container">
                    @(Html.EJS().ProgressBar("download-container").Type(Syncfusion.EJ2.ProgressBar.ProgressType.Circular).Value(100)
                                           .Width("160px").Height("160px").Minimum(0).Maximum(100).EnableRtl(false).Load("progressLoad")
                                           .Animation(an => an.Enable(true).Delay(0).Duration(2000)).ProgressCompleted("progressCompleted1")
                                           .Annotations(an =>
                                           {
                                               an.Content("<img src=\"@Url.Content(\"~/Content/ProgressBar/material-Download.svg\")\" />").Add();
                                           }).Render())
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12 col-12 reload-btn">
                <button id="reLoad" class="e-control e-btn e-lib e-outline e-primary">Reload</button>
            </div>
        </div>
    </div>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }

        .progress-bar-parent {
            margin-top: 8%;
            text-align: center;
        }

        .paligncenter {
            text-align: center;
        }

        .plabeltxt {
            font-size: 20px;
            font-weight: bold;
        }

        .reload-btn {
            text-align: center;
            margin-top: 3%;
        }

        #reLoad {
            border-radius: 4px;
            text-transform: capitalize;
        }

        .annotaion-pro {
            font-size: 20px;
            font-weight: bold;
            color: #b52123;
            fill: #b52123
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/Progressbar/theme-color.js"></script>
    <script>
        var clearTimeout1;
        var clearTimeout2;
        var annotationColors = { fluent: '#0D6EFD', fluentdark: '#0D6EFD', material: '#e91e63', fabric: '#0078D6', bootstrap: '#317ab9', bootstrap4: '#007bff', highcontrast: '#FFD939', tailwind: '#4F46E5', bootstrap5: '#0D6EFD', bootstrap5dark: '#0D6EFD', bootstrapdark: '#9A9A9A', fabricdark: '#9A9A9A', materialdark: '#9A9A9A', tailwinddark: '#22D3EE', material3: '#6750A4', material3dark: '#D0BCFF', fluent2: '#0F6CBD', fluent2highcontrast: '#1AEBFF', fluent2dark: '#115EA3', tailwind3: '#4F46E5', tailwind3dark: '#6366F1' };
        var progressLoad = function (args) {
            var selectedTheme = loadProgressBarTheme(args);
            if (args.progressBar.element.id === 'label-container') {
                args.progressBar.annotations[0].content = '<div id="point1" class="plabeltxt" style="color: ' + annotationColors[selectedTheme.replace(/-/i, '')] + ' "><span>80%</span></div>';
            } else if (args.progressBar.element.id === 'download-container') {
                args.progressBar.annotations[0].content = "<img src=\"../Content/ProgressBar/" + selectedTheme.replace(/-/i, '') + "-Download.svg\"></img>";
            } else {
                args.progressBar.annotations[0].content = "<img src=\"../Content/ProgressBar/" + selectedTheme.replace(/-/i, '') + "-pause.svg\"></img>";
            }
        }
        var Load = function (args) {
            loadProgressBarTheme(args);
        };
        var clearTimeout1, clearTimeout2;
        var progressCompleted1 = function (args) {
            clearTimeout(clearTimeout1);
            clearTimeout1 = setTimeout(function () {
                var downloadProgress = document.getElementById("download-container").ej2_instances[0];
                downloadProgress.annotations[0].content = "<img src=\"../Content/ProgressBar/" + (downloadProgress.theme).toLowerCase() + "-Tick.svg\"></img>";
                downloadProgress.dataBind();
            }, 2000);
        }
        var progressCompleted = function (args) {
            clearTimeout(clearTimeout2);
            clearTimeout2 = setTimeout(function () {
                var pausePlay = document.getElementById("pause-container").ej2_instances[0];
                pausePlay.annotations[0].content = "<img src=\"../Content/ProgressBar/" + (pausePlay.theme).toLowerCase() + "-Play.svg\"></img>";
                pausePlay.dataBind();
            }, 2000);
        }
        var replayBtn = document.getElementById('reLoad');
        replayBtn.onclick = function () {
            var inverseSemiProgress = document.getElementById('label-container').ej2_instances[0];
            var verticalProgress = document.getElementById('pause-container').ej2_instances[0];
            var semiProgress = document.getElementById('download-container').ej2_instances[0];
            inverseSemiProgress.refresh();
            verticalProgress.refresh();
            semiProgress.refresh();
        };
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Custom Contents in ASP.NET MVC Progress Bar control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates a circular progress bar to show <code>progressCompleted</code> event with <code>annotation</code>.
    </p>
}
@section Description{
    <p>
        This demo for Essential JS2 Progress Bar control shows the progress bar with custom content with the help of annotation.
    </p>
}
@section Title{
    <title>ASP.NET MVC Progress Bar Custom Contents Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Custom Contents in ASP.NET MVC Progress Bar Control</h1>
}
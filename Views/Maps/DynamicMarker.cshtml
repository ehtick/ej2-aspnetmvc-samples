@using Syncfusion.EJ2
@using Syncfusion.EJ2.Maps
@section ControlsSection{
<style>
    #container {
        display: table;
        margin: 0 auto;
    }

    .markerCheckbox {
        margin-top: -20px;
    }

    .tailwind .markerCheckbox, .tailwind-dark .markerCheckbox {
        margin-top: -17px;
    }
    .e-view.fluent2 #property .e-checkbox-wrapper, .e-view.fluent2-dark #property .e-checkbox-wrapper {
        padding-left: 0px;
    }
</style>

<div class="col-lg-9 control-section">
    <div id="outer" style="width:100%">
        <div class="content-wrapper">
            @Html.EJS().Maps("container").UseGroupingSeparator(true).Format("n").Load("load").Click("click").ZoomSettings(new Syncfusion.EJ2.Maps.MapsZoomSettings
            {
            Enable = true
            }).Layers(new List<Syncfusion.EJ2.Maps.MapsLayer>
                {
                new Syncfusion.EJ2.Maps.MapsLayer
                {
                UrlTemplate = "https://tile.openstreetmap.org/level/tileX/tileY.png",
                }}).Render()
                <div align="center">
                    <div align="center">
                        <p id="content" style="font-size: 16px;color:grey"><i>Click on the maps to add the marker/navigation line</i></p>
                    </div>
                </div>
        </div>
    </div>
</div>
<div class="col-lg-3 property-section">
    <table id="property" title="Properties" style="width: 100%">
        <tbody>
            <tr style="height: 50px;">
                <td>
                    <div class="property-text" style="padding: 0px;display:inline-block">Marker</div>
                </td>
                <td>
                    <div class="markerCheckbox" style=" margin-left: -10px;">
                        <input type="checkbox" id="marker" />
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="property-text" style="padding: 0px;">Line</div>
                </td>
                <td>
                    <div class="markerCheckbox" style=" margin-left: -10px;">
                        <input type="checkbox" name="high" id="line" />
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="property-text" style="padding: 0px;">Connecting line</div>
                </td>
                <td>
                    <div class="markerCheckbox" style=" margin-left: -10px;">
                        <input type="checkbox" id="connect" />
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="property-text" style="padding: 0px; margin-top: -10px;">Marker type</div>
                </td>
                <td style="margin-left:20px">
                    <div style="margin-top: -20px">
                    <select id="type" style="width: 50px; height: 20px">
                        <option value="Image">Image</option>
                        <option value="Circle">Circle</option>
                        <option value="Diamond">Diamond</option>
                        <option value="Star">Star</option>
                        <option value="Triangle">Triangle</option>
                    </select>
                        </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div class="property-text" style="padding: 0px;margin-top: 5px">Width</div>
                </td>
                <td>
                    <div>
                        <input type="text" class="e-input" value="1" style="width:100%; margin-top: -20px;" id="width" disabled />
                    </div>
                </td>
            </tr>
            <tr>
                <td align="center">
                    <div style="margin-left: 60%; margin-top: 10px">
                        <button id="togglebtn"
                                style="text-transform:none !important;width: 80px;margin-left: -55%;margin-top: -2px">
                            Clear
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>
<style>
    #width.e-input[disabled] {
        border-bottom-color: inherit;
        background-image: none;
    }
</style>
<script>
    var maps; var markerCheck = true; var lineCheck; var connectLineCheck;
    var widthCheck; var latitude = []; var longitude = []; var navigationLines = [];
    function load(args) {
        var theme = themeName ? themeName : 'Material';
        args.maps.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
        maps = args.maps;
    }
    function click(args) {
        if (markerCheck) {
            addMarker(args);
        }
        if (lineCheck && !connectLineCheck) {
            addLine(args, widthCheck['value']);
        }
        if (connectLineCheck) {
            addLine(args, widthCheck['value'], true);
        }
        if (markerCheck || lineCheck || connectLineCheck) {
            maps.refresh();
            if (togglebtn.disabled && (maps.layers[0].markerSettings.length ||
                maps.layers[0].navigationLineSettings.length)) {
                togglebtn.disabled = false;
            }
        }
    }
    var markerCheckBox = new ej.buttons.CheckBox(
        {
            change: function (e) {
                markerCheck = e.checked;
                markerShape.enabled = e.checked;
            }, checked: true
        },
        '#marker');

    var lineCheckBox = new ej.buttons.CheckBox(
        {
            change: function (e) {
                lineCheck = e.checked;
                if (e.checked) {
                    connectlineCheckBox.disabled = false;
                    connectlineCheckBox.checked = false;
                    widthCheck['disabled'] = false;
                } else {
                    connectLineCheck = e.checked;
                    emptySavedLinePosition();
                    connectlineCheckBox.disabled = true;
                    connectlineCheckBox.checked = false;
                    widthCheck['disabled'] = true;
                }
            }
        },
        '#line');


    var connectlineCheckBox = new ej.buttons.CheckBox(
        {
            disabled: true,
            change: function (e) {
                connectLineCheck = e.checked;
                if (!e.checked) {
                    emptySavedLinePosition();
                }
            }
        },
        '#connect');

    var markerShape = new ej.dropdowns.DropDownList({
        index: 0,
        placeholder: 'Select marker shape',
        width: '100%'
    });
    markerShape.appendTo('#type');

    var widthCheck = document.getElementById('width');

    var togglebtn = new ej.buttons.Button({
        cssClass: 'e-info',
        isPrimary: true,
        disabled: true
    });
    togglebtn.appendTo('#togglebtn');

    document.getElementById('togglebtn').onclick = () => {
        maps.layers[0].markerSettings = [];
        maps.layers[0].navigationLineSettings = [];
        navigationLines = [];
        emptySavedLinePosition();
        togglebtn.disabled = true;
    };

    var emptySavedLinePosition = function () {
        latitude = [];
        longitude = [];
    };
    var addMarker = function (args) {
        if (args.latitude !== null && args.longitude !== null) {
            var layerIndex = (args.target.indexOf('_LayerIndex_') !== -1) ?
                parseFloat(args.target.split('_LayerIndex_')[1].split('_')[0]) : 0;
            var marker;
            var dynamicMarker = maps.layersCollection[layerIndex].markerSettings;
            dynamicMarker.push(new ej.maps.MarkerSettings(maps, 'markerSettings', marker));
            var markerIndex = dynamicMarker.length - 1;
            dynamicMarker[markerIndex].visible = true;
            dynamicMarker[markerIndex].dataSource = [
                { latitude: args.latitude, longitude: args.longitude, name: 'dynamicmarker' }
            ];
            dynamicMarker[markerIndex].animationDuration = 0;
            dynamicMarker[markerIndex].fill = '#DB4537';
            dynamicMarker[markerIndex].shape = (markerShape.value !== "Image") ? markerShape.value : "Image";
            dynamicMarker[markerIndex].height = (markerShape.value !== 'Image') ? 12 : 20;
            dynamicMarker[markerIndex].width = (markerShape.value !== 'Image') ? 12 : 20;
            dynamicMarker[markerIndex].imageUrl = (markerShape.value !== "Image") ? "" : "@Url.Content("~/Content/Maps/ballon.png")";
        }
    };


    var addLine = function (lineArgs, lineWidth, connectiveLine) {
        if (lineArgs.latitude != null && lineArgs.longitude != null) {
            latitude.push(lineArgs.latitude);
            longitude.push(lineArgs.longitude);
        }
        if (latitude.length >= 2) {
            navigationLines.push({
                'visible': true,
                'latitude': [latitude[(latitude.length - 2)], latitude[(latitude.length - 1)]],
                'longitude': [longitude[(longitude.length - 2)], longitude[(longitude.length - 1)]],
                'angle': 0,
                'color': 'blue',
                'width': (lineWidth > 5) ? 5 : (((5 >= lineWidth) && (lineWidth >= 1)) ? lineWidth : 1)
            });
            maps.layers[0].navigationLineSettings = navigationLines;
            if (!connectiveLine) {
                emptySavedLinePosition();
            }
        }
    }
</script>
}
@section ActionDescription{
<div id="action-description">
    <p>
        This sample shows how custom markers and lines can be dynamically added to our maps with UI interaction. Marker or line can be chosen from the properties panel.
    </p>
</div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Dynamic Marker in ASP.NET MVC Maps control. Explore here for more details."/>
                }
@section Description{
<div id="description">
    <p>
        This sample shows how custom markers and lines can be dynamically added to our maps with UI interaction. Marker or line can be chosen from the properties panel.

    </p>
    <p>
        Using UI interaction, the markers or line can be added as follows: You can get the currently clicked geo location by passing "PointerEvent" or "MouseEvent" argument
        and layer index to the "getGeoLocation" method. Then, use that geo position to place the marker or line in the appropriate position.
    </p>
    <br />
    <p style="font-weight: 500">Injecting Module</p>
    <p>
        The features of maps component are segregated into individual feature-wise modules. To use navigation lines and marker, you need to inject the NavigationLine and Marker module using the Maps.Inject(NavigationLine, Marker) method.
    </p>
</div>
}


@section Title{
                    <title>ASP.NET MVC Maps Dynamic Marker Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Dynamic Marker in ASP.NET MVC Maps Control</h1>
                }
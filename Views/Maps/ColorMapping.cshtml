@using Syncfusion.EJ2
@using Syncfusion.EJ2.Maps
@section ControlsSection{
    <div id="template" style="display:none">
        <div class="toolback">
            <div class="listing2">
                <center>
                    ${State}
                </center>
            </div>
            <hr style="margin-top: 2px;margin-bottom:5px;border:0.5px solid #DDDDDD">
            <div>
                <center>  <span class="listing1">Inches : </span><span class="listing2">${inches}</span></center>
            </div>
            <div>
                <center>  <span class="listing1">Category : </span><span class="listing2">${value}</span> </center>
            </div>
        </div>
    </div>
<style>
    .toolback {
        border-radius: 4px;
        border: 1px #abb9c6;
        opacity: 90%;
        background: rgba(53, 63, 76, 0.90);
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.40);
        padding-bottom: 10px;
        padding-top: 10px;
        padding-left: 10px;
        padding-right: 10px;
        width: 140px;
    }

    .listing1 {
        font-size: 13px;
        color: #cccccc;
    }

    .listing2 {
        font-size: 13px;
        color: #ffffff;
        font-weight: 500;
    }

    .property-text {
        font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
        font-size: 13px !important;
        font-weight: 400 !important;
    }

    .e-view.fluent2 #property .e-checkbox-wrapper, .e-view.fluent2-dark #property .e-checkbox-wrapper, .e-view.fluent2-highcontrast #property .e-checkbox-wrapper {
        padding-left: 0px;
    }
</style>
    <div class="col-lg-9 control-section">
        <div id="outer" style="width:100%">
            <div class="content-wrapper" align="center">
                @Html.EJS().Maps("container").TitleSettings(title => title.Text("Spring Precipitation Averages of US States").TextStyle(new MapsFont { Size = "16px" })).Load("mapsLoad").LegendSettings(
                new MapsLegendSettings { Visible = true, Position = LegendPosition.Bottom, Height = "10", Width = "80%", Mode = LegendMode.Interactive, Title = new MapsCommonTitleSettings { Text = "Inches" } }).Layers(layer =>
       {
           layer.TooltipSettings(t => t.Visible(true).ValuePath("State").Template("#template")).DataSource(ViewData["DataSource"]).ShapeDataPath("State")
           .ShapePropertyPath("name").ShapeSettings(new MapsShapeSettings
           {
               ColorValuePath = "inches",
               Fill = "#E5E5E5",
               Border = new MapsBorder { Color = "black", Width = 0.2 },
               ColorMapping = new List<MapsColorMapping> {
                new MapsColorMapping { From = 0.1 , To = 1, Color="#DEEBAE", Label="0 - 1" },
                new MapsColorMapping { From = 1 , To = 2, Color="#A4D6AD", Label="1 - 2" },
                new MapsColorMapping { From = 2 , To = 3, Color="#37AFAB", Label="2 - 3" },
                new MapsColorMapping { From = 3 , To = 4, Color="#547C84", Label="3 - 4" },
                new MapsColorMapping { From = 4 , To = 5, Color="#CEBF93", Label="4 - 5" },
                new MapsColorMapping { From = 5 , To = 6, Color="#a69d70", Label="5 - 6" }
           }
           }).ShapeData(ViewData["MapShapeData"]).Add();
       }).Render()
                <div style="margin-left:75%">
                    Source:
                    <a href="https://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population" target="_blank" aria-label="wikipedia">en.wikipedia.org</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
            <tbody>
                <tr style="height: 50px">
                    <td>
                        <div class="property-text">Color Mapping Type</div>
                    </td>
                    <td>
                        <div style="margin-left:10px">
                        <select autocomplete="off" id="colorMapping">
                            <option value="RangeColorMapping" selected>Range</option>
                            <option value="EqualColorMapping">Equal</option>
                            <option value="DesaturationColorMapping">Desaturation</option>
                        </select>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div class="property-text" id="text1" style="display: none;"> Change Opacity</div>
                    </td>
                    <td>
                        <div id="input1" style="display: none;padding-top: 0px">
                            <input type="checkbox" id="opacity" />
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div class="property-text" id="text2" style="display: none">Min Opacity</div>
                    </td>
                    <td>
                        <div id="input2" style="display: none; margin-left: 10px">
                            <input type="range" id="minopacity" step="0.1" value="0.5" min="0" max="1" style="width:100%;" />
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td>
                        <div class="property-text" id="text3" style="display: none">Max Opacity</div>
                    </td>
                    <td>
                        <div id="input3" style="display: none; margin-left: 10px">
                            <input type="range" id="maxopacity" step="0.1" value="1" min="0" max="1" style="width:100%;" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
        var maps;
        function mapsLoad(args) {
            maps = args.maps;
            var theme = themeName ? themeName : 'Material';
            args.maps.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            args.maps.legendSettings.titleStyle = { size: '18px' };
        }

        window.onload = function () {
            var opacity;
            var highlightCheckBox = new ej.buttons.CheckBox({
                change: opacity, checked: false
            }, '#opacity');
            document.getElementById('minopacity').onpointermove = document.getElementById('minopacity').ontouchmove =
                document.getElementById('minopacity').onchange = function () {
                    if (highlightCheckBox.checked && !highlightCheckBox.disabled) {
                        var slider = document.getElementById('minopacity');
                        var minOpacity = parseFloat(slider.value);
                        maps.layers[0].shapeSettings.colorMapping[0].minOpacity = minOpacity;
                        maps.layers[0].shapeSettings.colorMapping[1].minOpacity = minOpacity;
                        maps.refresh();
                    }
                };
            document.getElementById('maxopacity').onpointermove = document.getElementById('maxopacity').ontouchmove =
                document.getElementById('maxopacity').onchange = function () {
                    if (highlightCheckBox.checked && !highlightCheckBox.disabled) {
                        var slider = document.getElementById('maxopacity');
                        var maxOpacity = parseFloat(slider.value);
                        maps.layers[0].shapeSettings.colorMapping[0].maxOpacity = maxOpacity;
                        maps.layers[0].shapeSettings.colorMapping[1].maxOpacity = maxOpacity;
                        maps.refresh();
                    }
                };
            highlightCheckBox.change = opacity = function (e) {
                var minOpacity = document.getElementById('minopacity');
                var maxOpacity = document.getElementById('maxopacity');
                if (e.checked) {
                    document.getElementById('text2').style.display = 'block';
                    document.getElementById('input2').style.display = 'block';
                    document.getElementById('text3').style.display = 'block';
                    document.getElementById('input3').style.display = 'block';
                    maps.layers[0].shapeSettings.colorMapping[0].minOpacity = parseFloat(minOpacity.value);
                    maps.layers[0].shapeSettings.colorMapping[0].maxOpacity = parseFloat(maxOpacity.value);
                    maps.layers[0].shapeSettings.colorMapping[1].minOpacity = parseFloat(minOpacity.value);
                    maps.layers[0].shapeSettings.colorMapping[1].maxOpacity = parseFloat(maxOpacity.value);
                    minOpacity.disabled = false;
                    maxOpacity.disabled = false;
                }
                else {
                    document.getElementById('text2').style.display = 'none';
                    document.getElementById('input2').style.display = 'none';
                    document.getElementById('text3').style.display = 'none';
                    document.getElementById('input3').style.display = 'none';
                    maps.layers[0].shapeSettings.colorMapping[0].minOpacity = null;
                    maps.layers[0].shapeSettings.colorMapping[0].maxOpacity = null;
                    maps.layers[0].shapeSettings.colorMapping[1].minOpacity = null;
                    maps.layers[0].shapeSettings.colorMapping[1].maxOpacity = null;
                    minOpacity.disabled = true;
                    maxOpacity.disabled = true;
                }
                maps.refresh();
            };
            var sampleValue = new ej.dropdowns.DropDownList({
                index: 0,
                placeholder: 'Range ColorMaping',
                width: '100%',
                change: function () {
                    var element = sampleValue.value.toString();
                    if (element === 'RangeColorMapping') {
                        document.getElementById('text1').style.display = 'none';
                        document.getElementById('input1').style.display = 'none';
                        document.getElementById('text2').style.display = 'none';
                        document.getElementById('input2').style.display = 'none';
                        document.getElementById('text3').style.display = 'none';
                        document.getElementById('input3').style.display = 'none';
                        maps.layers[0].shapeSettings.colorValuePath = 'inches';
                        maps.layers[0].shapeSettings.colorMapping[0].from = 0.1;
                        maps.layers[0].shapeSettings.colorMapping[0].to = 1;
                        maps.layers[0].shapeSettings.colorMapping[0].color = '#DEEBAE';
                        maps.layers[0].shapeSettings.colorMapping[0].label = '0 - 1';
                        maps.layers[0].shapeSettings.colorMapping[0].value = null;
                        maps.layers[0].shapeSettings.colorMapping[1].from = 1;
                        maps.layers[0].shapeSettings.colorMapping[1].to = 2;
                        maps.layers[0].shapeSettings.colorMapping[1].color = '#A4D6AD';
                        maps.layers[0].shapeSettings.colorMapping[1].label = '1 - 2';
                        maps.layers[0].shapeSettings.colorMapping[1].value = null;
                        maps.layers[0].shapeSettings.colorMapping[2].from = 2;
                        maps.layers[0].shapeSettings.colorMapping[2].to = 3;
                        maps.layers[0].shapeSettings.colorMapping[2].color = '#37AFAB';
                        maps.layers[0].shapeSettings.colorMapping[2].label = '2 - 3';
                        maps.layers[0].shapeSettings.colorMapping[2].value = null;
                        maps.layers[0].shapeSettings.colorMapping[3].from = 3;
                        maps.layers[0].shapeSettings.colorMapping[3].to = 4;
                        maps.layers[0].shapeSettings.colorMapping[3].color = '#547C84';
                        maps.layers[0].shapeSettings.colorMapping[3].label = '3 - 4';
                        maps.layers[0].shapeSettings.colorMapping[3].value = null;
                        maps.layers[0].shapeSettings.colorMapping[4].from = 4;
                        maps.layers[0].shapeSettings.colorMapping[4].to = 5;
                        maps.layers[0].shapeSettings.colorMapping[4].color = '#CEBF93';
                        maps.layers[0].shapeSettings.colorMapping[4].label = '4 - 5';
                        maps.layers[0].shapeSettings.colorMapping[4].value = null;
                        maps.layers[0].shapeSettings.colorMapping[5].from = 5;
                        maps.layers[0].shapeSettings.colorMapping[5].to = 6;
                        maps.layers[0].shapeSettings.colorMapping[5].color = '#a69d70';
                        maps.layers[0].shapeSettings.colorMapping[5].label = '5 - 6';
                        maps.layers[0].shapeSettings.colorMapping[5].value = null;
                        maps.legendSettings.title.text = 'Inches';
                        maps.refresh();
                    }
                    else if (element === 'EqualColorMapping') {
                        document.getElementById('text1').style.display = 'none';
                        document.getElementById('input1').style.display = 'none';
                        document.getElementById('text2').style.display = 'none';
                        document.getElementById('input2').style.display = 'none';
                        document.getElementById('text3').style.display = 'none';
                        document.getElementById('input3').style.display = 'none';
                        maps.layers[0].shapeSettings.colorValuePath = 'value';
                        maps.layers[0].shapeSettings.colorMapping[0].from = null;
                        maps.layers[0].shapeSettings.colorMapping[0].to = null;
                        maps.layers[0].shapeSettings.colorMapping[0].color = '#DEEBAE';
                        maps.layers[0].shapeSettings.colorMapping[0].label = null;
                        maps.layers[0].shapeSettings.colorMapping[0].value = 'Low';
                        maps.layers[0].shapeSettings.colorMapping[1].from = null;
                        maps.layers[0].shapeSettings.colorMapping[1].to = null;
                        maps.layers[0].shapeSettings.colorMapping[1].value = 'Moderate';
                        maps.layers[0].shapeSettings.colorMapping[1].color = '#A4D6AD';
                        maps.layers[0].shapeSettings.colorMapping[1].label = null;
                        maps.layers[0].shapeSettings.colorMapping[5].label = null;
                        maps.layers[0].shapeSettings.colorMapping[2].to = null;
                        maps.layers[0].shapeSettings.colorMapping[2].from = null;
                        maps.layers[0].shapeSettings.colorMapping[2].color = '#37AFAB';
                        maps.layers[0].shapeSettings.colorMapping[2].value = 'High';
                        maps.layers[0].shapeSettings.colorMapping[2].label = null;
                        maps.layers[0].shapeSettings.colorMapping[3].to = null;
                        maps.layers[0].shapeSettings.colorMapping[5].color = null;
                        maps.layers[0].shapeSettings.colorMapping[3].color = null;
                        maps.layers[0].shapeSettings.colorMapping[3].from = null;
                        maps.layers[0].shapeSettings.colorMapping[4].value = null;
                        maps.layers[0].shapeSettings.colorMapping[5].from = null;
                        maps.layers[0].shapeSettings.colorMapping[3].label = null;
                        maps.layers[0].shapeSettings.colorMapping[4].from = null;
                        maps.layers[0].shapeSettings.colorMapping[4].to = null;
                        maps.layers[0].shapeSettings.colorMapping[3].value = null;
                        maps.layers[0].shapeSettings.colorMapping[4].color = null;
                        maps.layers[0].shapeSettings.colorMapping[4].label = null;
                        maps.layers[0].shapeSettings.colorMapping[5].to = null;
                        maps.layers[0].shapeSettings.colorMapping[5].value = null;
                        maps.legendSettings.title.text = 'Category';
                        maps.refresh();
                    }
                    if (element === 'DesaturationColorMapping') {
                        document.getElementById('text1').style.display = 'block';
                        document.getElementById('input1').style.display = 'block';
                        var minOpacity = document.getElementById('minopacity');
                        var maxOpacity = document.getElementById('maxopacity');
                        if (highlightCheckBox.checked) {
                            document.getElementById('text2').style.display = 'block';
                            document.getElementById('input2').style.display = 'block';
                            document.getElementById('text3').style.display = 'block';
                            document.getElementById('input3').style.display = 'block';
                            maps.layers[0].shapeSettings.colorMapping[0].minOpacity = parseFloat(minOpacity.value);
                            maps.layers[0].shapeSettings.colorMapping[0].maxOpacity = parseFloat(maxOpacity.value);
                        }
                        else {
                            maps.layers[0].shapeSettings.colorMapping[0].minOpacity = null;
                            maps.layers[0].shapeSettings.colorMapping[0].maxOpacity = null;
                        }
                        maps.layers[0].shapeSettings.colorValuePath = 'inches';
                        maps.layers[0].shapeSettings.colorMapping[0].from = 0.1;
                        maps.layers[0].shapeSettings.colorMapping[0].to = 6;
                        maps.layers[0].shapeSettings.colorMapping[0].color = ['#F0D6AD', '#19547B'];
                        maps.layers[0].shapeSettings.colorMapping[0].value = null;
                        maps.layers[0].shapeSettings.colorMapping[0].label = '0 - 6';
                        maps.layers[0].shapeSettings.colorMapping[1].from = null;
                        maps.layers[0].shapeSettings.colorMapping[1].to = null;
                        maps.layers[0].shapeSettings.colorMapping[1].color = null;
                        maps.layers[0].shapeSettings.colorMapping[1].value = null;
                        maps.layers[0].shapeSettings.colorMapping[1].label = null;
                        maps.layers[0].shapeSettings.colorMapping[2].from = null;
                        maps.layers[0].shapeSettings.colorMapping[2].to = null;
                        maps.layers[0].shapeSettings.colorMapping[2].color = null;
                        maps.layers[0].shapeSettings.colorMapping[2].value = null;
                        maps.layers[0].shapeSettings.colorMapping[2].label = null;
                        maps.layers[0].shapeSettings.colorMapping[3].from = null;
                        maps.layers[0].shapeSettings.colorMapping[3].to = null;
                        maps.layers[0].shapeSettings.colorMapping[3].color = null;
                        maps.layers[0].shapeSettings.colorMapping[3].label = null;
                        maps.layers[0].shapeSettings.colorMapping[3].value = null;
                        maps.layers[0].shapeSettings.colorMapping[4].from = null;
                        maps.layers[0].shapeSettings.colorMapping[4].to = null;
                        maps.layers[0].shapeSettings.colorMapping[4].color = null;
                        maps.layers[0].shapeSettings.colorMapping[4].label = null;
                        maps.layers[0].shapeSettings.colorMapping[4].value = null;
                        maps.layers[0].shapeSettings.colorMapping[5].from = null;
                        maps.layers[0].shapeSettings.colorMapping[5].to = null;
                        maps.layers[0].shapeSettings.colorMapping[5].color = null;
                        maps.layers[0].shapeSettings.colorMapping[5].label = null;
                        maps.layers[0].shapeSettings.colorMapping[5].value = null;
                        maps.legendSettings.title.text = 'Inches';
                        maps.refresh();
                       
                    }
                }
            });
            sampleValue.appendTo('#colorMapping');
        }
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes the continents in the world by rendering them in a map layer. Also marks the office locations of YouTube in the world using markers.
        </p>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Color Mapping in ASP.NET MVC Maps control. Explore here for more details."/>
                }
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render a map with the provided GeoJSON data. Group of shapes can be combined to form a layer of the map. You can bind the desired colors from the data source to the map shapes. The marker templates are used to display the names for shapes and mark specific locations. Legend is enabled in this example to represent each continent.
        </p>
        <p>
            Tooltip is enabled in this example. To see the tooltip in action, hover the mouse over a shape or tap a shape in touch enabled devices.
        </p>
        <br />
        <p style="font-weight: 500">Injecting Module</p>
        <p>
            Maps component features are segregated into individual feature-wise modules. To use a marker, inject the <code>Marker</code> module using the <code>Maps.Inject(Marker)</code> method, and use a legend by injecting the <code>Legend</code> module.
        </p>
    </div>
}



@section Title{
                    <title>ASP.NET MVC Maps Color Mapping Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Color Mapping in ASP.NET MVC Maps Control</h1>
                }
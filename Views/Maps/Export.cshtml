@using Syncfusion.EJ2
@using Syncfusion.EJ2.Maps
@{
    List<object> markerData = new List<object>();
    markerData.Add(new { longitude = 116.5703749, latitude = 40.4319077, name = "The Great Wall of China, China" });
    markerData.Add(new { longitude = 35.4443622, latitude = 30.3284544, name = "Petra, Jorden" });
    markerData.Add(new { longitude = 78.0421552, latitude = 27.1750151, name = "Taj Mahal, Agra, India" });
    markerData.Add(new { longitude = 12.4922309, latitude = 41.8902102, name = "The Roman Colosseum, Rome, Italy" });
    markerData.Add(new { longitude = -88.5677826, latitude = 20.6842849, name = "The Chichen Itza, Mexico" });
    markerData.Add(new { longitude = -72.5449629, latitude = -13.1631412, name = "Machu Picchu, Peru" });
    markerData.Add(new { longitude = -43.2104872, latitude = -22.951916, name = "Christ Redeemer, Rio de janeiro, Brazil" });

}
@section ControlsSection{
    <style>
        #control-container {
            padding: 0px !important;
        }

        #container {
            display: table;
            margin: 0 auto;
        }
        .e-play-icon1::before {
            content: '\e728';
        }

        .e-view.fluent .e-play-icon1::before, .e-view.fluent-dark .e-play-icon1::before {
            content: '\e72e';
        }

        .e-view.fabric .e-play-icon1::before, .e-view.fabric-dark .e-play-icon1::before {
            content: '\e710';
        }

        .e-view.bootstrap4 .e-play-icon1::before {
            content: '\e780';
        }

        .e-view.highcontrast .e-play-icon1::before {
            content: '\e710';
        }

        .e-view.bootstrap5 .e-play-icon1::before, .e-view.bootstrap5-dark .e-play-icon1::before {
            content: '\e72e';
        }
    </style>

    <div class="col-lg-9 control-section">
        <div id="outer" style="width:100%">
            <div class="content-wrapper">
                @Html.EJS().Maps("container").Load("loadMaps").AllowPdfExport(true).AllowImageExport(true).TitleSettings(title => title.Text("Location of the Wonders in the World").TextStyle(new MapsFont{ Size = "16px", Opacity = 1 })).LegendSettings(legend => legend.Visible(true)).ZoomSettings(zoom => zoom.Enable(false)).Layers(new List<Syncfusion.EJ2.Maps.MapsLayer>{
       new Syncfusion.EJ2.Maps.MapsLayer
       {
           ShapeData = ViewData["ShapeData"],

           MarkerSettings = new List<Syncfusion.EJ2.Maps.MapsMarker>
           {
               new Syncfusion.EJ2.Maps.MapsMarker
               {
                   Visible = true, Height = 20,Width = 15,Shape = Syncfusion.EJ2.Maps.MarkerType.Balloon,
                   Fill = "#E13E40", AnimationDuration = 0, DataSource = markerData,
                   TooltipSettings = new MapsTooltipSettings{ Visible = true, ValuePath = "name" }

               },

           }
        }}
   ).Render()
                <div style="margin-left:75%">
                    Source:
                    <a href="http://www.emapsworld.com/world-seven-wonder-map.html" target="_blank" aria-label="wikipedia">en.wikipedia.org</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%;">
          <tr style="height: 50px">
                <td>
                    <div style="margin-left: -10px;">
                        Map Type
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("Map").Index(0).Width("100%").DataSource(ViewData["format1"]).Value("Geometry").Change("valueChange1").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div style="margin-left: -10px;">
                        Export Type
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("Export").Index(0).Width("100%").DataSource(ViewData["format"]).Value("JPEG").Change("valueChange").Render()
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td>
                    <div style="margin-left: -10px">File Name</div>
                </td>
                <td>
                    <div style='margin-top: 0px;'>
                        @Html.EJS().TextBox("fileName").Value("Maps").Width("100%").Render()
                    </div>
                </td>
            </tr>
            <tr id="button-control" style="height: 50px">
                <td align="center">
                    <div style="margin-left: 50%; padding-left: 0px">
                        @Html.EJS().Button("togglebtn").Content("Export").IsPrimary(true).Render()
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <script>
        var maps;
        var shapeData;
        function loadMaps(args) {
            args.maps.layers[0].shapeSettings = { fill: 'lightgrey', border: { color: 'black', width: 0.1 } };
            var theme = themeName ? themeName : 'Material';
            args.maps.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, "Dark").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');
            args.maps.layers[0].markerSettings[0].animationDuration = 0;
            maps = args.maps;
            if (shapeData == null) {
                shapeData = maps.layers[0].shapeData;
            }
        }
        var modeData = ['JPEG', 'PNG', 'PDF', 'SVG'];
        var exportMode = 'JPEG';
        function valueChange() {
            var exportType = document.getElementById('Export').ej2_instances[0];
            exportMode = exportType.value;
        }

        function valueChange1() {
            maps = document.getElementById('container').ej2_instances[0];
            var layerType = document.getElementById('Map').ej2_instances[0];
            var exportDrop = document.getElementById('Export').ej2_instances[0];
            if (layerType.value === 'OSM') {
                maps.layers[0].urlTemplate = "https://tile.openstreetmap.org/level/tileX/tileY.png";
                maps.layers[0].shapeData = null;
                if (exportDrop.value === 'SVG')
                {
                    exportDrop.value = exportDrop.dataSource[0];
                }
                exportDrop.dataSource = modeData.slice(0, 3);
            } else {
                maps.layers[0].urlTemplate = "";
                maps.layers[0].shapeData = shapeData;
                exportDrop.dataSource = modeData;
            }
            maps.refresh();
        }

        document.getElementById('togglebtn').onclick = function () {
            var map = document.getElementById('container').ej2_instances[0];
            var fileName = (document.getElementById('fileName')).value;
            maps.export(exportMode, fileName);
        };
    </script>
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates the exporting feature in Maps. You can modify the map type to geometric or OSM using the Map type dropdown list in this sample. By clicking the Export button, you can export the map in PNG, JPEG, SVG or in PDF formats.
        </p>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Export in ASP.NET MVC Maps control. Explore here for more details."/>
                }
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render and configure the export functionality. The rendered map can be exported as either JPEG, PNG, SVG, and PDF formats. Also this sample visualizes the locations of the wonders in the world using markers. Export functionality is done by <code>export</code> method when <code>AllowImageExport</code> and <code>AllowPdfExport</code> are set as true.
        </p>
		<p>
			More information about export can be found in this
			<a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/maps/print#export" aria-label="documentation section" >documentation section</a>.
		</p>
        <br />

    </div>
}






@section Title{
                    <title>ASP.NET MVC Maps Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Export in ASP.NET MVC Maps Control</h1>
                }

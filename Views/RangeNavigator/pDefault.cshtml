@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">
        <div class="row">
            <div class="col-sm-12">
                <div class="row" style="width:80%;">
                    <div class="col-sm-8">
                        <div id="text" style="display: flex;
                             align-items: center;
                             justify-content: space-between;" align="left;">
                            <span class="title-text">Bitcoin (USD) Price</span>
                        </div>
                    </div>
                    <div class="col-sm-4" align="right" style="margin-top: 3%">
                        <label for="switch" style="font-size: 16px">Closing Price </label>
                        @Html.EJS().Switch("switch").Checked(true).Value("Closing Value").CssClass("custom-iOS").Name("Closing Value").Change("switchChanged").Render()
                        <label for="switch1" style="font-size: 16px">OHLC</label>

                    </div>
                </div>
            </div>
            <div class="col-sm-12">
                <div class="row" align="center" style="width: 90%" >
                    <div id="container">
                        @(Html.EJS().RangeNavigator("container")
                            .LabelPosition(Syncfusion.EJ2.Charts.AxisPosition.Outside)
                    .ValueType(Syncfusion.EJ2.Charts.RangeValueType.DateTime)
                    .XName("date").YName("Close").DisableRangeSelector(true)
                    .PeriodSelectorSettings(ps => ps.Position(Syncfusion.EJ2.Charts.PeriodSelectorPosition.Top)
                    .Periods(periods=> { periods.Text("1M").Interval(1).IntervalType(Syncfusion.EJ2.Charts.RangeIntervalType.Months).Add();
                        periods.Text("3M").Interval(3).IntervalType(Syncfusion.EJ2.Charts.RangeIntervalType.Months).Add();
                        periods.Text("6M").Interval(6).IntervalType(Syncfusion.EJ2.Charts.RangeIntervalType.Months).Add();
                        periods.Text("YTD").Add();
                        periods.Text("1Y").Interval(1).Add();
                        periods.Text("2Y").Interval(2).Selected(true).Add();
                        periods.Text("All").Add();
                    }))
                    .Load("load").Loaded("loaded").Changed("changed").Render()
                        )
                    </div>
                    <div id="chartcontainer" align="center">
                        @Html.EJS().Chart("chart").Annotations(an =>
           {
               an.Content("<div id='annotation'></div>").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Pixel).X("15%").Y("25%").Region(Syncfusion.EJ2.Charts.Regions.Chart).Add();
           }).Series(series =>
                   {
                       series.Animation(animation=>animation.Enable(true))
                       .Type(Syncfusion.EJ2.Charts.ChartSeriesType.Candle)
                       .XName("date").YName("Close").High("High").Low("Low")
                       .Open("Open").Close("Close").Volume("Volume")
                       .BearFillColor("#2ecd71").BullFillColor("#e74c3d").Name("Bitcoin").Width(2).Add();
                   }).ZoomSettings(zn => zn.EnableMouseWheelZooming(true).Mode(Syncfusion.EJ2.Charts.ZoomMode.X)
                   .ToolbarItems(ViewData["toolbaritems"])).Crosshair(cr => cr.Enable(true)
               ).PrimaryXAxis(px => px.EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift)
               .ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).MajorGridLines(mg=>mg.Width(0))
                 ).PrimaryYAxis(py => py.OpposedPosition(true).LabelFormat("n0").LineStyle(ls=>ls.Width(0))
                 ).Height("250").ChartArea(area => area.Border(br=>br.Width(0))).Tooltip(tl => tl.Enable(true).Shared(true)).LegendSettings(lg => lg.Visible(false)).Load("chartload").AxisLabelRender("axislabelrender").TooltipRender("tooltiprender").ChartMouseMove("chartmousemove").Render()


                    </div>
                    <div id="rangecontainer" align="center">
                        @(Html.EJS().RangeNavigator("container1")
                            .LabelPosition(Syncfusion.EJ2.Charts.AxisPosition.Outside)
                    .ValueType(Syncfusion.EJ2.Charts.RangeValueType.DateTime)
                    .Series(sr =>
                    {
                        sr.XName("date").YName("Close").Add();
                    })
                    .Load("load1").Changed("changed1").Render()
                        )
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        #control-container {
            padding: 0px !important;
        }

        .e-switch-wrapper {
            margin-top: 5%;
            width: 15%;
        }
        .title-text {
            font-size: 36px;
            margin-top: 20px !important;
            margin-bottom: 10px !important;
            font-family: inherit;
            font-weight: 500;
            line-height: 1.1;
            color: inherit;
            margin: 0.67em 0;
        }
        #chart_tooltip {
            opacity: 0;
        }

        #chart_HorizontalLine, #chart_VerticalLine {
            stroke-dasharray: 2;
        }
    </style>
    <script src="~/Scripts/datasource.js"></script>
    <script src="~/Scripts/range-navigator/theme-color.js"></script>
    <script>
        var data = [];
        var j = 0;
        for (var i = 1200; i < periodData.length; i++) {
            if (i < periodData.length - 10) {
                data.push({
                    High: periodData[i].High,
                    Low: periodData[i].Low,
                    Close: periodData[i].Close,
                    Open: periodData[i].Open,
                    date: new Date(2010, 6, i)
                });
            }
            else {
                data.push({
                    High: periodData[i].High,
                    Low: periodData[i].Low,
                    Close: periodData[i].Close,
                    Open: periodData[i].Open,
                    date: new Date(data[data.length - 1].date.setHours(j))
                });
            }
        }
        var zoomFactor, zoomPosition, startDate, endDate;
        var load = function (args) {
            loadRangeNavigatorTheme(args);
            args.rangeNavigator.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.rangeNavigator.dataSource = data;
        }
        var load1 = function (args) {
            loadRangeNavigatorTheme(args);
            args.rangeNavigator.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.rangeNavigator.series[0].dataSource = data;
			args.rangeNavigator.value = [new Date('2016-05-15'), new Date('2018-05-15')];
        }
        var loaded = function (args) {
            if (!ej.base.Browser.isDevice && document.getElementById('container_Secondary_Element')) {
                document.getElementById('container_Secondary_Element').style.transform = 'translate(13%)';
            }
        }
        function switchChanged(args) {
            var chart = document.getElementById("chart").ej2_instances[0];
            if (!args.checked) {
                chart.series[0].type = 'Line';
                chart.annotations[0].content = '';
                chart.refresh();
            }
            else {
                chart.series[0].type = 'Candle';
                chart.annotations[0].content = '';
                chart.refresh();
            }
        }

        var axislabelrender = function (args) {
            if (args.axis.opposedPosition) {
                var value = Math.round(Number(args.text)) / 1000;
                args.text = '$' + String(value) + 'k';
            }
        }
        var chartload = function (args) {
            var theme = loadChartTheme(args);
            args.chart.theme = theme;
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "80%";
            args.chart.series[0].dataSource = data;
            args.chart.tooltip.format = args.chart.series[0].type === 'Candle' ?
                '${point.x}<br/>High : <b>${point.high}</b><br/>Low : <b>${point.low}</b><br/>' +
                    'Open : <b>${point.open}</b><br/>Close : <b>${point.close}</b>' :
                '${point.x}<br/>Close : <b>${point.close}</b>';
        }
        var changed = function (args) {
            if ((document.getElementById('chart').childNodes.length > 1)) {
                var chart = document.getElementById('chart').ej2_instances[0];
                chart.primaryXAxis.zoomFactor = args.zoomFactor;
                chart.primaryXAxis.zoomPosition = args.zoomPosition;
                chart.series[0].animation.enable = false;               
                chart.dataBind();
            }
            if ((document.getElementById('container1').childNodes.length > 0)) {
                var range2 = document.getElementById('container1').ej2_instances[0];
                range2.rangeSlider.setSlider(args.start.getTime(), args.end.getTime(), false, false);
            }
        }
        var changed1 = function (args) {
            if ((document.getElementById('container').childNodes.length > 1)) {
                var range1 = document.getElementById('container').ej2_instances[0];
                range1.periodSelectorModule.datePicker.startDate = args.start;
                range1.periodSelectorModule.datePicker.endDate = args.end;
                range1.dataBind();
            }
            if ((document.getElementById('chart').childNodes.length > 1)) {
                var chart = document.getElementById('chart').ej2_instances[0];
                chart.primaryXAxis.zoomFactor = args.zoomFactor;
                chart.primaryXAxis.zoomPosition = args.zoomPosition;
                chart.dataBind();
            }
        }
        var tooltiprender = function (args) {
            var chart = document.getElementById('chart').ej2_instances[0];
            if (args.text.length > 0) {
                var text = args.text.split('<br/>');
                var html = '<table><thead>' + text[0] + '</thead>';
                var value = void 0;
                for (var i = 1; i < text.length; i++) {
                    value = text[i].split(':');
                    html += '<tr><td style="opacity:0.5">' + value[0] + ':</td><td style="padding-left: 5px;">$' +
                        (+value[1].split(' <b>')[1].split('</b>')[0]).toFixed(2) + '</td></tr>';
                }
                html += '</table>';
                chart.setAnnotationValue(0, '<div id="annotation" style="line-height: 18px; font-size: 13px;background: #fff; opacity:0.9; color: #464e56; ' +
                    ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px; border-radius: 3px">' + html + '</div>');
            }
            args.text = '';
        }
        var chartmousemove = function (args) {
            var chart = document.getElementById('chart').ej2_instances[0];
            if (!ej.charts.withInBounds(args.x, args.y, chart.chartAxisLayoutPanel.seriesClipRect)) {
                removeSecondaryElement();
            }
        }
        function removeSecondaryElement() {
            setTimeout(function () {
                if (ej.charts.getElement("annotation")) {
                    ej.base.remove(ej.charts.getElement("annotation"));
                }
            }, 2000);
        }
    </script>
}
             @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Default in ASP.NET MVC Range Selector control. Explore here for more details."/>
                }
             @*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates a stock chart with candle series and a momentum indicator.
        Period Selector shows the information about the stock chart range values.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Period Selector.
        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Range Selector Default Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default in ASP.NET MVC Range Selector Control</h1>
                }
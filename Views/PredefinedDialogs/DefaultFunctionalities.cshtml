@using Syncfusion.EJ2.Popups
@using Syncfusion.EJ2

@section ControlsSection{
    <div id="predefinedDialogDefault" class="col-lg-12 control-section">
        @Html.EJS().Button("alertBtn").Content("Alert").CssClass("e-warning").Render()
        @Html.EJS().Button("confirmBtn").Content("Confirm").CssClass("e-success").Render()
        @Html.EJS().Button("promptBtn").Content("Prompt").IsPrimary(true).Render()
        <span id="statusText"></span>
    </div>
}
@section PreScripts {
    <script>
        var dialogObj;
        var alertBtn = new ej.buttons.Button({});
        alertBtn.appendTo('#alertBtn');
        document.getElementById('alertBtn').onclick = function () {
            document.getElementById("statusText").style.display = "none";
            dialogObj = ej.popups.DialogUtility.alert({
                title: 'Low Battery',
                content: '10% of battery remaining',
                okButton: { click: alertBtnClick.bind(this) },
                position: { X: 'center', Y: 'center' },
                closeOnEscape: true,
                close: alertBtnClick
            });
        };
        function alertBtnClick() {
            dialogObj.hide();
            document.getElementById("statusText").innerHTML = "The user closed the Alert dialog.";
            document.getElementById("statusText").style.display = "block";
        }

        var confirmBtn = new ej.buttons.Button({});
        confirmBtn.appendTo('#confirmBtn');
        document.getElementById('confirmBtn').onclick = function () {
            document.getElementById("statusText").style.display = "none";
            dialogObj = ej.popups.DialogUtility.confirm({
                title: ' Delete Multiple Items',
                content: "Are you sure you want to permanently delete these items?",
                okButton: { click: confirmOkAction.bind(this) },
                cancelButton: { click: confirmCancelAction.bind(this) },
                position: { X: 'center', Y: 'center' },
                closeOnEscape: true,
                close: confirmCancelAction
            });
        };
        var confirmOkAction = function () {
            dialogObj.hide();
            document.getElementById("statusText").innerHTML = " The user confirmed the dialog box";
            document.getElementById("statusText").style.display = "block";
        };
        var confirmCancelAction = function () {
            dialogObj.hide();
            document.getElementById("statusText").innerHTML = "The user canceled the dialog box.";
            document.getElementById("statusText").style.display = "block";
        };
        var promptBtn = new ej.buttons.Button({});
        promptBtn.appendTo('#promptBtn');
        document.getElementById('promptBtn').onclick = function () {
            document.getElementById("statusText").style.display = "none";
            dialogObj = ej.popups.DialogUtility.confirm({
                title: 'Join Chat Group',
                content: '<p>Enter your name: </p><input id= "inputEle" type="text" name="Required" class="e-input" placeholder="Type here.." />',
                okButton: { click: promptOkAction.bind(this) },
                cancelButton: { click: promptCancelAction.bind(this) },
                position: { X: 'center', Y: 'center' },
                closeOnEscape: true,
                close: promptOkAction
            });
        };
        function promptOkAction() {
            var value;
            value = document.getElementById("inputEle").value;
            if (value == "") {
                dialogObj.hide();
                document.getElementById("statusText").innerHTML = "The user's input is returned as \" \" ";
                document.getElementById("statusText").style.display = "block";
            }
            else {
                dialogObj.hide();
                document.getElementById("statusText").innerHTML = "The user's input is returned as" + " " + value;
                document.getElementById("statusText").style.display = "block";
            }
        }
        function promptCancelAction() {
            dialogObj.hide();
            document.getElementById("statusText").innerHTML = "The user canceled the prompt dialog";
            document.getElementById("statusText").style.display = "block";
        }
    </script>
    <style>
        #predefinedDialogDefault {
            padding: 25px 0 0 15px;
        }

            #predefinedDialogDefault #statusText {
                font-size: 16px;
                margin-top: 20px;
            }

            #predefinedDialogDefault .e-btn {
                margin-right: 5px;
            }

        .e-alert-dialog.e-dialog.e-popup, .e-confirm-dialog.e-dialog.e-popup {
            margin: 30px auto;
            width: auto;
        }
    </style>
}
@section ActionDescription{
    <div id="action-description">
        <p>This example demonstrates the usage of dialog utility to display various forms of dialog, including<b> alert, confirm </b>and <b>prompt</b> dialog. Three buttons have been added to this example, click one of them to open the relevant dialog box.</p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            The predefined dialogs are used to display messages and collect user input within a web page. The following are the three types of Dialogs:
        </p>
        <ul>
            <li><code>Alert</code>- Used to show errors, warnings, and information that need user awareness.</li>
            <li><code>Confirm</code> - Used to get approval from user that appears before any critical action.</li>
            <li><code>Prompt</code> - Used to get input from the user. </li>
        </ul>
        <p>
            <b>See also</b>
        </p>
        <ul>
            <li>
                <a target="_blank"
                   href="https://ej2.syncfusion.com/aspnetmvc/documentation/dialog/how-to/render-a-dialog-using-utility-functions" aria-label="Getting started with predefined dialogs">
                    Getting started with predefined dialogs
                <span class="sr-only">opens in a new tab</span></a>
            </li>
        </ul>

    </div>
}

@*custom code start*@

@section Meta{
    <meta name="description" content="This example demonstrates the Default Functionalities in ASP.NET MVC Predefined Dialogs control. Explore here for more details." />
}

@*custom code end*@
@section Title{
    <title>ASP.NET MVC Predefined Dialogs Default Functionalities Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Default Functionalities in ASP.NET MVC Predefined Dialogs Control</h1>
}
@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" style="width:100%;height:100%;float:left; padding: 0px">
        <div>
            @(Html.EJS().Toolbar("toolbar_default").Clicked("onItemClick").Items((List<Syncfusion.EJ2.Navigations.ToolbarItem>)ViewData["tbItems"]).Render())
        </div>
        <div class="diagram-content-wrapper">
            @(Html.EJS().Diagram("diagram-container").Width("100%").Height("580px").Created("fitToPage").SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None))
    .PageSettings(s => s.Width(550).Height(500).MultiplePage(true)).GetConnectorDefaults("getConnectorDefaults").Nodes((List<Syncfusion.EJ2.Diagrams.DiagramNode>)ViewData["nodes"]).Connectors((List<Syncfusion.EJ2.Diagrams.DiagramConnector>)ViewData["connectors"]).Render()
            )

        </div>
        <div>
            @(Html.EJS().SplitButton("exportBtn").Content("Export").Items(ViewData["exportItems"]).IconCss("e-export e-icons").Select("onselect").Render())
        </div>
        <div>
            @(Html.EJS().CheckBox("multiplePageCb").Label("Multiple Page").Render())
        </div>
    </div>
    <style type="text/css">
        .diagram-content-wrapper {
            border: 1px solid #e0e0e0;
        }

        #diagram-container {
            display: block;
        }
    </style>
    <script>

        function fitToPage() {
            var diagram = document.getElementById("diagram-container").ej2_instances[0];
            diagram.fitToPage();

        }
        function getConnectorDefaults(connector, diagram) {
            connector.style.strokeColor = '#6d6d6d';
            return connector;
        }

        function onselect(args) {
            var diagram = document.getElementById("diagram-container").ej2_instances[0];
            var checkBoxObj = document.getElementById("multiplePageCb").ej2_instances[0]
            var exportOptions = {};
            exportOptions.format = args.item.text;
            exportOptions.mode = 'Download';
            exportOptions.region = 'PageSettings';
            exportOptions.multiplePage = checkBoxObj.checked;
            exportOptions.fileName = 'Export';
            exportOptions.margin = { left: 0, top: 0, bottom: 0, right: 0 };
            diagram.exportDiagram(exportOptions);
        }
        function onItemClick(args) {
             if (args.item.text === 'Print') {
                var diagram = document.getElementById("diagram-container").ej2_instances[0];
                var checkBoxObj = document.getElementById("multiplePageCb").ej2_instances[0]
                var printOptions = {};
                printOptions.mode = 'Data';
                printOptions.region = 'PageSettings';
                printOptions.multiplePage = checkBoxObj.checked;
                printOptions.margin = { left: 0, top: 0, bottom: 0, right: 0 };
                diagram.print(printOptions);
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample demonstrates printing and exporting the diagram as images.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Print and Export in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to print the diagram and how to export the diagram as image (*.jpg, *.png, and *bmp) and in
        SVG format. The <code>exportDiagram</code> method can be used to export the diagram.
        The <code>exportDiagram</code> method takes the exporting options (file formats, mode of export, and the region to
        export) as input. The <code>print</code> method can be used to print the diagrams.
    </p>
    <br>
}



@section Title{
                    <title>ASP.NET MVC Diagram Print and Export Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Print and Export in ASP.NET MVC Diagram Control</h1>
                }
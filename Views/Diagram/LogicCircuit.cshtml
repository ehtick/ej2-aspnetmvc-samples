@using Syncfusion.EJ2.Navigations;
@section ControlsSection{

    <div class="control-section diagram-logic-circuit-container">
        <div id="logicCircuit" style="width: 100%; height: 600px">
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="diagram-logic-circuit-icons e-toggle-palette"></div>
            </div>
            <div id="palette-space" class="sb-mobile-palette">
                @(Html.EJS().SymbolPalette("symbolPalette").Palettes((List<Syncfusion.EJ2.Diagrams.SymbolPalettePalette>)ViewData["Palette"]).GetSymbolInfo("getSymbolInfo").ExpandMode(ExpandMode.Multiple).Width("100%").Height("600px")
                                                    .SymbolHeight(60).SymbolWidth(62).GetNodeDefaults("getSymbolNodes").Render()
                )
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                @(Html.EJS().Diagram("container").Width("100%").Height("100%").SnapSettings(new Syncfusion.EJ2.Diagrams.DiagramSnapSettings() { Constraints = Syncfusion.EJ2.Diagrams.SnapConstraints.None })
                                                    .Created("diagramCreated").GetNodeDefaults("getNodeDefaults").GetConnectorDefaults("getConnectorDefaults").Nodes((List<Syncfusion.EJ2.Diagrams.DiagramNode>)ViewData["nodes"]).Connectors((List<Syncfusion.EJ2.Diagrams.DiagramConnector>)ViewData["connectors"]).Render()
                )
            </div>
        </div>
    </div>

    <style>
        #container {
            displaY = block;
        }

        #symbolPalette {
            displaY: block;
        }

        @@font-face {
            font-familY: 'diagram-logic-circuit-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
            font-weight: normal;
            font-style: normal;
        }

        .diagram-logic-circuit-icons {
            font-familY: 'diagram-logic-circuit-icons';
            speak: none;
            font-size: 16px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        /* These styles are used for aligning palette and diagram */
        .diagram-logic-circuit-container .sb-mobile-palette {
            width: 240px;
            height: 100%;
            float: left;
        }

        .diagram-logic-circuit-container .sb-mobile-palette-bar {
            displaY: none;
        }

        .diagram-logic-circuit-container .sb-mobile-diagram {
            width: calc(100% - 242px);
            height: 100%;
            float: left;
            border: 1px solid rgba(0, 0, 0, 0.12);
            border-left: none;
        }

        @@media (max-width: 550px) {

            .diagram-logic-circuit-container .sb-mobile-palette {
                z-indeX: 19;
                position: absolute;
                displaY = none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .diagram-logic-circuit-container .sb-mobile-palette-bar {
                displaY: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            .diagram-logic-circuit-container .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            #paletteIcon {
                font-size: 20px;
            }
        }

        .diagram-logic-circuit-container .sb-mobile-palette-open {
            position: absolute;
            displaY: block;
            right: 15px;
        }

        .diagram-logic-circuit-container .e-toggle-palette::before {
            content: "\e700"
        }

    </style>

    <script>
        function getNodeDefaults(node, diagram) {
            node.style.strokeWidth = 1;
            node.style.strokeColor = '#444';
        }

        function getConnectorDefaults(connector, diagram) {
            if (connector.id !== 'line16') {
                connector.targetDecorator.shape = 'None';
                connector.targetDecorator.style.strokeColor = '#444';
                connector.targetDecorator.style.fill = '#444';
            }
            connector.style = { strokeWidth: 1, strokeColor: '#444' };
            connector.cornerRadius = 5;
            return connector;
        }


        function diagramCreated() {
            var diagram = document.getElementById('container').ej2_instances[0];
            diagram.fitToPage();
            addEvents();
        }
        function getSymbolInfo(symbol) {
            return { fit: true };
        }
        function getSymbolNodes(symbol) {
            symbol.width = 55;
            symbol.height = 40;
            symbol.offsetX = 20;
            symbol.offsetY = 20;
            symbol.style = { fill: 'white', strokeWidth: 1, strokeColor: '#757575' };
        }

        function addEvents() {
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                var paletteIcon = document.getElementById('palette-icon');
                if (paletteIcon) {
                    paletteIcon.addEventListener('click', openPalette, false);
                }
            }
        }
        @*custom code start*@
        function openPalette() {
            var paletteSpace = document.getElementById('palette-space');
            isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {
                    paletteSpace.classList.add('sb-mobile-palette-open');
                }
                else {
                    paletteSpace.classList.remove('sb-mobile-palette-open');
                }
            }
        }
        @*custom code end*@
    </script>
}
@section ActionDescription{
   <p>
    This sample visualizes implementation of three input Boolean functions using universal logic gates. The shapes for logic gates are designed with diagram's path node feature.
</p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Logic Circuit Diagram in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
   <p>
    This example shows how to create Boolean algebraic laws and theorems using diagram <code>path</code> shapes. The <code>type</code>
    property of the <code>shape</code> can be used to create <code>path</code> nodes. The <code>data</code> property of the shape allows you to
    define path data of the path shape.
</p>
}

@section Title{
                    <title>ASP.NET MVC Diagram Logic Circuit Diagram Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Logic Circuit Diagram in ASP.NET MVC Diagram Control</h1>
                }
@using Syncfusion.EJ2.Diagrams;
@using Syncfusion.EJ2.Navigations;
@section ControlsSection{
    <div class="control-section diagram-swimlane-container">
        <div id="swimlaneDiagram" style="width: 100%; height: 600px">
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>
            <div id="palette-space" class="sb-mobile-palette">                
                @(Html.EJS().SymbolPalette("symbolPalette").Palettes((List<SymbolPalettePalette>)ViewData["Palette"]).GetSymbolInfo("getSymbolInfo").ExpandMode(ExpandMode.Multiple).Width("100%").Height("570px")
                                .SymbolHeight(48).SymbolWidth(48).SymbolMargin((SymbolPaletteMargin)ViewData["margin"]).GetNodeDefaults("getSymbolNodes").Render()
                )
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                @(Html.EJS().Diagram("container").Width("100%").Height("100%").DragEnter("dragEnter").ContextMenuOpen("contextMenuOpen").ContextMenuClick("contextMenuClick").ContextMenuSettings(c=>c.Show(true).ShowCustomMenuOnly(true).Items(ViewData["items"])).SnapSettings(new Syncfusion.EJ2.Diagrams.DiagramSnapSettings() { Constraints = Syncfusion.EJ2.Diagrams.SnapConstraints.None }).SelectedItems(new DiagramSelector() { Constraints=SelectorConstraints.All &~SelectorConstraints.Rotate})
                               .GetConnectorDefaults("getConnectorDefaults").GetNodeDefaults("getNodeDefaults").Nodes((List<DiagramNode>)ViewData["nodes"]).Connectors((List<DiagramConnector>)ViewData["connectors"]).Render()
                )
            </div>
        </div>
    </div>
    <style>
        /* These styles are used for aligning palette and diagram */
        .diagram-swimlane-container .sb-mobile-palette {
            width: 220px;
            height: 570px;
            float: left;
        }

        .diagram-swimlane-container .sb-mobile-palette-bar {
            display: none;
        }

        .diagram-swimlane-container .sb-mobile-diagram {
            width: calc(100% - 222px);
            height: 570px;
            float: left;
            border: 1px solid rgba(0, 0, 0, 0.12);
            border-left: none;
        }

        @@media (max-width: 550px) {
            .diagram-swimlane-container .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .diagram-swimlane-container .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            .diagram-swimlane-container .sb-mobile-palette-bar {
                display: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            .diagram-swimlane-container #palette-icon {
                font-size: 20px;
            }
        }


    </style>

    <script>
        function getConnectorDefaults(connector) {
           if (connector.id.indexOf("Link21") !== -1) {
            connector.type = 'Straight';
           }
           else if (connector.id.indexOf("Link22") !== -1) {
            connector.type = 'Straight';
           }
           else {
            connector.type = 'Orthogonal';
            }
            connector.style.strokeColor = "black";
            connector.sourceDecorator.style.strokeColor = "black";
            connector.targetDecorator.style.strokeColor = "black";
            connector.sourceDecorator.style.fill = "black";
            connector.targetDecorator.style.fill = "black";
            return connector;
        }
        function getSymbolInfo(symbol) {
            return { tooltip: symbol.addInfo ? symbol.addInfo.tooltip : symbol.id };
        }
        function getSymbolNodes(symbol, diagram) {
            if (symbol.id === 'Terminator' || symbol.id === 'Process' || symbol.id === 'Document' || symbol.id === 'PreDefinedProcess' || symbol.id === 'data' || symbol.id === 'stackCanvas1' || symbol.id === 'stackCanvas2') {
                symbol.style.strokeWidth = 1;
            }
            symbol.style.strokeColor = "#757575"
        }
        function getNodeDefaults(node) {
            node.style.strokeColor = "black";
            return node;
        }
        function dragEnter(arg) {
            if (arg.element) {
                let shape = arg.element.shape;
                if (shape.isLane) {
                    if (shape.orientation === 'Horizontal') {
                        shape.lanes[0].height = 100;
                        shape.lanes[0].width = 500;
                    } else if (shape.orientation === 'Vertical') {
                        shape.lanes[0].height = 500;
                        shape.lanes[0].width = 100;
                    }
                }
            }
        }

        function contextMenuClick(args) {
            var diagram = document.getElementById("container").ej2_instances[0];
            if (args.item.id === 'InsertLaneBefore' || args.item.id === 'InsertLaneAfter') {
                if (diagram.selectedItems.nodes.length > 0 && diagram.selectedItems.nodes[0].isLane) {
                    var index;
                    var node = diagram.selectedItems.nodes[0];
                    var swimlane = diagram.getObject(diagram.selectedItems.nodes[0].parentId);
                    var shape = swimlane.shape;
                    var existingLane = ej.diagrams.cloneObject(shape.lanes[0]);

                    var newLane = {
                        id: ej.diagrams.randomId(),
                        header: {
                            width: existingLane.header.width, height: existingLane.header.height,
                            style: existingLane.header.style
                        },
                        style: existingLane.style,
                        height: existingLane.height, width: existingLane.width,
                    };

                    if (shape.orientation === 'Horizontal') {
                        var exclude = 0;
                        exclude += (shape.header) ? 1 : 0;
                        exclude += (shape.phases.length) ? 1 : 0;
                        index = node.rowIndex - exclude;
                        newLane.header.width = existingLane.header.width;
                        newLane.header.height = existingLane.height;
                    } else {
                        index = node.columnIndex - (shape.phases.length) ? 1 : 0;
                        newLane.header.width = existingLane.width;
                        newLane.header.height = existingLane.header.height;
                    }
                    if (args.item.id === 'InsertLaneBefore') {
                        diagram.addLanes(swimlane, [newLane], index);
                    } else {
                        diagram.addLanes(swimlane, [newLane], index + 1);
                    }
                    diagram.clearSelection();
                }
            } else if (args.item.id === 'Cut') {
                diagram.cut();
            } else if (args.item.id === 'Clone') {
                diagram.copy();
                diagram.paste();
            }
        }

        function contextMenuOpen(args) {
            var diagram = document.getElementById("container").ej2_instances[0];
            for (var item of args.items) {
                if ((diagram.selectedItems.connectors.length + diagram.selectedItems.nodes.length) > 0) {
                    if (item.id === 'InsertLaneBefore' || item.id === 'InsertLaneAfter') {
                        if (diagram.selectedItems.connectors.length || (diagram.selectedItems.nodes.length && !diagram.selectedItems.nodes[0].isLane)) {
                            args.hiddenItems.push(item.text);
                        }
                    }
                } else {
                    args.hiddenItems.push(item.text);
                }
            }
        }
    </script>
}
@section ActionDescription{
    <p>
        This sample visualize the sales processing flow chart with the help of built-in swimlane shapes.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Swimlane in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This sample shows how an sales process works with each entity involved in the process assigned a lane that contains all the activities for which they are responsible. The <code>type</code> property of the <code>shape</code> allows us to choose the swimlane shape type. Using the <code>children</code> property of the lane, we can add the nodes inside the lanes. We can also create the swimlane interactively using the swimlane shapes from the symbol palette.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Diagram Swimlane Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Swimlane in ASP.NET MVC Diagram Control</h1>
                }
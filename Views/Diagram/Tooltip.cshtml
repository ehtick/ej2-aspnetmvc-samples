@using Syncfusion.EJ2.Diagrams;
@using Syncfusion.EJ2.DropDowns;
@using Syncfusion.EJ2;
@using EJ2MVCSampleBrowser.Controllers.Diagram;

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div id="tooltipDiagramSection" class="content-wrapper" style="width: 100%">
            @(Html.EJS().Diagram("diagram").Created("created").Width("100%").GetNodeDefaults("getNodeDefaults").GetConnectorDefaults("getConnectorDefaults").Height("645px").SnapSettings(s=>s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None)).SnapSettings(s=>s.Constraints(SnapConstraints.None)).Tooltip(t=>t.RelativeMode(TooltipRelativeMode.Object).Position(ViewData["position"]).Content((string)ViewData["content"]).Animation(ViewData["animation"])).Nodes((List<DiagramNode>)ViewData["nodes"]).Connectors((List<DiagramConnector>)ViewData["connectors"]).Render())
        </div>
    </div>
    <div id="tooltipPropertySection" class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tr>
                <td>
                    <div>
                        Relative Mode
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("mode").Index(0).PopupWidth("150").Width("85%").Placeholder("select a relative mode").Change("relativeModeChange").DataSource((IEnumerable<TooltipProperty>)ViewData["modeValue"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Type" }).Render()
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        Position
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("position").Index(0).PopupWidth("150").Width("85%").Placeholder("select a position").Change("positionChange").DataSource((IEnumerable<TooltipProperty>)ViewData["positionValue"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Type" }).Render()
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        Animation
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().NumericTextBox("duration").Value(100).Min(100).Max(2000).Step(100).Width("85%").Change("animationChange").Render()
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        Effect
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().DropDownList("effect").Index(0).PopupWidth("150").Width("85%").Placeholder("select a effect type").Change("effectChange").DataSource((IEnumerable<TooltipProperty>)ViewData["effectValue"]).Fields(new DropDownListFieldSettings { Text = "Text", Value = "Type" }).Render()
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        Sticky Mode
                    </div>
                </td>
                <td>
                    <div>
                        @Html.EJS().CheckBox("checked").Change("onChange").Checked(false).Render()
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <style>
        /* Property panel CSS */
        #tooltipDiagramSection .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        #tooltipDiagramSection .row-header {
            font-size: 13px;
            font-weight: 500;
        }

        #tooltipDiagramSection .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        #tooltipDiagramSection {
            font-size: 12px;
        }

        #tooltipPropertySection .property-panel-header {
            margin-left: 10px;
        }
    </style>

    <script>
        function getConnectorDefaults(connector, diagram) {
            connector.type = 'Orthogonal';
            connector.style = { strokeWidth: 2 };
            return connector;
        }
        function getNodeDefaults(obj) {
            obj.offsetX += 0.5;
            obj.offsetY += 0.5;
            obj.constraints = ej.diagrams.NodeConstraints.Default | ej.diagrams.NodeConstraints.Tooltip;
            obj.style = { strokeWidth: 2 };
            return obj;
        }
        function relativeModeChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            if (args.value === 'Mouse') {
                diagram.tooltip.relativeMode = 'Mouse';
            } else {
                diagram.tooltip.relativeMode = 'Object';
            }
            diagram.dataBind();
        }

        function positionChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            var nodes = diagram.nodes;
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].tooltip) {
                    nodes[i].tooltip.position = args.value;
                    diagram.dataBind();
                }
            }
        }

        function effectChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tooltip.animation.open.effect = args.value;
            diagram.tooltip.animation.close.effect = args.value;
            diagram.dataBind();
        }

        function htmlChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            var tooltipContent = document.createElement('div');
            var Description = args.value.toString();
            tooltipContent.innerHTML = '<div style="background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;corner-radius:2px;white-space: nowrap;"> <span style="margin: 10px;"> "tooltipContent" </span>';
            diagram.tooltip.content = tooltipContent;
            diagram.dataBind();
        }

        function textChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tooltip.content = args.value.toString();
            diagram.dataBind();
        }

        function contentChange(args) {
            var HtmlBlock = document.getElementById('htmlContentDiv')
            var textBlock = document.getElementById('textContentDiv')
            if (args.value === 'HTML Element') {
                textBlock.style.display = 'block';
                HtmlBlock.style.display = 'none';
            } else {
                HtmlBlock.style.display = 'block';
                textBlock.style.display = 'none';
            }
        }

        function animationChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tooltip.animation.close.duration = args.value;
            diagram.tooltip.animation.open.duration = args.value;
            diagram.dataBind();
        }
        function created() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.fitToPage({ mode: 'Width' });
        }
        function onChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            for (var j = 0; j < diagram.nodes.length; j++) {
                if (args.checked) {
                    diagram.tooltipObject.isSticky = true;
                    diagram.nodes[j].tooltip.isSticky = true;
                }
                else {
                    diagram.tooltipObject.isSticky = false;
                    diagram.nodes[j].tooltip.isSticky = false;
                }
                diagram.dataBind();
            }
        }

    </script>

}
@section ActionDescription{
    <p>
        This sample demonstrates how to add the extra information to the nodes and how to show the information through
        the common graphical user interface element.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Tooltip in ASP.NET MVC Diagram control. Explore here for more details."/>
                }

@section Description{
    <p>
        Using diagramâ€™s <code>tooltip</code> we can define the tooltip for the diagram nodes as well as connector. We can control the <code>animation</code>,
        <code>position</code>, <code>effects</code> of the tooltip using <code>tooltip</code> property of the diagram. Also, we can define the custom tooltip
        as either text or HTML element using <code>content</code> property of the tooltip. We can control the different tooltip settings
        to each connector and node.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Diagram Tooltip Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Tooltip in ASP.NET MVC Diagram Control</h1>
                }
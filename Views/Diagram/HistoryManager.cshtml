@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Buttons

@section ControlsSection{

    <div class="col-lg-8 control-section">
        <style>
            /* These are proprty panel CSS */
            #historyPropertySection .row {
                margin-left: 0px;
                margin-right: 0px;
            }

            #historyControlSection.content-wrapper {
                border: 1px solid #D7D7D7;
            }

            #historyPropertySection .listbox {
                width: 100%;
                height: 50%;
            }

            #historyPropertySection .heading {
                color: #807f7f;
                font-size: 15px;
                height: 50px;
                width: 100%;
                border-bottom: 1px solid #d9dedd;
                padding: 10px;
            }
            #StartGroupAction, #ClearHistory {
                width:100%;
                overflow: hidden;
                text-overflow: ellipsis
            }
        </style>

        <div id="historyControlSection" class="content-wrapper" style="width: 100%">
            @(Html.EJS().Diagram("diagram").Width("100%").Height("600px").SnapSettings(s=>s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None)).Created("created").Nodes((List<Syncfusion.EJ2.Diagrams.DiagramNode>)ViewData["nodes"]).Connectors((List<Syncfusion.EJ2.Diagrams.DiagramConnector>)ViewData["connectors"]).Render())
            </div>
    </div>
    <div id="historyPropertySection" class="col-lg-4 property-section" style="padding-right: 0px">
        <div class="property-panel-header">
            History manager settings
        </div>
        <div class="row property-panel-content" id="appearance">
            <div class="row property-panel-content">
                <div class="row">
                    <div class="listbox" style="height:100%;border: 1px solid #e0e0e0">
                        <div class="heading" style="height:40px">
                            <span>
                                Undo Stack
                            </span>
                            <div style="float: right; margin-top: -5px">
                                @Html.EJS().Button("undo").Content("undo").Disabled(true).Render()
                            </div>
                        </div>
                        @Html.EJS().ListView("undoList").Enable(true).Height("180px").Render()
                    </div>
                </div>
                <div class="row" style="padding-top: 10px">
                    <div class="listbox" style="height:100%;border: 1px solid #e0e0e0">
                        <div class="heading" style="height:40px">
                            <span>
                                Redo Stack
                            </span>
                            <div style="float: right; margin-top: -5px">
                                @Html.EJS().Button("redo").Content("redo").Disabled(true).Render()
                            </div>
                        </div>
                        @Html.EJS().ListView("redoList").Enable(true).Height("180px").Render()
                    </div>
                </div>
                <div class="row" style="padding-top: 10px">
                    <div style="display: table;height: 35px; padding-left: 0px" class="col-xs-6">
                        <div style="display: table-cell; vertical-align: middle">Stack Limit</div>
                    </div>
                    <div class="col-xs-6" style="padding-left: 0px; padding-right: 0px">
                        @Html.EJS().NumericTextBox("StackLimit").Enabled(true).Format("###.##").Change("setStackLimit").Min(0).Value(0).Step(1).Render()
                    </div>
                </div>
                <div class="row" style="padding-top: 10px">
                    <div class="col-xs-6" style="padding-left: 0px">
                        @Html.EJS().Button("StartGroupAction").Content("Start Group Action").IsToggle(true).Render()
                    </div>
                    <div class="col-xs-6" style="padding-left: 0px; padding-right: 0px">
                        @Html.EJS().Button("ClearHistory").Content("Clear History").Render()
                    </div>
                </div>

            </div>

        </div>
    </div>
    <script>

        function getNodeDefaults(obj) {
            obj.annotations[0].style.color = '#111111';
            return obj;
        }
        function getConnectorDefaults(obj) {
            obj.style.fill = '#707070';
            obj.targetDecorator.style.fill = '#707070';
            obj.targetDecorator.style.strokeColor = '#707070';
            return obj;
        }
        function getValue() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            var undoStack = diagram.historyManager.undoStack;
            var redoStack = diagram.historyManager.redoStack;
            var undoButton = document.getElementById("undo").ej2_instances[0];
            var redoButton = document.getElementById("redo").ej2_instances[0];
            var undo = [];
            for (var i = 0; i < undoStack.length; i++) {
                undo.push({ 'text': undoStack[i].type, 'value': undoStack[i].type });
            }
            var redo = [];
            for (var i = 0; i < redoStack.length; i++) {
                redo.push({ 'text': redoStack[i].type, 'value': redoStack[i].type });
            }
            var itemsCount = diagram.historyManager.stackLimit ? diagram.historyManager.stackLimit : 0;
            var undoList = document.getElementById('undoList').ej2_instances[0];

            undoButton.disabled = undo.length ? false : true;
            redoButton.disabled = redo.length ? false : true;
            undoList.dataSource = undo;
            undoList.fields = { text: 'text', value: 'text' };
            undoList.index = 0;
            undoList.dataBind();
            var redoList = document.getElementById('redoList').ej2_instances[0];
            redoList.dataSource = redo;
            redoList.fields = { text: 'text', value: 'text' };
            redoList.index = 0;
            redoList.dataBind();
        }

        function setStackLimit(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.setStackLimit(args.value);
        }

        function created() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.historyChange = (arg) => {
                getValue();
            };
            document.getElementById("StartGroupAction").addEventListener('click', function () {
                var toggleBtn = document.getElementById("StartGroupAction").ej2_instances[0];
                if (toggleBtn.element.classList.contains('e-active')) {
                    toggleBtn.content = 'Start Group Action';
                    diagram.endGroupAction();
                } else {
                    toggleBtn.content = 'End Group Action';
                    diagram.startGroupAction();
                }
            });
        };

        document.getElementById("undo").onclick = function (args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.undo();
        };

        document.getElementById("redo").onclick = function (args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.redo();
        };

        document.getElementById("ClearHistory").onclick = function (args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.clearHistory();
            getValue();
        };
    </script>

}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates viewing, deleting, limiting diagram history and groups diagram actions and stores it as
            a single entry in the history manager.
        </p>
    </div>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the History Manager in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <div id="description">
        <p>
            Diagram history are being handle all the diagram history. Using <code>stackLimit</code> property of the history manager
            we limit the no. of entries can be stored on the diagram history. Also, we can get the list of entries in the undo
            list and redo list using <code>undoStack</code> and <code>redoStack</code>. Also diagram history manager have the
            option to group the action as the single entry by the help of the <code>startGroupAction</code> and <code>endGroupAction</code>        public Api. Also, we can add the custom entries to the diagram history. method can be used to print the diagrams.
        </p>
        <br>
    </div>
}


@section Title{
                    <title>ASP.NET MVC Diagram History Manager Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of History Manager in ASP.NET MVC Diagram Control</h1>
                }
@using Syncfusion.EJ2;
@using EJ2MVCSampleBrowser.Models;

@section ControlsSection {
    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            @Html.EJS().Diagram("diagram").Created("create").Width("100%").Height("500px").GetNodeDefaults("nodeDefaults").GetConnectorDefaults("connectorDefaults").DataSourceSettings(ss => ss.Id("Name").ParentId("Category")
.DataSource(new DataManager() { Data = (List<HierarchicalDetails>)ViewData["Nodes"] })).Layout(l => l.Type(Syncfusion.EJ2.Diagrams.LayoutType.HierarchicalTree)).SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None)).Render()
        </div>
    </div>
    <div class="col-lg-4 property-section diagram-hierarchical-panel">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row  property-panel-content" id="appearance">
            <div class="row row-header">
                Appearance
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style e-selected-style" id="topToBottom" style="background-image: url('@Url.Content("~/Content/images/diagram/Images/common-orientation/toptobottom.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="bottomToTop" style="background-image: url('@Url.Content("~/Content/images/diagram/Images/common-orientation/bottomtotop.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="leftToRight" style="background-image: url('@Url.Content("~/Content/images/diagram/Images/common-orientation/lefttoright.png")'); margin: 0px 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="rightToLeft" style="background-image: url('@Url.Content("~/Content/images/diagram/Images/common-orientation/righttoleft.png")'); margin: 0px 0px">
                </div>
            </div>
        </div>
        <div class="row  property-panel-content" style="padding-top: 10px">
            <div class="row row-header">
                Behavior
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px;" class="col-xs-6">
                    <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
                </div>
                <div class="col-xs-6">
                    @Html.EJS().NumericTextBox("hSpacing").Format("###.##").Change("hSpacingChange").Width("110px").Min(20).Max(60).Step(2).Value(40).Render()
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px;" class="col-xs-6">
                    <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
                </div>
                <div class="col-xs-6">
                    @Html.EJS().NumericTextBox("vSpacing").Format("###.##").Change("vSpacingChange").Width("110px").Min(20).Max(60).Step(2).Value(40).Render()
                </div>
            </div>
            <div class="row" style="padding-top: 10px">
                @Html.EJS().CheckBox("checked").Change("checkBoxChecked").Label("Expandable").Render()
            </div>
        </div>
    </div>

    <style>
    
        /* Css for images in property panel  */
        .diagram-hierarchical-panel .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 75px;
            width: calc((100% - 12px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .diagram-hierarchical-panel .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

        .diagram-hierarchical-panel .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        /* Property panel CSS */
        .diagram-hierarchical-panel .row-header {
            font-size: 13px;
            font-weight: 500;
        }

        /* Selection indicator */
        .diagram-hierarchical-panel .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .diagram-hierarchical-panel .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
        }
    </style>
    <script type="text/javascript">
        function create() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }

        function hSpacingChange(args) {
            var hSpacing = document.getElementById("hSpacing");
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.layout.horizontalSpacing = Number(hSpacing.value);
            diagram.dataBind();
        }
        function vSpacingChange(args) {
            var vSpacing = document.getElementById("vSpacing");
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.layout.verticalSpacing = Number(vSpacing.value);
            diagram.dataBind();
        }

        function checkBoxChecked(args) {
            var label = "Expandable";
            var checked = args.checked;
            var diagram = document.getElementById("diagram").ej2_instances[0];
            for (var i = 0; i < diagram.nodes.length; i++) {
                var node = diagram.nodes[i];
                if (checked) {
                    node.expandIcon.shape = 'Minus';
                    node.collapseIcon.shape = 'Plus';
                } else {
                    node.expandIcon.shape = 'None';
                    node.collapseIcon.shape = 'None';
                }
            }
            diagram.dataBind();
            diagram.doLayout();
        }

        function nodeDefaults(obj, diagram) {
            obj.shape = { type: 'Text', content: obj.data.Name };
            obj.style = { fill: '#659be5', strokeColor: 'none', color: 'white', strokeWidth: 2 };
            obj.borderColor = '#3a6eb5';
            obj.backgroundColor = '#659be5';
            obj.shape.margin = { left: 5, right: 5, bottom: 5, top: 5 };
            obj.expandIcon = { height: 10, width: 10, shape: 'None', fill: 'lightgray', offset: { x: .5, y: 1 } };
            obj.expandIcon.verticalAlignment = 'Auto';
            obj.expandIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
            obj.collapseIcon.offset = { x: .5, y: 1 };
            obj.collapseIcon.verticalAlignment = 'Auto';
            obj.collapseIcon.margin = { left: 0, right: 0, top: 0, bottom: 0 };
            obj.collapseIcon.height = 10;
            obj.collapseIcon.width = 10;
            obj.collapseIcon.padding.top = 5;
            obj.collapseIcon.shape = 'None';
            obj.collapseIcon.fill = 'lightgray';
            return obj;
        }

        function connectorDefaults(connector, diagram) {
            connector.targetDecorator.shape = 'None';
            connector.type = 'Orthogonal';
            connector.constraints = 0;
            connector.cornerRadius = 5;
            return connector;
        }

        document.getElementById('appearance').onclick = function (args) {
            var target = args.target;
            @*custom code start*@
            var selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-style');
            }
            @*custom code end*@
            if (target.className === 'image-pattern-style') {
                var id = target.id;
                var diagram = document.getElementById("diagram").ej2_instances[0];
                var orientation1 = id.substring(0, 1).toUpperCase() + id.substring(1, id.length);
                diagram.layout.orientation = orientation1;
                diagram.dataBind();
                diagram.doLayout();
                target.classList.add('e-selected-style');
            }
        };
    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates a generating hierarchical tree from right to left orientation with external data source.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Hierarchical Layout in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        In this example, you can see how to generate a hierarchical tree from external data sources. You can also customize the
        spacing between the objects in the tree. You can use the
        <code>horizontalSpacing</code> and
        <code>verticalSpacing</code> properties of
        <code>layout</code> to customize the space between the objects in the tree. You can use the
        <code>layoutOrientation</code> property of
        <code>layout</code> to change the orientation of the tree.
    </p>
    <p>
        To change the orientation of the tree, click the templates that are added to the property panel.
    </p>
    <br>
}


@section Title{
                    <title>ASP.NET MVC Diagram Hierarchical Layout Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Hierarchical Layout in ASP.NET MVC Diagram Control</h1>
                }
@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="col-lg-8 control-section">
        <div class="content-wrapper">
            @(Html.EJS().Diagram("container").Width("100%").Height("600px").Created("fitToPage").SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None))
                .GetNodeDefaults("getNodeDefaults").GetCustomTool("getTool").Nodes((List<Syncfusion.EJ2.Diagrams.DiagramNode>)ViewData["nodes"]).Connectors((List<Syncfusion.EJ2.Diagrams.DiagramConnector>)ViewData["connectors"]).SelectedItems((Syncfusion.EJ2.Diagrams.DiagramSelector)ViewData["selector"]).Render()
            )
        </div>
    </div>
    <div class="col-lg-4 property-section diagram-userhandle-panel">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="row property-panel-content" id="appearance">
            <div class="row">
                <div class="row row-header1" style="font-size: 14px">
                    Alignment
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="image-pattern-style e-selected-style" id="left" style="background-image: url('@Url.Content("~/Content/images/diagram/user-handle/bottoml.png")'); margin-right: 4px">
                    </div>
                    <div class="image-pattern-style" id="right" style="background-image: url('@Url.Content("~/Content/images/diagram/user-handle/bottomr.png")'); margin: 0px 4px">
                    </div>
                    <div class="image-pattern-style" id="topr" style="background-image: url('@Url.Content("~/Content/images/diagram/user-handle/topr.png")');">
                    </div>
                </div>
            </div>
        </div>
        <div class="row property-panel-content" id="pattern">
            <div class="row">
                <div class="row row-header1" style="font-size: 14px">
                    Appearance
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="image-pattern-style" id="pattern1" style="background-image: url('@Url.Content("~/Content/images/diagram/user-handle/pattern1.png")'); margin-right: 4px">
                    </div>
                    <div class="image-pattern-style" id="pattern2" style="background-image: url('@Url.Content("~/Content/images/diagram/user-handle/pattern2.png")'); margin: 0px 4px">
                    </div>
                    <div class="image-pattern-style" id="pattern3" style="background-image: url('@Url.Content("~/Content/images/diagram/user-handle/pattern3.png")');">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        #container {
            display: block;
        }
        /* Css for images in property panel  */
        .diagram-userhandle-panel .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 50px;
            width: calc((100% - 18px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .diagram-userhandle-panel .row {
            display: block;
            margin: 10px 0px 0px 0px;
        }
        /* Selection indicator */
        .diagram-userhandle-panel .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .diagram-userhandle-panel .row-header {
            font-size: 15px;
            font-weight: 500;
            margin-top: 10px;
        }
    </style>
    <script>

        function getTool(action) {
            var diagram = document.getElementById("container").ej2_instances[0];
            if (action === 'clone') {
                return new CloneTool(diagram.commandHandler);
            }
        }

        var __extends = (this && this.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                /* jshint proto: true */
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return function (d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        var CloneTool = (function (_super) {
            __extends(CloneTool, _super);
            function CloneTool() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CloneTool.prototype.mouseDown = function (args) {

                var diagram = document.getElementById("container").ej2_instances[0];
                var newObject;
                if (diagram.selectedItems.nodes.length > 0) {
                    newObject = ej.diagrams.cloneObject(diagram.selectedItems.nodes[0]);
                }
                else {
                    newObject = ej.diagrams.cloneObject(diagram.selectedItems.connectors[0]);
                }
                newObject.id += ej.diagrams.randomId();
                diagram.paste([newObject]);
                args.source = diagram.nodes[diagram.nodes.length - 1];
                args.sourceWrapper = args.source.wrapper;
                _super.prototype.mouseDown.call(this, args);
                this.inAction = true;
            };
            return CloneTool;
        }(ej.diagrams.MoveTool));

        function setuserhandleposition(offset, side, target) {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.selectedItems.userHandles[0].offset = offset;
            diagram.selectedItems.userHandles[0].side = side;
            target.classList.add('e-selected-style');
        }

        function applyuserhandlestyle(bgcolor, target) {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.selectedItems.userHandles[0].backgroundColor = bgcolor;
            diagram.selectedItems.userHandles[0].pathColor = 'White';
            target.classList.add('e-selected-style');
        }

        function fitToPage() {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.fitToPage();
            diagram.select([diagram.nodes[0]]);
            diagram.dataBind();
        }
        function getNodeDefaults(node) {
            var obj = {
                style: { fill: '#578CA9', strokeColor: 'none' },
            };
            return obj;
        }

        document.getElementById('appearance').onclick = function (args) {
            var target = args.target;
            var diagram = document.getElementById("container").ej2_instances[0];
            var selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-style');
            }
            if (target.className === 'image-pattern-style') {
                switch (target.id) {
                    case 'left':
                        setuserhandleposition(0, 'Bottom', target);
                        break;
                    case 'right':
                        setuserhandleposition(1, 'Bottom', target);
                        break;
                    case 'topr':
                        setuserhandleposition(0, 'Right', target);
                        break;
                }
            }
            diagram.dataBind();
        }
        document.getElementById('pattern').onclick = function (args) {
            var target = args.target;
            var diagram = document.getElementById("container").ej2_instances[0];
            var selectedElement = document.getElementsByClassName('e-selected-style');
            if (selectedElement.length) {
                selectedElement[0].classList.remove('e-selected-style');
            }
            if (target.className === 'image-pattern-style') {
                switch (target.id) {
                    case 'pattern1':
                        applyuserhandlestyle('#1E90FF', target);
                        break;
                    case 'pattern2':
                        applyuserhandlestyle('#3CB371', target);
                        break;
                    case 'pattern3':
                        applyuserhandlestyle('#FF6347', target);
                        break;
                }
            }
            diagram.dataBind();
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes a simple flow diagram along with options to execute the frequently used commands using user handles.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the User Handles in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        User handles are icons that are placed around the node to run the frequently used commands. This example shows how to render
        and configure user handles and how to interact with the diagram using user handles. The <code>userHandles</code> property of the <code>selectedItems</code> can be used to add user handles to the diagram. Click the templates in the property
        panel, to customize the size, position, and appearance of the user handles.
    </p>
    <br>
}











@section Title{
                    <title>ASP.NET MVC Diagram User Handles Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of User Handles in ASP.NET MVC Diagram Control</h1>
                }
@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Navigations;
@section ControlsSection{

    <div class="control-section diagram-network-container">
        <div id="networkDiagram" style="width: 100%; height: 600px">
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="diagram-network-icons e-toggle-palette"></div>
            </div>
            <div id="palette-space" class="sb-mobile-palette">
                @(Html.EJS().SymbolPalette("symbolPalette").Palettes((List<Syncfusion.EJ2.Diagrams.SymbolPalettePalette>)ViewData["Palette"]).ExpandMode(ExpandMode.Multiple).GetNodeDefaults("getSymbolDefaults").Width("100%").Height("calc(100% - 50px)")
                                    .SymbolHeight(48).SymbolWidth(48).GetSymbolInfo("getSymbolInfo").Render()
                )
                <div id='dropArea'>
                    @Html.EJS().Button("browse").Content("IMPORT SVG FILES").CssClass("e-outline").IsPrimary(true).Render()
                    @Html.EJS().Uploader("UploadFiles").DropArea(".control-fluid").AsyncSettings(new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save"), RemoveUrl = @Url.Content("https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove") }).Success("onUploadSuccess").Removing("onFileRemove").Render()
                </div>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                @(Html.EJS().Diagram("container").Width("100%").Height("100%").SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None)).GetNodeDefaults("getNodeDefaults")
                                    .GetConnectorDefaults("getConnectorDefaults").Nodes((List<Syncfusion.EJ2.Diagrams.DiagramNode>)ViewData["nodes"]).Connectors((List<Syncfusion.EJ2.Diagrams.DiagramConnector>)ViewData["connectors"]).Created("diagramCreated").Render()
                )
            </div>
        </div>
    </div>
    <style>
        #symbolPalette {
            display: block;
        }

        #container {
            display: block;
        }
        /* These styles are used for aligning palette and diagram */
        .diagram-network-container .sb-mobile-palette-bar {
            display: none;
        }

        .diagram-network-container .sb-mobile-palette {
            width: 215px;
            height: 559px;
            float: left;
        }

        .diagram-network-container .sb-mobile-diagram {
            width: calc(100% - 217px);
            height: 559px;
            float: left;
            border: 1px solid rgba(0, 0, 0, 0.12);
            border-left: none;
        }

        #dropArea .e-upload {
            height: 0px;
            width: 0px;
            display: none !important;
            border: none !important;
        }

        #dropArea {
            height: 50px;
            padding: 7px;
            text-align: center;
            position: relative;
            border: 1px solid rgba(0, 0, 0, 0.12);
            border-top: none;
        }

        @@media (max-width: 550px) {

            .diagram-network-container .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .diagram-network-container .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            .diagram-network-container .sb-mobile-palette-bar {
                display: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            #palette-icon {
                font-size: 20px;
            }
        }

        .diagram-network-container .sb-mobile-palette-open {
            position: absolute;
            display: block;
            right: 15px;
        }

        @@font-face {
            font-family: 'diagram-network-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
            font-weight: normal;
            font-style: normal;
        }

        .diagram-network-icons {
            font-family: 'diagram-network-icons';
            speak: none;
            font-size: 16px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .diagram-network-icons.e-toggle-palette::before {
            content: "\e700"
        }
    </style>
    <script>

        function getNodeDefaults(node) {
            node.style.fill = 'transparent';
            if (node.annotations.length !== 0) {
                node.annotations[0].style = {
                    textWrapping: 'NoWrap',
                    color: 'black',
                    fontSize: 12
                };
            }
            if (node.ports.length !== 0) {
                for (var i = 0; i < node.ports.length; i++) {
                    node.ports[i].visibility = ej.diagrams.PortVisibility.Hidden;
                }
            }
            if (node.shape.type === 'Native') {
                node.style.strokeColor = '#5C90DF';
                if (node.id === 'Server') {
                    node.width = 50;
                    node.height = 65;
                } else if (
                    node.id === 'WorkStation1' || node.id === 'WorkStation2' ||
                    node.id === 'WorkStation3' || node.id === 'WorkStation4'
                ) {
                    node.width = 60;
                    node.height = 40;
                } else if (
                    node.id === 'RemoteController1' || node.id === 'RemoteController2' ||
                    node.id === 'RemoteController3'
                ) {
                    node.width = 25;
                    node.height = 50;
                } else if (
                    node.id === 'modem1' || node.id === 'modem2' || node.id === 'modem3' ||
                    node.id === 'modem4' || node.id === 'modem5' || node.id === 'sensor'
                ) {
                    node.width = 40;
                    node.height = 30;
                } else if (
                    node.id === 'DeviceDriver1' || node.id === 'DeviceDriver2' ||
                    node.id === 'DeviceDriver3'
                ) {
                    node.width = 30;
                    node.height = 33;
                } else if (node.id === 'AnalogIO' || node.id === 'HMI') {
                    node.width = 40;
                    node.height = 50;
                }
                node.shape.scale = 'Stretch';
            }
            if (
                node.id === 'connector1' || node.id === 'connector2' || node.id === 'connector3' ||
                node.id === 'connector4' || node.id === 'connector5' || node.id === 'connector6'
            ) {
                if (node.id !== 'connector2' && node.id !== 'connector6') {
                    node.rotateAngle = 270;
                }
                node.width = 50;
                node.height = 20;
                node.style = { strokeColor: '#5C90DF', fill: 'white' };
            }
            if (node.shape.type === 'Text') {
                node.width = 127;
                node.height = 40;
                node.style = { bold: true, fontSize: 16 };
            }
            return node;
        }

        function getConnectorDefaults(connector) {
            connector.targetDecorator = { shape: 'Arrow', width: 8, height: 8, style: { fill: '#5C90DF', strokeColor: '#5C90DF' } };
            connector.style.strokeColor = '#5C90DF';
            if (connector.annotations.length !== 0) {
                connector.annotations[0].style.fill = 'white';
            }
            return connector;
        }

        function getSymbolInfo(symbol) {
            return { fit: true };
        }

        function getSymbolDefaults(symbol) {
            if (symbol.id === 'arrow') {
                symbol.width = 75;
                symbol.height = 40;
                symbol.offsetX = 160;
                symbol.offsetY = 140;
                symbol.style.strokeColor = '#757575';
                symbol.style.fill = 'white';
            } else if (symbol.id === 'sensor') {
                symbol.width = 25;
                symbol.height = 20;
            }
            else if (symbol.id === 'modem') {
                symbol.width = 40;
                symbol.height = 30;
            }
            else {
                if (symbol.id === 'remoteController') {
                    symbol.width = 22;
                    symbol.height = 40;
                }
                else {
                    symbol.width = 40;
                    symbol.height = 40;
                }
                symbol.offsetX = 20;
                symbol.offsetY = 20;
            }
            if (symbol.shape.type === 'Native') {
                symbol.shape.scale = 'Stretch';
            }
        }

        var id = 0;
        function onUploadSuccess(args) {
            var palette = document.getElementById("symbolPalette").ej2_instances[0];
            var uploadObj = document.getElementById("UploadFiles").ej2_instances[0];
            var file1 = args.file;
            var file = file1.rawFile;
            var reader = new FileReader();
            reader.addEventListener('load', function (event) {
                var shape;
                var shapeContent = event.target.result;
                shape = { id: 'newshape' + id.toString(), shape: { type: 'Native', content: shapeContent } };
                palette.addPaletteItem('network', shape);
            });
            id++;
            reader.readAsText(file);
            uploadObj.clearAll();
        }

        function onFileRemove(args) {
            args.postRawFile = false;
        }

        function diagramCreated() {
            var diagram = document.getElementById("container").ej2_instances[0];
            setTimeout(() => {
                diagram.fitToPage();
            }, 100);
            addEvents();
        }


        document.getElementById("browse").addEventListener('click', function () {
            document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();
            return false;
        });

        function addEvents() {
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                var paletteIcon = document.getElementById('palette-icon');
                if (paletteIcon) {
                    paletteIcon.addEventListener('click', openPalette, false);
                }
            }
        }
        @*custom code start*@
        function openPalette() {
            var paletteSpace = document.getElementById('palette-space');
            isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {
                    paletteSpace.classList.add('sb-mobile-palette-open');
                }
                else {
                    paletteSpace.classList.remove('sb-mobile-palette-open');
                }
            }
        }
        @*custom code end*@

    </script>
}
@section ActionDescription{
   <p>
    This sample visualizes graphical layout of a network diagram using diagram's <code>Native(SVG)</code> nodes feature.
</p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Network Diagram in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
    This example shows how to host a <code>Native (SVG)</code> content inside a node. The <code>shape</code> property of the node can be
    used to host SVG content inside a node. The <code>content</code> property of the shape allows you to define the content to
    be hosted.
</p>
}

@section Title{
                    <title>ASP.NET MVC Diagram Network Diagram Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Network Diagram in ASP.NET MVC Diagram Control</h1>
                }
@using Syncfusion.EJ2.Navigations;
@section ControlsSection{

    <div class="control-section diagram-acitvity-container">
        <div id="umlActivityDiagram" style="width: 100%; height: 521px">
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="diagram-activity-icons e-toggle-palette"></div>
            </div>
            <div id="palette-space" class="sb-mobile-palette">
                @(Html.EJS().SymbolPalette("symbolPalette").Palettes((List<Syncfusion.EJ2.Diagrams.SymbolPalettePalette>)ViewData["Palette"]).GetSymbolInfo("getSymbolInfo").ExpandMode(ExpandMode.Multiple).Width("100%").Height("505px")
                                .SymbolHeight(55).SymbolWidth(55).GetNodeDefaults("getSymbolNodes").SymbolMargin((Syncfusion.EJ2.Diagrams.SymbolPaletteMargin)ViewData["margin"]).Render()
                )
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                @(Html.EJS().Diagram("container").Width("100%").Height("100%").SnapSettings(new Syncfusion.EJ2.Diagrams.DiagramSnapSettings() { Constraints = Syncfusion.EJ2.Diagrams.SnapConstraints.None })
                                .Created("diagramCreated").GetNodeDefaults("getNodeDefaults").GetConnectorDefaults("getConnectorDefaults").Nodes((List<Syncfusion.EJ2.Diagrams.DiagramNode>)ViewData["nodes"]).Connectors((List<Syncfusion.EJ2.Diagrams.DiagramConnector>)ViewData["connectors"]).Render()
                )
            </div>
        </div>
    </div>
    <style>
        .diagram-acitvity-container .sb-mobile-palette {
            width: 210px;
            height: 100%;
            float: left;
        }

        .diagram-acitvity-container .sb-mobile-palette-bar {
            display: none;
        }

        .diagram-acitvity-container .sb-mobile-diagram {
            width: calc(100% - 212px);
            height: 100%;
            float: left;
            border: 1px solid rgba(0, 0, 0, 0.12);
            border-left: none;
        }

        @@media (max-width: 550px) {

            .diagram-acitvity-container .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .diagram-acitvity-container .sb-mobile-palette-bar {
                display: block;
                width: 100%;
                background: #fafafa;
                padding: 10px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 40px;
            }

            .diagram-acitvity-container .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            .diagram-acitvity-container #palette-icon {
                font-size: 20px;
            }
        }

        .sb-mobile-palette-open {
            position: absolute;
            display: block;
            right: 15px;
        }

        @@font-face {
            font-family: 'diagram-activity-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
            font-weight: normal;
            font-style: normal;
        }


        .diagram-activity-icons {
            font-family: 'diagram-activity-icons';
            speak: none;
            font-size: 16px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .diagram-activity-icons.e-toggle-palette::before {
            content: "\e700"
        }

        .material #umlActivityDiagram #palette-space .e-accordion {
            border: none;
        }

        .material #umlActivityDiagram #palette-space {
            border: 1px solid rgba(0, 0, 0, 0.12);
        }

        .bootstrap #umlActivityDiagram .sb-mobile-diagram {
            height: calc(100% - 17px);
            margin-top: 5px;
            border-radius: 4px;
            border-left: 1px solid rgba(0, 0, 0, 0.12);
        }

        .fabric #umlActivityDiagram .sb-mobile-diagram {
            border-left: 1px solid rgba(0, 0, 0, 0.12);
        }
    </style>

    <script>

        function getNodeDefaults(obj, diagram) {
            obj.ports = getPorts(obj);
            if (obj.ports) {
                for (var i = 0; i < obj.ports.length; i++) {
                    obj.ports[i].visibility = ej.diagrams.PortVisibility.Hidden;
                }
            }
            if (obj.id === 'Start' || obj.id === 'node2' || obj.id === 'node9' || obj.id === 'node11') {
                obj.style.fill = '#444';
            }
            obj.style.strokeColor = '#444';
            return obj;
        }

        function getConnectorDefaults(obj, diagram) {
            if (obj.id.indexOf('connector') !== -1) {
                obj.type = 'Orthogonal'; obj.cornerRadius = 10;
                obj.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };
            }
        }

        function getPorts(obj) {
            if (obj.id === 'node2' || obj.id === 'node9') {
                var node2Ports = [
                    { id: 'port1', offset: { x: 0.2, y: 1 } },
                    { id: 'port2', offset: { x: 0.8, y: 1 } },
                    { id: 'port3', offset: { x: 0.2, y: 0 } },
                    { id: 'port4', offset: { x: 0.8, y: 0 } },
                ];
                return node2Ports;
            } else {
                var ports = [
                    { id: 'portLeft', offset: { x: 0, y: 0.5 } },
                    { id: 'portRight', offset: { x: 1, y: 0.5 } },
                    { id: 'portBottom', offset: { x: 0.5, y: 1 } },
                    { id: 'portTop', offset: { x: 0.5, y: 0 } },
                ];
                return ports;
            }
        }

        function getSymbolNodes(symbol, diagram) {
            if (symbol.id === 'JoinNode') {
                symbol.width = 20; symbol.height = 50;
            } else if (symbol.id === 'ForkNode') {
                symbol.width = 50; symbol.height = 20;
            } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {
                symbol.width = 50; symbol.height = 40;
            } else {
                symbol.width = 50; symbol.height = 50;
            }
            if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {
                symbol.style.fill = '#757575';
            }
            symbol.style.strokeColor = '#757575';
        }

        function getSymbolInfo(symbol) {
            return { fit: true };
        }

        function diagramCreated() {
            addEvents();
        }

        function addEvents() {
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                var paletteIcon = document.getElementById('palette-icon');
                if (paletteIcon) {
                    paletteIcon.addEventListener('click', openPalette, false);
                }
            }
        }
        @*custom code start*@
        function openPalette() {
            var paletteSpace = document.getElementById('palette-space');
            var isMobile = window.matchMedia('(max-width:550px)').matches;
            if (isMobile) {
                if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {
                    paletteSpace.classList.add('sb-mobile-palette-open');
                }
                else {
                    paletteSpace.classList.remove('sb-mobile-palette-open');
                }
            }
        }
        @*custom code end*@
    </script>
}
@section ActionDescription{
    <p>
        This sample represents the message flow from one activity to another in customer service using built-in UML activity shapes.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the UML Activity Diagram in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to create activity shapes using diagram <code>UMLActivity</code> shapes. The <code>type</code> property of the
        <code>shape</code> can be used to create <code>UMLActivity</code> nodes. The <code>shape</code> property of the shape allows you to create UML
        activity shapes.
    </p>
}

@section Title{
                    <title>ASP.NET MVC Diagram UML Activity Diagram Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of UML Activity Diagram in ASP.NET MVC Diagram Control</h1>
                }
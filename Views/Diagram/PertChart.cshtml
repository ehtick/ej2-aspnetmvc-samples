@using Syncfusion.EJ2;
@using EJ2MVCSampleBrowser.Models;
@section ControlsSection{
    <div class="col-xs-12 control-section">
            @(Html.EJS().Diagram("container").Width("100%").Height("700px").Created("create").SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None))
                .GetConnectorDefaults("getConnectorDefaults").GetNodeDefaults("getNodeDefaults").SetNodeTemplate("setNodeTemplate").DataSourceSettings(ss => ss.Id("Id").ParentId("Category").DataSource(new DataManager() { Data = (List<pertChartDataDetails>)ViewData["Nodes"] }))
                .Layout(l => l.Type(Syncfusion.EJ2.Diagrams.LayoutType.ComplexHierarchicalTree).Orientation(Syncfusion.EJ2.Diagrams.LayoutOrientation.LeftToRight).VerticalSpacing(100).HorizontalSpacing(70))
                .Render()
            )
    </div>
    
    <script>

        function create() {
            var diagram = document.getElementById("container").ej2_instances[0];
            diagram.fitToPage();
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }
        function getConnectorDefaults(connector, diagram) {
            connector.type = 'Straight';
            connector.style.strokeColor = '#979797';
            connector.targetDecorator.width = 10;
            connector.targetDecorator.height = 10;
            connector.targetDecorator.style = { fill: '#979797', strokeColor: '#979797' };
            return connector;
        }

        function getNodeDefaults(nodeModel, data, diagram) {
            var shape = 'shape'; var name = 'id';
            nodeModel['shape'] = { type: 'Text' };
        }
        function setNodeTemplate(node) {
            var table = new ej.diagrams.StackPanel();
            table.id = ej.diagrams.randomId();
            table.style.fill = '#0069d9';
            table.orientation = 'Vertical';
            let nameKey = 'id';
            let stack = new ej.diagrams.StackPanel();
            stack.id = ej.diagrams.randomId();
            stack.children = [];
            stack.height = 25;
            stack.orientation = 'Horizontal';
            stack.style.fill = 'white';
            stack.horizontalAlignment = 'Stretch';
            addRows(stack, node);
            table.children = [(getTextElement((node.data.Id), 'Stretch', 170, 'Stretch')), stack];
            (table.children[0].style).color = 'white';
            (table.children[0].style).fontSize = 14;
            return table;
        }
        function getTextElement(text, alignment, width, valignment) {
            var textElement = new ej.diagrams.TextElement();
            textElement.id = ej.diagrams.randomId();
            textElement.content = text;
            textElement.width = width;
            textElement.height = 25;
            textElement.horizontalAlignment = alignment;
            textElement.verticalAlignment = valignment;
            textElement.style.strokeWidth = 1;
            textElement.style.strokeColor = '#b5b5b5';
            textElement.style.fill = 'transparent';
            textElement.style.color = '#3c3c3c';
            textElement.relativeMode = 'Object';
            return textElement;
        }


        function addRows(column, node) {
            column.children.push(getTextElement(node.data.StartDate, 'Left', 70));
            column.children.push(getTextElement(node.data.Duration, 'Center', 30));
            column.children.push(getTextElement(node.data.EndDate, 'Right', 70));
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample visualizes a project development process using Program Evaluation ReviewÂ Technique (PERT). Complex hierarchical tree layout algorithm is used to automatically arrange the nodes.
    </p>
}
@section Meta{
                    <meta name="description" content="This example demonstrates the Pert Chart in ASP.NET MVC Diagram control. Explore here for more details."/>
                }
@section Description{
    <p>
        This example shows how to generate a PERT chart from an external data source. The <code>dataSourceSettings</code> property can be used to map an external data source with the diagram control.
        The <code>layout</code> property can be used to automatically position the nodes. In this example, the nodes are arranged from left to right of the diagram. The <code>orientation</code> property can be used to define the orientation of the layouts.
    </p>
    <br>
}


@section Title{
                    <title>ASP.NET MVC Diagram Pert Chart Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Pert Chart in ASP.NET MVC Diagram Control</h1>
                }
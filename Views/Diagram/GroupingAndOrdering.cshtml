@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Diagrams;
@using Syncfusion.EJ2.Navigations;
@section ControlsSection{

    <div class="control-section diagram-grouping-sample" style="width: 100%">
        <div class="diagram-grouping-toolbar">
            @Html.EJS().Toolbar("toolbarEditor").Clicked("toolbarClick").Items((List<ToolbarItem>)ViewData["tbItems"]).OverflowMode(Syncfusion.EJ2.Navigations.OverflowMode.Scrollable).Render()
        </div>
        <div>
            <div id="palette-space" class="sb-mobile-palette">
                @(Html.EJS().SymbolPalette("symbolPalette").Palettes((List<SymbolPalettePalette>)ViewData["palettes"]).ExpandMode(ExpandMode.Multiple).Width("100%").Height("500px")
        .SymbolMargin(new SymbolPaletteMargin() { Left = 5, Right = 5, Top = 5, Bottom = 10 }).SymbolHeight(50).SymbolWidth(50)
        .GetNodeDefaults("getSymbolNodes").Render()
                )
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                @(Html.EJS().Diagram("diagram").Width("100%").Height("500px").RulerSettings(r => r.ShowRulers(true)).Created("diagramCreated").DrawingObject("Orthogonal").SelectedItems((DiagramSelector)ViewData["selectedItems"]).OnUserHandleMouseDown("userHandelClick").SelectionChange("selectionChange")
.Nodes((List<DiagramNode>)ViewData["nodes"]).Render()
                )
            </div>
            <div>
                @(Html.EJS().DropDownList("fontfamily").Value("Arial").DataSource(ViewData["fontFamilyItems"]).Enabled(false).Change("updateAnnotationValue").Render())
            </div>
            <div>
                @(Html.EJS().NumericTextBox("fontSize").Min(1).Max(25).Value(12).Change("updateAnnotationValue").Enabled(false).Render())
            </div>
            <div>
                @(Html.EJS().ColorPicker("fontColors").Change("colorChange").Disabled(true).Render())
            </div>
        </div>
    </div>

    <style>
       
        .diagram-grouping-toolbar {
            width: 100%;
            height: 44px;
        }

        /* Symbol palette and diagram alignment */
        .diagram-grouping-sample .sb-mobile-palette {
            width: 240px;
            height: 100%;
            float: left;
        }

        .diagram-grouping-sample .sb-mobile-diagram {
            width: calc(100% - 242px);
            height: 100%;
            float: left;
        }

        /* font size input textbox */
        .diagram-grouping-toolbar .e-toolbar .e-toolbar-item .e-numeric {
            width: 140px; 
        }

        @@media (max-width: 550px) {

            .diagram-grouping-sample .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 39%;
                height: 100%;
            }

            .diagram-grouping-sample .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }
        }

    </style>

    <script>
        var drawingNode;
        var toolbarObj = {};
        function diagramCreated() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.drawingObject = { type: "Orthogonal" };
            toolbarObj = document.getElementById("toolbarEditor").ej2_instances[0];

        }


        //Apply the appearence of the Annotation
        function updateAnnotationValue(value, fontSize, fontFamily, index, isSelected) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {
                var node = diagram.selectedItems.nodes[i];
                var option = value.itemData !== undefined ? 'fontfamily' : typeof value.value === 'number' ? 'fontsize' : value; 
                for (var j = 0; j < node.annotations.length; j++) {
                    var annotationstyle = node.annotations[j].style;
                    if (option === 'fontsize') {
                        annotationstyle.fontSize = value.value;
                    } else if (option === 'fontfamily') {
                        annotationstyle.fontFamily = value.value;
                    }
                    else if (option === 'bold') {
                        annotationstyle.bold = !annotationstyle.bold;
                        isSelected = annotationstyle.bold;
                    }
                    else if (option === 'italic') {
                        annotationstyle.italic = !annotationstyle.italic;
                        isSelected = annotationstyle.italic;
                    }
                    else if (option === 'underline') {
                        if (annotationstyle.textDecoration === "None") {
                            annotationstyle.textDecoration = 'Underline';
                            isSelected = true;
                        }
                        else {
                            annotationstyle.textDecoration = 'None';
                            isSelected = false;
                        }
                    }
                    var toolbarTextStyle = document.getElementById("toolbarEditor");
                    if (toolbarTextStyle) {
                        toolbarTextStyle = toolbarTextStyle.ej2_instances[0];
                    }
                    if (toolbarTextStyle.items[index] !== undefined) {
                        var cssClass = toolbarTextStyle.items[index].cssClass;
                        toolbarTextStyle.items[index].cssClass = isSelected ? cssClass + ' tb-item-selected' : cssClass.replace(' tb-item-selected', '');
                        toolbarTextStyle.dataBind();
                    }
                    diagram.dataBind();
                }
            }
        }

        function colorChange(arg) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {
                var nodes = diagram.selectedItems.nodes[i];
                for (var j = 0; j < nodes.annotations.length; j++) {
                    nodes.annotations[j].style.color = arg.currentValue.rgba;
                    diagram.dataBind();
                }
            }
        }


        //Toolbar functionality
        function toolbarClick(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            switch (args.item.tooltipText) {
                case 'Group':
                    diagram.group();
                    toolbarObj.items[0].disabled = true;
                    toolbarObj.items[1].disabled = false;
                    break;
                case 'UnGroup':
                    diagram.unGroup();
                    break;
                case 'Bring Forward':
                    diagram.moveForward();
                    break;
                case 'Bring To Front':
                    diagram.bringToFront();
                    break;
                case 'Send Backward':
                    diagram.sendBackward();
                    break;
                case 'Send To Back':
                    diagram.sendToBack();
                    break;
                case 'Bold':
                    updateAnnotationValue('bold', args.value, null, 11);
                    break;
                case 'Italic':
                    updateAnnotationValue('italic', args.value, null, 12);
                    break;
                case 'Underline':
                    updateAnnotationValue('underline', args.value, null, 13);
                    break;
            }
            diagram.dataBind();
        }

        function selectionChange(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            if (args.state === "Changed") {
                var selectedItems = diagram.selectedItems.nodes;
                selectedItems = selectedItems.concat(diagram.selectedItems.connectors);
                if (selectedItems.length === 0) {
                    toolbarObj.items[0].disabled = true;
                    toolbarObj.items[1].disabled = true;
                    toolbarObj.items[3].disabled = true;
                    toolbarObj.items[4].disabled = true;
                    toolbarObj.items[5].disabled = true;
                    toolbarObj.items[6].disabled = true;
                    toolbarObj.items[11].disabled = true;
                    toolbarObj.items[12].disabled = true;
                    toolbarObj.items[13].disabled = true;
                    // Disable font controls when nothing is selected
                    toggleFontControls(false);
                }
                if (selectedItems.length === 1) {
                    enableItems();
                    disableMultiselectedItems(selectedItems);

                    if (selectedItems[0].children !== undefined && selectedItems[0].children.length > 0) {
                        toolbarObj.items[1].disabled = false;
                        disableMultiselectedItems(selectedItems);
                    }
                    else {
                        toolbarObj.items[1].disabled = true;
                    }

                }
                if (selectedItems.length > 1) {
                    enableItems();
                    toolbarObj.items[0].disabled = false;
                    toolbarObj.items[1].disabled = true;
                    disableMultiselectedItems(selectedItems);
                }
                if (args.newValue.length > 0 && args.newValue[0] instanceof ej.diagrams.Node) {
                    var handles = [
                        {
                            name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',
                            visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
                        },
                        {
                            name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',
                            visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }
                        },
                        {
                            name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',
                            visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }
                        },
                    ];
                    diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All | ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };
                    if (diagram.selectedItems.nodes.length > 0) {
                        drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length - 1];
                    }
                }
                else {
                    diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All & ~ej.diagrams.SelectorConstraints.UserHandle };
                }
            }
        }

        //method to add functionality to user handle
        function userHandelClick(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            switch (args.element.name) {
                case 'Delete':
                    diagram.remove();
                    break;
                case 'Clone':
                    diagram.paste(diagram.selectedItems.selectedObjects);
                    break;
                case 'Draw':
                    diagram.drawingObject.shape = {};
                    diagram.drawingObject.type = diagram.drawingObject.type ? diagram.drawingObject.type : 'Orthogonal';
                    diagram.drawingObject.sourceID = drawingNode.id;
                    diagram.dataBind();
                    break;
            }
        };

        // method to disable toolbar items
        function disableMultiselectedItems(selectedItems) {
            var hasAnnotations = false;
            
            // Check if any selected item has annotations
            for (i = 0; i < selectedItems.length; i++) {
                if (selectedItems[i].annotations && selectedItems[i].annotations.length > 0) {
                    hasAnnotations = true;
                    break;
                }
            }
            
            // Enable/disable font controls based on annotations
            toggleFontControls(hasAnnotations);
            
            // Enable/disable toolbar font buttons
            toolbarObj.items[11].disabled = !hasAnnotations; // Bold
            toolbarObj.items[12].disabled = !hasAnnotations; // Italic
            toolbarObj.items[13].disabled = !hasAnnotations; // Underline
        }

        function enableItems() {
            toolbarObj.items[3].disabled = false;
            toolbarObj.items[4].disabled = false;
            toolbarObj.items[5].disabled = false;
            toolbarObj.items[6].disabled = false;
        }

        function toggleFontControls(enable) {
            var fontFamily = document.getElementById("fontfamily");
            var fontSize = document.getElementById("fontSize");
            var fontColor = document.getElementById("fontColors");
            
            if (fontFamily && fontFamily.ej2_instances[0]) {
                fontFamily.ej2_instances[0].enabled = enable;
            }
            if (fontSize && fontSize.ej2_instances[0]) {
                fontSize.ej2_instances[0].enabled = enable;
            }
            if (fontColor && fontColor.ej2_instances[0]) {
                fontColor.ej2_instances[0].disabled = !enable;
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates how to group, ungroup, and order commands with the diagram.
    </p>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Connectors in ASP.NET MVC Diagram control. Explore here for more details." />
}
@section Description{
    <p>
        The <code>group</code> method groups diagram nodes and connectors into a single entity.
    </p>
    <p>
        The <code>unGroup</code> method ungroups nodes and/or connectors that have been previously grouped together using the group method.
    </p>
    <p>
        The <code>moveForward</code> and <code>bringToFront</code> methods adjust the visual order of nodes or connectors within a diagram. This method takes a single parameter that specifies the node or connector that you want to bring forward in the order.
    <p>
        The <code>sendBackward</code> and <code>sendToBack</code> method allows you to send a selected object to the back of the z-order (the order in which objects are stacked on top of one another).
    </p>
    <p>
        In this sample, node annotation styles such as font family, font size, bold, italic, underline, and fontcolor can be customized.
    </p>
    <br>
}



@section Title{
    <title>ASP.NET MVC Diagram Connectors Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Connectors in ASP.NET MVC Diagram Control</h1>
}





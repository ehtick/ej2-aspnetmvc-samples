@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Diagrams;
@using EJ2MVCSampleBrowser.Models;
@using EJ2MVCSampleBrowser.Controllers.Diagram;
@section ControlsSection{

    <div class="control-section">
        @Html.EJS().Diagram("diagram").Created("create").Width("100%").Height("500px").GetNodeDefaults("nodeDefaults").GetConnectorDefaults("connectorDefaults").DataSourceSettings(ss => ss.Id("Id").ParentId("ParentId")
.DataSource(new DataManager() { Data = (List<HierarchicalMultipleRoots>)ViewData["Nodes"] })).Layout(l => l.Type(Syncfusion.EJ2.Diagrams.LayoutType.HierarchicalTree).VerticalSpacing(30).HorizontalSpacing(40).EnableAnimation(true)).SnapSettings(s => s.Constraints(Syncfusion.EJ2.Diagrams.SnapConstraints.None)).Render()
    </div>

    <style>
        #diagram {
            display: block;
        }
    </style>

    <script>

        function create() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }

        function nodeDefaults(obj, diagram) {
            obj.shape = {
                type: 'Text', content: obj.data.Label,
                margin: { left: 10, right: 10, top: 10, bottom: 10 }
            };
            if (obj.data.Id === "1" | obj.data.Id === "10" | obj.data.Id === "17") {
                obj.style = { fill: '#1c5b9b', strokeColor: 'none', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#1c5b9b';
                obj.backgroundColor = '#1c5b9b';
            }
            else if (obj.data.Id === "2" | obj.data.Id === "3" | obj.data.Id === "11" | obj.data.Id === "12" | obj.data.Id === "13" | obj.data.Id === "18" | obj.data.Id === "19") {
                obj.style = { fill: '#18c1be', strokeColor: '#18c1be', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#18c1be';
                obj.backgroundColor = '#18c1be';
            }
            else if (obj.data.Id === "4" | obj.data.Id === "5" | obj.data.Id === "14" | obj.data.Id === "15" | obj.data.Id === "16" | obj.data.Id === "20" | obj.data.Id === "21") {
                obj.style = { fill: '#17a573', strokeColor: 'none', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#17a573';
                obj.backgroundColor = '#17a573';
            }
            else {
                obj.style = { fill: '#73bb34', strokeColor: 'none', color: 'white', strokeWidth: 2 };
                obj.borderColor = '#73bb34';
                obj.backgroundColor = '#73bb34';
            }
            obj.width = 75;
            obj.height = 35;
            obj.shape.margin = { left: 5, right: 5, bottom: 5, top: 5 };
            return obj;
        }

        function connectorDefaults(connector, diagram) {
            connector.type = 'Orthogonal';
            return connector;
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates the structure of an Electricity Sector using complex hierarchical layout with multiple roots.
    </p>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Connectors in ASP.NET MVC Diagram control. Explore here for more details." />
}
@section Description{
    <p>
        This example shows how to create a complex hierarchical layout with multiple root nodes.
    </p>
}



@section Title{
    <title>ASP.NET MVC Diagram Connectors Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Connectors in ASP.NET MVC Diagram Control</h1>
}



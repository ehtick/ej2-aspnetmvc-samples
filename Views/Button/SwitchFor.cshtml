@using Syncfusion.EJ2
@model EJ2MVCSampleBrowser.Controllers.Button.SwitchModel

@section ControlsSection{
<div class="control-section">
    <div class="content-wrapper">
        <div class="switch-control">
        @using (Html.BeginForm())
        {
            <div>
            <label for="check">I agree to receive newsletter</label>
            @Html.EJS().SwitchFor(model => model.check).Render()
            </div>
            @Html.ValidationMessageFor(model =>model.check)
            @Html.EJS().Button("submit-button").Content("Submit").Render()
        }
        </div>
    </div>
</div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Switch in ASP.NET MVC Button control. Explore here for more details."/>
                }
@section ActionDescription{
    <div id="action-description">
        <p>Click the submit button to post the current state of the Switch. When submitting the Switch in `off` state, validation error message will be shown by using Data Annotation.</p>
    </div>
    }
@section Description{
    <div id="description">
        <p>This sample demonstrates strongly typed support in Switch. You can bind model property to the Switch by using Lambda Expression.
     While submitting form, the model property will be based on <code>checked</code> state of the Switch.</p>
        <p>
            More information on Switch can be found in this
            <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/switch/getting-started" aria-label="documentation section">
                documentation section
                <span class="sr-only">opens in a new tab</span>
            </a>.
        </p>
    </div>
}

<script>
    window.onload = function () {
        // Function to handle ripple effect for Switch with label.
        var elemArray = document.querySelectorAll('.switch-control label');
        for (var i = 0, len = elemArray.length; i < len; i++) {
            elemArray[i].addEventListener('mouseup', rippleHandler);
            elemArray[i].addEventListener('mousedown', rippleHandler);
        }

        function rippleHandler(e) {
            let rippleSpan = this.nextElementSibling.querySelector('.e-ripple-container');
            rippleSpan && ejs.buttons.rippleMouseHandler(e, rippleSpan);
        }
    }
</script>
@*custom code start*@
<style>
    /* Switch Styles */
    .switch-control {
       text-align: center;
       width: 250px;
       margin: 0 auto;
       margin-top: 9%;
    }

    .switch-control div {
        display: flex;
        align-items: center;
    }

    .switch-control label {
        -webkit-tap-highlight-color: transparent;
        cursor: pointer;
        user-select: none;
        font-weight: 400;
        font-size: 13px;
        margin: 10px;
    }

    .switch-control .e-disabled {
        pointer-events: none;
    }

    .field-validation-error,
    .field-validation-valid {
        color: red;
        display: block;
        margin: 15px 0;
    }

    #submit-button {
        margin-top: 10px;
    }
</style>
@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Button Switch Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Switch in ASP.NET MVC Button Control</h1>
                }
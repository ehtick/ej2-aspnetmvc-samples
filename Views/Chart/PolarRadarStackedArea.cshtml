@using Syncfusion.EJ2;
@section ControlsSection{
<div>
    <div class="col-lg-8 control-section">
@(Html.EJS().Chart("container")
    .Series(sr =>
    {
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Polar)
            .DrawType(Syncfusion.EJ2.Charts.ChartDrawType.StackingArea)
            .Name("2013")
            .XName("Country")
            .YName("GDP_2013")
            .Width(2)
            .DataSource(ViewData["ChartPoints"]).Add();
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Polar)
            .DrawType(Syncfusion.EJ2.Charts.ChartDrawType.StackingArea)
            .Name("2014")
            .XName("Country")
            .YName("GDP_2014")
            .Width(2)
            .DataSource(ViewData["ChartPoints"]).Add();
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Polar)
            .DrawType(Syncfusion.EJ2.Charts.ChartDrawType.StackingArea)
            .Name("2015")
            .XName("Country")
            .YName("GDP_2015")
            .Width(2)
            .DataSource(ViewData["ChartPoints"]).Add();
        sr.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Polar)
            .DrawType(Syncfusion.EJ2.Charts.ChartDrawType.StackingArea)
            .Name("2016")
            .XName("Country")
            .YName("GDP_2016")
            .Width(2)
            .DataSource(ViewData["ChartPoints"]).Add();
    })
      .PrimaryXAxis(xaxis =>
         xaxis.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
             .LabelPlacement(Syncfusion.EJ2.Charts.LabelPlacement.OnTicks)
             .Interval(1)
      )
      .Title("GDP in current prices (USD Billion)")
      .Tooltip(tp => tp.Enable(true).Header("").Format("<b>${point.x}</b><br>GDP: <b>${point.y}USD</b>").EnableHighlight(true))
      .LegendSettings(lg => lg.EnableHighlight(true))
      .Load("load").Render()
)
    </div>
    <div class="col-lg-4 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Series Type:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            @Html.EJS().DropDownList("dropdown").Index(0).DataSource(ViewData["data"]).Value("Polar").Change("valueChange").Render()
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

 @*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
 @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var load = function (args) {
            loadChartTheme(args);
            args.chart.primaryXAxis.coefficient = ej.base.Browser.isDevice ? 80 : 100;
            args.chart.series[0].dataSource[3].Country = ej.base.Browser.isDevice ? "UK" : "United Kingdom";
            args.chart.series[1].dataSource[3].Country = ej.base.Browser.isDevice ? "UK" : "United Kingdom";
            args.chart.series[2].dataSource[3].Country = ej.base.Browser.isDevice ? "UK" : "United Kingdom";
            args.chart.series[3].dataSource[3].Country = ej.base.Browser.isDevice ? "UK" : "United Kingdom";
        };
        var valueChange = function () {
            var chart = document.getElementById('container').ej2_instances[0];
            var polarType = document.getElementById("dropdown").ej2_instances[0];
            chart.series[0].type = polarType.value;
            chart.series[1].type = polarType.value;
            chart.series[2].type = polarType.value;
            chart.series[3].type = polarType.value;
            chart.series[0].animation.enable = false;
            chart.series[1].animation.enable = false;
            chart.series[2].animation.enable = false;
            chart.series[3].animation.enable = false;
            chart.refresh();
        }
    </script>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Stacked Area in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section ActionDescription{
    <p>
        This sample shows GDP growth of various countries for a few years in the polar and radar charts using the stacked area series.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure polar and radar charts with stacking area series. Switching between polar and radar series can be done using <b>Series Type</b> in the property panel.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <p>
        More information about the polar and radar series with a stacking area type chart can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/polar#stacked-area" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Stacked Area Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Stacked Area in ASP.NET MVC Chart Control</h1>
                }
@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">
       
            @Html.EJS().Chart("container").Series(
           series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y").
               Width(2).Opacity(1).Name("Total").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DataSource(ViewData["ChartData"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y").
               Width(2).Opacity(1).Name("Total1").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DashArray("4,4").
               DataSource(ViewData["ChartDataValues"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                    XName("X").
                YName("Y1").
                Width(2).Opacity(1).Name("Ages 65+").
                Marker(mr => mr.Visible(false).Width(7).Height(7)).
                DataSource(ViewData["ChartData"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y1").
               Width(2).Opacity(1).Name("Ages1 65+").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DashArray("4,4").
               DataSource(ViewData["ChartDataValues"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                    XName("X").
                YName("Y2").
                Width(2).Opacity(1).Name("Ages 25-64").
                Marker(mr => mr.Visible(false).Width(7).Height(7)).
                DataSource(ViewData["ChartData"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y2").
               Width(2).Opacity(1).Name("Ages1 25-64").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DashArray("4,4").
               DataSource(ViewData["ChartDataValues"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                    XName("X").
                YName("Y3").
                Width(2).Opacity(1).Name("Under-25s").
                Marker(mr => mr.Visible(false).Width(7).Height(7)).
                DataSource(ViewData["ChartData"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y3").
               Width(2).Opacity(1).Name("Unders-25s").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DashArray("4,4").
               DataSource(ViewData["ChartDataValues"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                    XName("X").
                YName("Y4").
                Width(2).Opacity(1).Name("Under-15s").
                Marker(mr => mr.Visible(false).Width(7).Height(7)).
                DataSource(ViewData["ChartData"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y4").
               Width(2).Opacity(1).Name("Unders-15s").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DashArray("4,4").
               DataSource(ViewData["ChartDataValues"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                    XName("X").
                YName("Y5").
                Width(2).Opacity(1).Name("Under-5s").
                Marker(mr => mr.Visible(false).Width(7).Height(7)).
                DataSource(ViewData["ChartData"]).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
                   XName("X").
               YName("Y5").
               Width(2).Opacity(1).Name("Unders-5s").
               Marker(mr => mr.Visible(false).Width(7).Height(7)).
               DashArray("4,4").
               DataSource(ViewData["ChartDataValues"]).Add();

           }).PrimaryXAxis(
           xAxis =>
           {
               xAxis.ValueType(Syncfusion.EJ2.Charts.ValueType.Double).Interval(30).Minimum(1950).Maximum(2100).
                   MajorGridLines(mg=>mg.Width(0)).
                   MajorTickLines(mt => mt.Width(0)).MinorTickLines(mt => mt.Width(0));
           }).PrimaryYAxis(
           yAxis =>
           {
               yAxis.Title("Population (in Billions)").
               RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).
               LineStyle(ls => ls.Width(0)).
               Interval(2e9).
               Minimum(0).
               Maximum(12e9).
               MajorTickLines(mt => mt.Width(0)).MinorTickLines(mt => mt.Width(0));
           }).Title("Fruits Production Statistics").Tooltip(
           tooltip =>
           {
               tooltip.Enable(true).Shared(true).
               ShowNearestTooltip(true);
           }).LegendSettings(legendSettings => legendSettings.Visible(true)).Crosshair(
           crosshair =>
           {
               crosshair.Enable(false).
               LineType(Syncfusion.EJ2.Charts.LineType.Vertical).Line(line => line.Color("rgba(204,214,235,0.25)"));
           }).ChartArea(area => area.Border(br => br.Width(0)).Margin(margin => margin.Bottom(12))).Title("Global Population Trends by Age Group (1950-2100)").SubTitle("Source: ourworldindata.org").Load("load").SharedTooltipRender("sharedTooltipRender").LegendRender("legendRender").AxisLabelRender("axisLabelRender").Render()
        </div>
    
 @*custom code start*@
    <style>
        #control-container {
        padding: 0px !important;
    }

        #container_Series_1, #container_Series_3, #container_Series_5, #container_Series_7, #container_Series_9, #container_Series_11 {
            stroke-dasharray: 4px 4px;
            stroke-linejoin: round;
            stroke-linecap: round;
            -webkit-animation: dash 1s linear infinite;
            animation: dash 1s linear infinite;
        }

    #container_Series_0_Point_3_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }
        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
    </style>
@*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var load = function (args) {
            let selectedTheme = loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.labelIntersectAction = ej.base.Browser.isDevice?'None':'Trim';
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice ? -45 : 0;
            args.chart.crosshair.line.width = ej.base.Browser.isDevice ? 50 : 20;       
        }

        var axisLabelRender = function (args) {
            if (args.axis.orientation === 'Vertical') {
                var value = Number(args.text);
                if (!isNaN(value) && value >= 0) {
                    args.text = (value / 1e9).toFixed(0);
                }
            }
        }

        var sharedTooltipRender = function (args) {
            if (args.text && Array.isArray(args.point) && Array.isArray(args.series)) {
                args.text = args.point.map(function (point, i) {
                    if (point && point.y !== undefined && args.series[i]) {
                        var value = Number(point.y);
                        var formattedValue;
                        if (value >= 1_000_000_000) {
                            formattedValue = (value / 1_000_000_000).toFixed(2) + ' B';
                        } else if (value >= 1_000_000) {
                            formattedValue = (value / 1_000_000).toFixed(2) + ' M';
                        }
                        var seriesNameMapping = {
                            'Total1': 'Total',
                            'Ages1 65+': 'Ages 65+',
                            'Ages1 25-64': 'Ages 25-64',
                            'Unders-25s': 'Under-25s',
                            'Unders-15s': 'Under-15s',
                            'Unders-5s': 'Under-5s',
                        };
                        var seriesName = args.series[i].name || "Series " + (i + 1);
                        seriesName = seriesNameMapping[seriesName] || seriesName;
                        return seriesName + ": <b>" + formattedValue + "</b>";
                    }
                    return null;
                }).filter(Boolean);
            }
        }

        var legendRender = function (args) {
            var cancelLegendNames = new Set([
                'Total1',
                'Ages1 65+',
                'Ages1 25-64',
                'Unders-25s',
                'Unders-15s',
                'Unders-5s'
            ]);

            if (cancelLegendNames.has(args.text)) {
                args.cancel = true;
            }
        }

    </script>
}
@section ActionDescription{
    <p>
        This sample illustrates global population trends from 1950 to 2100, with solid lines representing historical data and dashed lines for projections.
    </p>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Dashed Line in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section Description{
    <p>
        In this example, you will see how to render and configure the line chart. Line charts are used to represent time-dependent data, showing trends in data at equal intervals. You can use <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_DashArray" aria-label="DashArray">DashArray<span class="sr-only">opens in a new tab</span></a>,
        <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_Width" aria-label="">Width<span class="sr-only">opens in a new tab</span></a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_Fill" aria-label="Fill">Fill<span class="sr-only">opens in a new tab</span></a> properties to customize the line.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over or tap on the chart.
    </p>
    <p>
        More information about the line series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/line#series-customization" aria-label="documentation section">documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Dashed Line Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Charts</h1>
                }
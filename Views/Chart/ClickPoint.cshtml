@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">
        @Html.EJS().Chart("AddPoint").Series(series =>
        {
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line)
                 .XName("X")
                 .YName("Y")
                 .Width(3)
                 .Marker(marker => marker.Visible(true).Width(13).Height(13).IsFilled(true))
                 .DataSource(ViewData["ChartPoints"])
                 .Add();
        }).PrimaryXAxis(px => px.EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.Additional).MajorGridLines(mg => mg.Width(0))
        ).PrimaryYAxis(py => py.Title("Value").Interval(20).LineStyle(ls => ls.Width(0)).MajorTickLines(mt => mt.Width(0))
        ).Tooltip(tt => tt.Enable(true)).Title("User supplied data").ChartArea(area => area.Border(br => br.Width(0))).Load("load").ChartMouseClick("chartMouseClick").AxisRangeCalculated("axisRangeCalculated").Render()
    </div>

    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var chart;
        function load(args) {
            chart = args.chart;
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "70%";
            args.chart.series[0].marker.border.width = 2;
            args.chart.series[0].marker.border.color = "white";
        }
        function chartMouseClick(args) {
            var isRemoved = false;
            if (args.axisData) {
                for (var i = 0; i < chart.series[0].points.length; i++) {
                    var markerWidth = chart.series[0].marker.width / 2;
                    var roundedX = Math.round(args.axisData.primaryXAxis) + markerWidth;
                    var roundedY = Math.round(args.axisData.primaryYAxis) + markerWidth;
                    var pointX = Math.round(chart.series[0].points[i].x) + markerWidth;
                    var pointY = Math.round(chart.series[0].points[i].y) + markerWidth;
                    if ((roundedX === pointX || roundedX + 1 === pointX || roundedX - 1 === pointX) &&
                        (roundedY === pointY || roundedY + 1 === pointY || roundedY - 1 === pointY)) {
                        if (chart.series[0].points.length > 1) {
                            var points = chart.series[0].points;
                            var duration = i === 0 || i === points[points.length - 1].index ? 500 : 0;
                            chart.series[0].removePoint(i, duration);
                        }
                        isRemoved = true;
                    }
                }
                if (!isRemoved) {
                    chart.series[0].addPoint({ X: Math.round(args.axisData['primaryXAxis']), Y: Math.round(args.axisData['primaryYAxis']) });
                }
            }
        }
        function axisRangeCalculated(args) {
            if (args.axis.name === 'primaryXAxis') {
                if (args.interval < 10) {
                    args.maximum = args.maximum + 10;
                    args.minimum = args.minimum - 10;
                    args.interval = 10;
                }
            }
            if (args.axis.name === 'primaryYAxis') {
                if (args.maximum <= 60) {
                    args.interval = 10;
                }
            }
        }
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Click to add a point in ASP.NET MVC Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates a chart that allows end users to add new data and update the existing data source by clicking in the chart area. Additionally, clicking on an existing point will remove that data from the existing data source.
    </p>
}
@section Description{
    <p>
        In this example, the X-Axis and Y-Axis data of the currently clicked location are retrieved from the <code>ChartMouseClick</code> event arguments and converted into a new point. This point is then added to the existing data source using the <code>AddPoint</code> method. If a point with the same coordinates already exists, it will be removed from the data source using the <code>RemovePoint</code> method.
    </p>
    <p>
        More information on the line series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/line" aria-label="Navigate to the documentation for Line Chart in ASP.NET MVC Chart control">documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Click to add a point Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Charts</h1>
}
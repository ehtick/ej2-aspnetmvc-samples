@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Layouts;
@model EJ2MVCSampleBrowser.Controllers.Chart.ChartController.spacingModel
@section ControlsSection{
<div class="control-section">
       @*dashboard layout*@
       @Html.EJS().DashboardLayout("editableLayout").Columns(8).ResizeStop("onPanelResize").CellAspectRatio(0.8).AllowDragging(false).AllowResizing(false).Created("onCreated").CellSpacing(Model.cellSpacing).Panels(Panel =>
       {
         Panel.SizeX(5).SizeY(2).Row(0).Col(0).ContentTemplate(
           @<div>
             <div class="e-panel-container" id="chart1">
                 <div class="e-panel-header">
                     <div class="title" id="header1">
                         Sales - Yearly Performance
                     </div>
                 </div>
                 <div class="e-panel-content">
                     @(Html.EJS().Chart("linechart").Height("100%").Width("100%").Series(series =>
                     {
                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).CornerRadius(cornerRadius => cornerRadius.TopLeft(4).TopRight(4))
                            .Marker(mr => mr.DataLabel(dl => dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Middle).Font(ft => ft.Color("white")))).XName("Period").Fill("#2485FA")
                            .YName("OnlinePercentage").DataSource(ViewData["columnSource"]).Name("Online").Width(2).Add();
                        series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).CornerRadius(cornerRadius => cornerRadius.TopLeft(4).TopRight(4))
                            .Marker(mr => mr.DataLabel(dl => dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Middle).Font(ft=>ft.Color("white")))).XName("Period").Fill("#FEC200")
                            .YName("RetailPercentage").DataSource(ViewData["columnSource"]).Name("Retail").Width(2).Add();
                        }).PrimaryYAxis(px => px.LabelFormat("{value}%").LabelStyle(ls => ls.Size("11px")).LineStyle(ls => ls.Width(0)).MajorTickLines(mg => mg.Width(0))
                        .Minimum(0).Maximum(100)
                        ).PrimaryXAxis(px => px.Interval(1).LabelStyle(ls=>ls.Size("11px"))
                        .ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0))
                        ).ChartArea(area => area.Border(br => br.Color("transparent"))
                        ).LegendSettings(lg => lg.Visible(true).Padding(5).ShapeHeight(8).ShapeWidth(8).EnableHighlight(true)).Load("loadLinechart").Render())
                  </div>
             </div>
            </div>
        ).Add();
        Panel.SizeX(3).SizeY(2).Row(0).Col(5).ContentTemplate( 
        @<div>
              <div class="e-panel-container" id="chart2">
                  <div class="e-panel-header">
                      <div class="title" id="header2">
                           Product Wise Sales - 2024
                      </div>
                  </div>
                  <div class="e-panel-content">
                      @(Html.EJS().AccumulationChart("pie").Height("100%").Width("100%").EnableAnimation(true)
                             .EnableBorderOnMouseMove(false).EnableSmartLabels(false).Series(series => {
                             series.TooltipMappingName("Product").DataLabel(dl => dl.Visible(true).Name("text")
                                .Position(Syncfusion.EJ2.Charts.AccumulationLabelPosition.Outside)
                                .ConnectorStyle(cs=>cs.Length("10px").Type(Syncfusion.EJ2.Charts.ConnectorType.Curve)))
                                .InnerRadius("40%").Radius("75%").XName("Product").YName("Percentage")
                                .Type(Syncfusion.EJ2.Charts.AccumulationType.Pie)
                                .Border(br => br.Width(3))
                                .StartAngle(270).Palettes((string[])ViewData["palettes"]).EndAngle(270).Explode(false)
                                .DataSource(ViewData["pieSource"]).Add();
                             })
                             .LegendSettings(ls => ls.Visible(false).ToggleVisibility(false))
                             .Tooltip(tp => tp.Enable(true).Format("${point.tooltip}").EnableHighlight(true))
                             .Load("loadPiechart").PointRender("onPointRender").Render()
                             )
                        
                    </div>
                </div>
            </div>
         ).Add();
         Panel.SizeX(8).SizeY(3).Row(4).Col(0).ContentTemplate(
         @<div>
            <div class="e-panel-container" id="chart3">
                <div class="e-panel-header">
                    <div class="title" id="header3">
                        Monthly Sales for 2024
                    </div>
                </div>
                <div class="e-panel-content">
                    @(Html.EJS().Chart("spline").Height("100%").Width("100%").Series(series =>
                    {
                    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.SplineArea)
                        .Border(br => br.Width(2.75).Color("#2485FA")).Width(2.5).Opacity(0.3).XName("Period")
                        .YName("OnlinePercentage").Fill("#2485FA").DataSource(ViewData["splineSource"]).Name("Online").Add();
                    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.SplineArea)
                        .Border(br => br.Width(2.75).Color("#FEC200")).Width(2.5).Opacity(0.3).XName("Period")
                        .YName("RetailPercentage").Fill("#FEC200").DataSource(ViewData["splineSource"]).Name("Retail").Add();
                    }).PrimaryXAxis(px => px.MajorTickLines(mt=>mt.Width(0)).LabelStyle(ls=>ls.Size("11px")).MajorGridLines(mg => mg.Width(0))
                    .ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
                    ).PrimaryYAxis(py => py.LabelFormat("${value}").Minimum(0).Maximum(12000).LabelStyle(ls => ls.Size("11px")).LineStyle(ls => ls.Width(0))
                    ).Tooltip(tt => tt.Enable(true).EnableHighlight(true).ShowNearestTooltip(true).EnableMarker(false)).LegendSettings(ls=>ls.EnableHighlight(true)).ChartArea(area => area.Border(br => br.Color("transparent"))).Load("loadSplinechart").Render())
                </div>
            </div>
        </div>
).Add();
}).Render()
    </div>
    
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    <style>
        .e-dashboardlayout {
            padding: 20px;
            z-index: 0;
            background: none;
        }

        .e-panel {
            cursor: auto !important;
            background: none;
        }

        .e-panel-content {
            height: calc(100% - 27px) !important;
            overflow: hidden;
            width: 100%;
        }

        .e-chart, .e-accumulationchart {
            height: inherit !important;
            width: inherit !important;
        }

        .e-panel-header {
            background: none;
            border: none !important;
            height: 50px !important;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .template {
            height: 100%;
            width: 100%;
        }

        #control-container {
            background: none;
            padding: 0px !important;
        }

        #gradient-chart stop {
            stop-color: #2485FA;
        }

        #gradient-chart1 stop {
            stop-color: #FEC200;
        }

        .ellipse[id*=_Trackball_1] {
            stroke-width: 1 !important;
        }

        .e-chart-focused:focus {
            outline: none !important;
        }

        .title {
            font-size: 15px;
            font-weight: bold;
            color: #737373;
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        function onCreated(args) {
            var dashboardObject = document.getElementById("editableLayout").ej2_instances[0];
            var panels = [{ "sizeX": 1, "sizeY": 1, "row": 0, "col": 0 },
                          { "sizeX": 1, "sizeY": 1, "row": 0, "col": 1 },
                          { "sizeX": 2, "sizeY": 1, "row": 1, "col": 0 }];
            if (ej.base.Browser.isDevice) {
                dashboardObject.panels = panels;
                dashboardObject.columns = 2;
                dashboardObject.cellAspectRatio = 1;
                dashboardObject.refresh();
            }
        }
        function onPanelResize(args) {
            var chartElement = args.element ? (args.element.querySelector('.e-panel-container .e-panel-content .e-control')) : null;
            if (chartElement) {
                let chartObj = (chartElement).ej2_instances[0];
                chartObj.height = '95%';
                chartObj.width = '100%';
                chartObj.refresh();
            }            
        }
        document.addEventListener('DOMContentLoaded', function () {
            var lineObj = document.getElementById('linechart').ej2_instances[0];
            var pieObj = document.getElementById('pie').ej2_instances[0];
            var splineObj = document.getElementById('spline').ej2_instances[0];
            lineObj.refresh(); pieObj.refresh(); splineObj.refresh();
        });
        var loadLinechart = function (args) {
            loadChartTheme(args);
        }

        var loadPiechart = function (args) {
            loadAccumulationChartTheme(args);
        }
        var loadSplinechart = function (args) {
            loadChartTheme(args);
        }
        var layoutColor;
        var onPointRender = function (args) {
            var selectedTheme = location.hash.split('/')[1];
            selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';
            if (selectedTheme.indexOf('dark') > -1) {
                if (selectedTheme.indexOf('material') > -1) {
                    args.border.color = '#303030';
                    this.layoutColor = '#303030';
                }
                else if (selectedTheme.indexOf('bootstrap5') > -1) {
                    args.border.color = '#212529';
                    this.layoutColor = '#212529';
                }
                else if (selectedTheme.indexOf('bootstrap') > -1) {
                    args.border.color = '#1A1A1A';
                    this.layoutColor = '#1A1A1A';
                }
                else if (selectedTheme.indexOf('fabric') > -1) {
                    args.border.color = '#201f1f';
                    this.layoutColor = '#201f1f';
                }
                else if (selectedTheme.indexOf('fluent') > -1) {
                    args.border.color = '#252423';
                    this.layoutColor = '#252423';
                }
                else if (selectedTheme.indexOf('bootstrap') > -1) {
                    args.border.color = '#1A1A1A';
                    this.layoutColor = '#1A1A1A';
                }
                else if (selectedTheme.indexOf('tailwind') > -1) {
                    args.border.color = '#1F2937';
                    this.layoutColor = '#1F2937';
                }
                else {
                    args.border.color = '#222222';
                    this.layoutColor = '#222222';
                }
            }
            else if (selectedTheme.indexOf('highcontrast') > -1) {
                args.border.color = '#000000';
                this.layoutColor = '#000000';
            }
            else if (selectedTheme.indexOf('fluent2-highcontrast') > -1) {
                args.border.color = '#000000';
                this.layoutColor = '#000000';
            }
            else {
                args.border.color = '#FFFFFF';
                this.layoutColor = '#FFFFFF';
            }
            if (selectedTheme === 'fluent2-dark') {
                var elements = document.querySelectorAll('.e-panel-header');
                elements.forEach(function (element) {
                    element.style.setProperty('background', '#252423');
                });
            }
            if (selectedTheme.indexOf('highcontrast') > -1 || selectedTheme.indexOf('dark') > -1) {
                var element = document.querySelector('#header1');
                element.style.color = '#F3F2F1';
                var chart1 = document.getElementById('chart1');
                chart1.style.setProperty('background', this.layoutColor);
                var chart2 = document.getElementById('chart2');
                chart2.style.setProperty('background', this.layoutColor);
                var chart3 = document.getElementById('chart3');
                chart3.style.setProperty('background', this.layoutColor);
                var elementBody = document.getElementById('linechart');
                elementBody.style.setProperty('background', this.layoutColor);
                var element1 = document.querySelector('#header2');
                element1.style.color = '#F3F2F1';
                var element1Body = document.getElementById('pie');
                element1Body.style.setProperty('background', this.layoutColor);
                var element2 = document.querySelector('#header3');
                element2.style.color = '#F3F2F1';
                var element2Body = document.getElementById('spline');
                element2Body.style.setProperty('background', this.layoutColor);
            }
        }
    </script>
}

<svg style={{ height: 0 }}>
    <defs>
        <linearGradient id="gradient-chart" style={{opacity: 0.75}} className="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="gradient-chart1" style={{opacity: 0.75}} className="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>
@*custom code start*@
@section Meta{
    <meta name="description" content="This sample shows an overview of ASP.NET MVC Charts that allows users to visualize data easily and take decisions based on it. There are different types of charts to create feature rich apps." />
}
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        This sample shows an overview of <a target="_blank" href="https://www.syncfusion.com/aspnet-mvc-ui-controls" aria-label="ASP.NET MVC Charts">ASP.NET MVC Charts<span class="sr-only">opens in a new tab</span></a> that allows users to visualize data easily and take decisions based on it. There are different types of charts to create feature rich apps.
    </div>
}
@section Description{
    <p>
        The ASP.NET MVC Chart is a well-crafted charting component to visualize data. In this example, you will see how to render and configure line, column, and pie charts with different features such as highlight, legend, tooltip and annotation. The Chart uses <code>SfDataManager</code>, which supports both RESTful JSON data services binding and IEnumerable binding.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over or tap on the chart.
    </p>
    <p>
        More information on the ASP.NET MVC chart types can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/line" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Overview Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Charts</h1>
}

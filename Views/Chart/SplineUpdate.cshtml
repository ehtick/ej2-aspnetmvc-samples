@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">
       @Html.EJS().Chart("spline").Series(series =>
       {
          series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Spline)
                .XName("X")
                .YName("Y")
                .Width(2)
                .Marker(mr => mr.Visible(true).Width(7).Height(7).IsFilled(true))
                .DataSource(ViewData["ChartPoints"])
                .Add();
       }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Hide).Interval(7).PlotOffsetRight(30).MajorGridLines(mg => mg.Width(0))
       ).PrimaryYAxis(py => py.Title("Value").Interval(20).LineStyle(ls => ls.Width(0)).MajorTickLines(mt => mt.Width(0))
       ).Title("Live data").ChartArea(area => area.Border(br => br.Width(0))
       ).AxisRangeCalculated("axisRangeCalculated").Load("load").Render()
    </div>

    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
        #spline_Series_0_Point_15_Symbol {
            -webkit-animation: opac 1s ease-out infinite;
            animation: opac 1s ease-out infinite;
        }

        @@keyframes opac {
            0% {
                stroke-opacity: 1;
                stroke-width: 10px;
            }

            100% {
                stroke-opacity: 0;
                stroke-width: 20px;
            }
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>

        var intervalId;

        function load(args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
            args.chart.primaryXAxis.edgeLabelPlacement = ej.base.Browser.isDevice ? "None" : "Shift";
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice ? 45 : 0;

            splineClearInterval();

            intervalId = setInterval(function () {
                var container = document.getElementById('spline');
                if (container) {
                    if (args.chart && args.chart.series.length > 0 && args.chart.series[0].dataSource) {
                        var lastDataPointIndex = args.chart.series[0].dataSource.length - 1;
                        if (lastDataPointIndex >= 0) {
                            var timestamp = args.chart.series[0].dataSource[lastDataPointIndex].X;
                            var lastTimestamp = new Date(timestamp).getTime();
                            var x = new Date(lastTimestamp + 2000);
                            var y;
                            if (x.getSeconds() % 3 === 0) {
                                y = Math.max(30, Math.random() * 150);
                            } else if (x.getSeconds() % 2 === 0) {
                                y = Math.max(30, Math.random() * 200);
                            } else {
                                y = Math.max(30, Math.random() * 100);
                            }
                            args.chart.series[0].addPoint({ X: x, Y: y }, 800);
                            args.chart.series[0].removePoint(0, 800);
                        }
                    }
                }
                else {
                    splineClearInterval();
                }
            }, 1000);
        }
        function splineClearInterval() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }
        function axisRangeCalculated(args) {
            if (args.axis.name === 'primaryXAxis') {
                var lastPoint = args.axis.series[0].points[args.axis.series[0].points.length - 1].x;
                args.maximum = new Date(lastPoint).getTime() + 500;
            }
        }
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Update Spline in ASP.NET MVC Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This sample demonstrates how to add and remove data in a spline chart, allowing modification of the data at set intervals.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure a spline chart to display data that updates every second using the <code>AddPoint</code> method, with old data being removed using the <code>RemovePoint</code> method. The X-axis represents the time at which the data is added, while the Y-axis displays the data values.
    </p>
    <p>
        More information on the spline series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/spline" aria-label="Navigate to the documentation for Spline Chart in ASP.NET MVC Chart control">documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Update Spline Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Charts</h1>
}
@using Syncfusion.EJ2;
@section ControlsSection{
<script src="~/Scripts/theme-color.js"></script>
<style>
    .waitingpopup {
        position: absolute;
        z-index: 100;
        top: 0;
        left: 0;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
        width: 50px;
        height: 50px;
    }

    .image {
        position: absolute;
        background-repeat: no-repeat;
        background-image: url('src/chart/images/Medium-36px-spin.gif');
        background-position: center;
        width: 50px;
        height: 50px;
        padding: 6px;
    }
    @*custom code start*@
    #control-container {
        padding: 0px !important;
    }
    @*custom code end*@
</style>
<div class="col-lg-12 control-section" style="text-align:center">

    @Html.EJS().Chart("container").Series(series =>
{
    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).Name("Story Point").XName("CustomerID").Marker(mr=>mr.DataLabel(dl=>dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Top).Format("{value}K").Font(ff => ff.FontWeight("600").Color("#ffffff"))))
.YName("Freight").DataSource("dataManager").Query("query").Add();

}).PrimaryXAxis(px => px.RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.Additional).MajorGridLines(mg=>mg.Width(0)).MajorTickLines(mg=>mg.Width(0)).ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
       ).ChartArea(area => area.Border(br => br.Width(0))).Tooltip(tooltip => tooltip.Enable(false).Header("<b>Freight rate</b>")).PrimaryYAxis(py => py.MajorGridLines(mg=>mg.Width(1)).MajorTickLines(mt=>mt.Width(0)).LineStyle(ls=>ls.Width(0)).Title("Freight rate in U.S. dollars")).Title("Container freight rate").LegendSettings(lg => lg.Visible(false)).PointRender("remotepointRender").Width("75%").TooltipRender("tooltipRender").AxisLabelRender("axisLabelRender").Load("load").Loaded("loadedChart").Render()

        <div id="waitingpopup" class="waitingpopup" style="display:none">
            <span id="gif" class="image"></span>
        
    </div>
</div>
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var dataManager = new ej.data.DataManager({
            url: 'https://ej2services.syncfusion.com/production/web-services/api/orders'
        });

        var query = new ej.data.Query().take(5);
        var tooltipRender = function (args) {
            args.text = args.data.pointX + ': ' + '<b>' + '$' + args.data.pointY * 1000 + '</b>';
        }
        var axisLabelRender = function (args) {
             if (args.axis.name === 'primaryYAxis') {
                    args.text =  '' + args.value * 1000;
             }
        }
     
        var remotepointRender = function (args) {
            pointRender(args);
        };

        var loaded = 1;
        var loadedChart = function (args) {
            var div = document.getElementById('waitingpopup');
            div.style.display = 'none';
            if (loaded) {
                loaded = 0;
                args.chart.refresh();
                }
        };

        var load = function (args) {
            loadChartTheme(args);
        }
    </script>
}
         @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Remote Data in ASP.NET MVC Chart control. Explore here for more details."/>
                }
         @*custom code end*@
@section ActionDescription{
    <p>
        This sample shows the way in which the Charts component can be bound to a remote service. The data source of the chart is bound to remote data using the DataManager component.
    </p>
}
@section Description{
    <p>
        The Charts component supports data binding. The DataManager component can be used to configure the Charts component to bind remote data.
    </p>
    <p>
        The DataManager, which acts as an interface between the service endpoint and the chart, will require the following minimum information to interact properly with the service endpoint:
    </p>
    <ul>
        <li><code>DataManager.Url</code> - Defines the service endpoint to fetch the data.</li>
        <li>
            <code>DataManager.Adaptor</code> - Defines the adaptor option. By default, <code>ODataAdaptor</code> is used for remote binding.
        </li>
    </ul>
    <p>
        The adaptor is responsible for processing the response and request from and to the service endpoint. They are,
    </p>
    <ul>
        <li>
            <code>UrlAdaptor</code> - Use this to interact with any remote service. This is the base adaptor for all remote based adaptors.
        </li>
        <li><code>ODataAdaptor</code> - Use this to interact with OData endpoints.</li>
        <li><code>ODataV4Adaptor</code> - Use this to interact with OData V4 endpoints.</li>
        <li><code>WebApiAdaptor</code> - Use this to interact with Web API created under OData standards.</li>
    </ul>
    <p>
        In this demo, remote data is bound by assigning service data as an instance of 
        <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.DataManager.html" aria-label="DataManager">DataManager
        <span class="sr-only">opens in a new tab</span></a> component and a query.
    </p>
    <p>
        More information about the remote data binding can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/working-with-data#remote-data" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Remote Data Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Remote Data in ASP.NET MVC Chart Control</h1>
                }
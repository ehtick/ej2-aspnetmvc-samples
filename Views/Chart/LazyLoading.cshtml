@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section col-lg-9">
        @(Html.EJS().Chart("container").Width("100%").Load("load").Title("Network Load")
                       .ScrollEnd("scrollEnd")
                       .LegendSettings(le => le.Visible(false))
                       .PrimaryXAxis(px => px.ScrollbarSettings(scroll => scroll.Enable(true).PointsLength(1000).Height(14).EnableZoom(false)).ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).Skeleton("yMMM").SkeletonType(Syncfusion.EJ2.Charts.SkeletonType.Date))
                       .PrimaryYAxis(py => py.Title("Server Load").LabelFormat("{value}MB")).
                       Series(sr => sr.DataSource("GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1))")
                       .XName("x").YName("y").Name("Server Load").Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Animation(an => an.Enable(false)).Add()).
                       Tooltip(tl => tl.Enable(true).ShowNearestTooltip(true).EnableHighlight(true)).Render()
        )
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr style="height: 50px">
                <td style="width: 40%">
                    <div>Lazy Load </div>
                </td>
                <td style="width: 60%;">
                    <select id="lazymode" style="width:98%;margin-left: -5px;">
                        <option value="Range">Range</option>
                        <option value="Points Length">Points Length</option>
                    </select>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 80%">
                    <div>Min </div>
                </td>
                <td>
                    <input id="datepickermin" type="text" />
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 80%">
                    <div>Max </div>
                </td>
                <td>
                    <input id="datepickermax" type="text" />
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 80%">
                    <div>Point Length </div>
                </td>
                <td>
                    <input id="pointslength" type="text" />
                </td>
            </tr>
        </table>
    </div>
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var intl = new ejs.base.Internationalization();
        var chart;
        var load = function (args) {
            chart = args.chart;
            args.chart.primaryXAxis.scrollbarSettings.range = {
                minimum: new Date(2009, 0, 1),
                maximum: new Date(2014, 0, 1)
            };
            loadChartTheme(args);
            args.chart.load = function () { };
        }
        function GetDateTimeData(start, end) {
            var series1 = [];
            var date;
            var value = 30;
            var option = {
                skeleton: 'full',
                type: 'dateTime'
            };
            var dateParser = intl.getDateParser(option);
            var dateFormatter = intl.getDateFormat(option);
            for (var i = 0; start <= end; i++) {
                date = Date.parse(dateParser(dateFormatter(start)));
                if (Math.random() > .5) {
                    value += (Math.random() * 10 - 5);
                }
                else {
                    value -= (Math.random() * 10 - 5);
                }
                if (value < 0) {
                    value = getRandomInt(20, 40);
                }
                var point1 = { x: new Date(date), y: Math.round(value) };
                new Date(start.setDate(start.getDate() + 1));
                series1.push(point1);
            }
            return series1;
        }
        function GetNumericData(start, end) {
            var series1 = [];
            var value = 30;
            for (var i = start; i <= end; i++) {
                if (Math.random() > .5) {
                    value += (Math.random() * 10 - 5);
                }
                else {
                    value -= (Math.random() * 10 - 5);
                }
                if (value < 0) {
                    value = getRandomInt(20, 40);
                }
                var point = { x: i, y: Math.round(value) };
                series1.push(point);
            }
            return series1;
        }
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        var lazymode = new ejs.dropdowns.DropDownList({
            index: 0,
            width: 120,
            change: function (arg) {
                var min;
                var max;
                if (arg.value === 'Range') {
                    chart.primaryXAxis.valueType = 'DateTime';
                    min = chart.primaryXAxis.scrollbarSettings.range.minimum = new Date(2009, 0, 1);
                    max = chart.primaryXAxis.scrollbarSettings.range.maximum = new Date(2014, 0, 1);
                    chart.series[0].dataSource = GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1));
                    chart.refresh();
                    minDate.enabled = true;
                    maxDate.enabled = true;
                    pointslength.enabled = false;
                }
                else {
                    chart.primaryXAxis.valueType = 'Double';
                    chart.primaryXAxis.scrollbarSettings.range.minimum = null;
                    chart.primaryXAxis.scrollbarSettings.range.maximum = null;
                    chart.primaryXAxis.scrollbarSettings.pointsLength = 1000;
                    chart.series[0].dataSource = GetNumericData(1, 200);
                    chart.refresh();
                    minDate.enabled = false;
                    maxDate.enabled = false;
                    pointslength.enabled = true;
                }
            }
        });
        lazymode.appendTo('#lazymode');
        var minDate = new ejs.calendars.DatePicker({
            value: new Date(2009, 0, 1),
            width: 120,
            change: function (args) {
                chart.primaryXAxis.scrollbarSettings.range.minimum = args.value;
                chart.refresh();
            }
        });
        minDate.appendTo('#datepickermin');
        var maxDate = new ejs.calendars.DatePicker({
            value: new Date(2014, 0, 1),
            width: 120,
            change: function (args) {
                chart.primaryXAxis.scrollbarSettings.range.maximum = args.value;
                chart.refresh();
            }
        });
        maxDate.appendTo('#datepickermax');
        var pointslength = new ejs.inputs.NumericTextBox({
            min: 1000,
            max: 10000,
            value: 1000,
            step: 100,
            enabled: false,
            format: 'n',
            width: 120,
            change: function (args) {
                chart.primaryXAxis.scrollbarSettings.pointsLength = args.value;
                chart.refresh();
            }
        });
        pointslength.appendTo('#pointslength');
        function scrollEnd(args) {
            if (lazymode.value === 'Range') {
                chart.series[0].dataSource = GetDateTimeData(args.currentRange.minimum, args.currentRange.maximum);
            } else {
                chart.series[0].dataSource = GetNumericData(args.currentRange.minimum, args.currentRange.maximum);
            }
            chart.dataBind();
        };
    </script>
}
@section Meta{
    <meta name="description" content="This example demonstrates the Lazy Loading in ASP.NET MVC Chart control. Explore here for more details." />
}
@section ActionDescription{
    <p>
        This sample illustrates lazy loading feature in chart which loads data on demand.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to load data for the chart on demand. The chart will fire the <code>ScrollEnd</code> event, and in that event, we can update the chart with the required data based on the point length and axis range. The scrollbar in the chart can be customized using the <code>Height</code>, <code>TrackColor</code>, <code>TrackRadius</code>, <code>ScrollbarRadius</code>, <code>ScrollbarColor</code>, <code>EnableZoom</code>, and <code>GripColor</code> properties in <code>ScrollbarSettings</code>.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over or tap on the chart.
    </p>
    <p>
        More information about the lazy loading can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/working-with-data#lazy-loading" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Lazy Loading Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Lazy Loading in ASP.NET MVC Chart Control</h1>
}
@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">

        @Html.EJS().Chart("container-vertical").Series(series =>
       {
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingArea100).Width(2).Border(br => br.Width(0.5).Color("#ffffff")).Opacity(1).XName("Period").YName("OrganicSales").DataSource(ViewData["ChartPoints"]).Name("Bank Transfer").Add();
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingArea100).Width(2).Border(br => br.Width(0.5).Color("#ffffff")).Opacity(1).XName("Period").YName("FairTradeSales").DataSource(ViewData["ChartPoints"]).Name("Credit Card").Add();
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingArea100).Width(2).Border(br => br.Width(0.5).Color("#ffffff")).Opacity(1).XName("Period").YName("VegAlternativesSales").DataSource(ViewData["ChartPoints"]).Name("Debit Card").Add();
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingArea100).Width(2).Border(br => br.Width(0.5).Color("#ffffff")).Opacity(1).XName("Period").YName("OtherSales").DataSource(ViewData["ChartPoints"]).Name("Cash").Add();

       }).PrimaryXAxis(px => px.EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift)
       .MajorGridLines(mg=>mg.Width(0)).ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
       .LabelFormat("yyyy").Minimum(new DateTime(1999, 1, 1)).Maximum(new DateTime(2015, 01, 1)).IntervalType(Syncfusion.EJ2.Charts.IntervalType.Years)
       ).PrimaryYAxis(py => py.Interval(20).MajorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0))
       ).Title("Amount of Sales by Payment Mode").Tooltip(tt => tt.Enable(true).ShowNearestTooltip(true).EnableHighlight(true)).ChartArea(area => area.Border(br => br.Width(0))).LegendSettings(leg => leg.EnableHighlight(true)).Load("load").Render()
        </div>

    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var load = function (args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
        }
    </script>
}
   @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the 100% Stacked Area in ASP.NET MVC Chart control. Explore here for more details."/>
                }
   @*custom code end*@
@section ActionDescription{
    <p>
        This <a target="_blank" href="https://www.syncfusion.com/aspnet-mvc-ui-controls/charts/chart-types/100-stacked-area-chart" aria-label="ASP.NET MVC 100% Stacked Area Chart">ASP.NET MVC 100% Stacked Area Chart<span class="sr-only">opens in a new tab</span></a> example visualizes the amount of sales by payment mode with default 100% stacked area series. A legend in the sample shows information about the series.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the 100% stacked area chart. This chart visualizes data with y-values stacked, ensuring that the cumulative proportion of each stacked element always totals 100%.
    </p>
    <p>
        More information on the 100% stacked area series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/stack-area100" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart 100% Stacked Area Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Charts</h1>
                }
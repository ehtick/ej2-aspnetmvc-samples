@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" align="center">

        @Html.EJS().Chart("container-vertical").Series(series =>
       {
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingBar).XName("X").YName("Y1").LegendShape(Syncfusion.EJ2.Charts.LegendShape.Rectangle).Marker(marker => marker.DataLabel(dl => dl.Visible(true)))
               .Border(br => br.Width(1).Color("#ffffff")).Name("Wind").Width(2).ColumnWidth(0.6).DataSource(ViewData["ChartPoints"]).Add();
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingBar).XName("X").YName("Y2").LegendShape(Syncfusion.EJ2.Charts.LegendShape.Rectangle).Marker(marker => marker.DataLabel(dl => dl.Visible(true)))
               .Border(br => br.Width(1).Color("#ffffff")).Name("Solar").Width(2).ColumnWidth(0.6).DataSource(ViewData["ChartPoints"]).Add();
           series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.StackingBar).XName("X").YName("Y3").LegendShape(Syncfusion.EJ2.Charts.LegendShape.Rectangle).Marker(marker => marker.DataLabel(dl => dl.Visible(true)))
               .CornerRadius(cr => cr.TopRight(4).BottomRight(4)).Border(br => br.Width(1).Color("#ffffff")).Name("Hydro").Width(2).ColumnWidth(0.6).DataSource(ViewData["ChartPoints"]).Add();

       }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category)
       .MajorGridLines(mg=>mg.Width(0)).MajorTickLines(mt => mt.Width(0))
       ).PrimaryYAxis(py => py.LabelFormat("{value}TWh").Maximum(3500)
       .MajorTickLines(mt => mt.Width(0)).LineStyle(ls => ls.Width(0))
       .EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift)
       ).Title("Annual Renewable Energy Generation in China (2020-2023) by Source").SubTitle("Source: wikipedia.org").ChartArea(area => area.Border(br => br.Width(0)).Margin(margin => margin.Bottom(12))
       ).Tooltip(tt => tt.Enable(true).EnableHighlight(true).Header("<b>Renewable Energy Generation</b>").Format("${series.name} : <b>${point.y}</b>")).StackLabels(sl => sl.Visible(true).Format("{value}TWh")).LegendClick("legendClick").TooltipRender("tooltipRender").LegendSettings(leg => leg.Visible(true).EnableHighlight(true).ShapeHeight(9).ShapeWidth(9)).Load("load").Render()
    
        </div>
    
    @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
    @*custom code end*@
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var load = function (args) {
            loadChartTheme(args);
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "75%";
        }

        var tooltipRender = function (args) {
            if (args.text) {
                var value = args.point.y.toLocaleString('en-US');
                args.text = args.series.name + ": <b>" + value + "TWh</b>";
            }
        }

        var legendClick = function (args) {
            if (args.series.index === 0) {
                if (args.chart.series[2].visible) {
                    args.chart.series[2].cornerRadius.bottomRight = 4;
                    args.chart.series[2].cornerRadius.topRight = 4;
                    args.chart.series[0].cornerRadius.bottomRight = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                } else if (args.chart.series[1].visible) {
                    args.chart.series[1].cornerRadius.bottomRight = 4;
                    args.chart.series[1].cornerRadius.topRight = 4;
                    args.chart.series[0].cornerRadius.bottomRight = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                } else {
                    args.chart.series[0].cornerRadius.bottomRight = 4;
                    args.chart.series[0].cornerRadius.topRight = 4;
                }
            }
            if (args.series.index === 1) {
                if (args.chart.series[2].visible) {
                    args.chart.series[2].cornerRadius.bottomRight = 4;
                    args.chart.series[2].cornerRadius.topRight = 4;
                    args.chart.series[1].cornerRadius.bottomRight = 0;
                    args.chart.series[1].cornerRadius.topRight = 0;
                } else if (args.series.visible && args.chart.series[0].visible) {
                    args.chart.series[0].cornerRadius.bottomRight = 4;
                    args.chart.series[0].cornerRadius.topRight = 4;
                    args.chart.series[1].cornerRadius.bottomRight = 0;
                    args.chart.series[1].cornerRadius.topRight = 0;
                } else {
                    args.chart.series[1].cornerRadius.bottomRight = 4;
                    args.chart.series[1].cornerRadius.topRight = 4;
                    args.chart.series[0].cornerRadius.bottomRight = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                }
            }

            if (args.series.index === 2) {
                if (!args.series.visible) {
                    args.chart.series[2].cornerRadius.bottomRight = 4;
                    args.chart.series[2].cornerRadius.topRight = 4;
                    args.chart.series[1].cornerRadius.bottomRight = 0;
                    args.chart.series[1].cornerRadius.topRight = 0;
                    args.chart.series[0].cornerRadius.bottomRight = 0;
                    args.chart.series[0].cornerRadius.topRight = 0;
                } else if (args.chart.series[1].visible) {
                    args.chart.series[1].cornerRadius.bottomRight = 4;
                    args.chart.series[1].cornerRadius.topRight = 4;
                    args.chart.series[2].cornerRadius.bottomRight = 0;
                    args.chart.series[2].cornerRadius.topRight = 0;
                } else if (args.series.visible && args.chart.series[0].visible) {
                    args.chart.series[0].cornerRadius.bottomRight = 4;
                    args.chart.series[0].cornerRadius.topRight = 4;
                    args.chart.series[2].cornerRadius.bottomRight = 0;
                    args.chart.series[2].cornerRadius.topRight = 0;
                }
            }
        }
    </script>  
}
   @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Stacked Bar in ASP.NET MVC Chart control. Explore here for more details."/>
                }
   @*custom code end*@
@section ActionDescription{
    <p>
        This <a target="_blank" href="https://www.syncfusion.com/aspnet-mvc-ui-controls/charts/chart-types/stacked-bar-chart" aria-label="ASP.NET MVC Stacked Bar Chart">ASP.NET MVC Stacked Bar Chart<span class="sr-only">opens in a new tab</span></a> example demonstrates a React stacked bar chart that illustrates renewable energy generation in China from 2020 to 2023, segmented by wind, solar, and hydro sources. The legend in the sample shows more information about the series.
    </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the stacked bar chart. The stacked bar chart stacks points in the series horizontally. You can also use the <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Charts.ChartSeries.html#Syncfusion_EJ2_Charts_ChartSeries_StackingGroup" aria-label="StackingGroup">StackingGroup<span class="sr-only">opens in a new tab</span></a> property to group stacked collections based on category.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices.
    </p>
    <p>
        More information about the stacked bar series can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/chart-types/stacked-bar" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Stacked Bar Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Charts</h1>
                }
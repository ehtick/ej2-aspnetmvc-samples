@using Syncfusion.EJ2;
@section ControlsSection{
    <script src="~/Scripts/stock-chart-data.js"></script>
    <div class="control-section">
        <div class="row">
            <div class="col" id="container1">
                @Html.EJS().Chart("lineContainer1").Series(series =>
                {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("USD").YName("EUR").Width(2)
                .EmptyPointSettings(es => es.Mode(Syncfusion.EJ2.Charts.EmptyPointMode.Drop)).DataSource("ChartPoints").Add();
                }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).Minimum(new DateTime(2023, 2, 18)).Maximum(new DateTime(2023, 8, 18)).LabelFormat("MMM d").MajorGridLines(mg => mg.Width(0)).LineStyle(ls => ls.Width(0))
                ).PrimaryYAxis(px => px.LabelFormat("n2").Minimum(0.86).Maximum(0.96).Interval(0.025).LineStyle(ls => ls.Width(0)).MajorTickLines(mg => mg.Width(0))
                ).Tooltip(tt => tt.Enable(true).ShowNearestTooltip(true).Header("").Format("<b>€${point.y}</b> <br> ${point.x} 2023").EnableMarker(false).EnableHighlight(true)).ChartArea(area => area.Border(br => br.Width(0))
                ).TitleStyle(tl => tl.TextAlignment(Syncfusion.EJ2.Charts.Alignment.Near)
                ).ZoomSettings(zn => zn.EnableMouseWheelZooming(true).EnableScrollbar(false).EnableDeferredZooming(false).EnablePan(true).Mode(Syncfusion.EJ2.Charts.ZoomMode.X).EnablePinchZooming(true).ToolbarItems(ViewData["toolbarItems"])).Crosshair(cr => cr.LineType(Syncfusion.EJ2.Charts.LineType.Vertical).Enable(true).DashArray("2,2")
                ).Title("US to EURO").Load("load").ChartMouseMove("chartMouseMove1").ChartMouseLeave("chartMouseLeave1").ZoomComplete("zoomComplete").ChartMouseUp("chartMouseUp1").Render()
            </div>
            <div class="col" id="container2">
                @Html.EJS().Chart("lineContainer2").Series(series =>
                {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).XName("USD").YName("JPY").Width(2).DataSource("ChartPoints").Add();
                }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).Minimum(new DateTime(2023, 2, 18)).Maximum(new DateTime(2023, 8, 18)).LabelFormat("MMM d").MajorGridLines(mg => mg.Width(0)).LineStyle(ls => ls.Width(0))
                ).PrimaryYAxis(px => px.LabelFormat("{value}").Minimum(120).Maximum(152).Interval(8).LabelPadding(8).LineStyle(ls => ls.Width(0)).MajorTickLines(mg => mg.Width(0))
                ).Tooltip(tt => tt.Enable(true).ShowNearestTooltip(true).Header("").Format("<b>¥${point.y}</b> <br> ${point.x} 2023").EnableMarker(false).EnableHighlight(true)).ChartArea(area => area.Border(br => br.Width(0))
                ).TitleStyle(tl => tl.TextAlignment(Syncfusion.EJ2.Charts.Alignment.Near)
                ).ZoomSettings(zn => zn.EnableMouseWheelZooming(true).EnableScrollbar(false).EnableDeferredZooming(false).EnablePan(true).Mode(Syncfusion.EJ2.Charts.ZoomMode.X).EnablePinchZooming(true).ToolbarItems(ViewData["toolbarItems"])).Crosshair(cr => cr.LineType(Syncfusion.EJ2.Charts.LineType.Vertical).Enable(true).DashArray("2,2")
                ).Title("US to Yen").Load("load").ChartMouseMove("chartMouseMove2").ChartMouseLeave("chartMouseLeave2").ZoomComplete("zoomComplete").ChartMouseUp("chartMouseUp2").Render()
            </div>
        </div>
        <div class="row">
            <div class="col" id="container3">
                @Html.EJS().Chart("lineContainer3").Series(series =>
                {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Area).XName("USD").YName("SGD").Width(2).Opacity(0.6).Border(br => br.Width(2)).DataSource("ChartPoints").Add();
                }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).Minimum(new DateTime(2023, 2, 18)).Maximum(new DateTime(2023, 8, 18)).LabelFormat("MMM d").MajorGridLines(mg => mg.Width(0)).LineStyle(ls => ls.Width(0))
                ).PrimaryYAxis(px => px.LabelFormat("n2").Minimum(1.30).Maximum(1.37).Interval(0.0175).LineStyle(ls => ls.Width(0)).MajorTickLines(mg => mg.Width(0))
                ).Tooltip(tt => tt.Enable(true).ShowNearestTooltip(true).Header("").Format("<b>$${point.y}</b> <br> ${point.x} 2023").EnableMarker(false)).ChartArea(area => area.Border(br => br.Width(0))
                ).TitleStyle(tl => tl.TextAlignment(Syncfusion.EJ2.Charts.Alignment.Near)
                ).ZoomSettings(zn => zn.EnableMouseWheelZooming(true).EnableScrollbar(false).EnableDeferredZooming(false).EnablePan(true).Mode(Syncfusion.EJ2.Charts.ZoomMode.X).EnablePinchZooming(true).ToolbarItems(ViewData["toolbarItems"])).Crosshair(cr => cr.LineType(Syncfusion.EJ2.Charts.LineType.Vertical).Enable(true).DashArray("2,2")
                ).Title("US to SGD").Load("load").ChartMouseMove("chartMouseMove3").ChartMouseLeave("chartMouseLeave3").ZoomComplete("zoomComplete").ChartMouseUp("chartMouseUp3").Render()
            </div>
            <div class="col" id="container4">
                @Html.EJS().Chart("lineContainer4").Series(series =>
                {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Area).XName("USD").YName("INR").Width(2).Opacity(0.6).Border(br => br.Width(2)).DataSource("ChartPoints").Add();
                }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).Minimum(new DateTime(2023, 2, 18)).Maximum(new DateTime(2023, 8, 18)).LabelFormat("MMM d").MajorGridLines(mg => mg.Width(0)).LineStyle(ls => ls.Width(0))
                ).PrimaryYAxis(px => px.LabelFormat("n1").Minimum(79).Maximum(85).Interval(1.5).LineStyle(ls => ls.Width(0)).MajorTickLines(mg => mg.Width(0))
                ).Tooltip(tt => tt.Enable(true).ShowNearestTooltip(true).Header("").Format("<b>₹${point.y}</b> <br> ${point.x} 2023").EnableMarker(false)).ChartArea(area => area.Border(br => br.Width(0))
                ).TitleStyle(tl => tl.TextAlignment(Syncfusion.EJ2.Charts.Alignment.Near)
                ).ZoomSettings(zn => zn.EnableMouseWheelZooming(true).EnableScrollbar(false).EnableDeferredZooming(false).EnablePan(true).Mode(Syncfusion.EJ2.Charts.ZoomMode.X).EnablePinchZooming(true).ToolbarItems(ViewData["toolbarItems"])).Crosshair(cr => cr.LineType(Syncfusion.EJ2.Charts.LineType.Vertical).Enable(true).DashArray("2,2")
                ).Title("US to INR").Load("load").ChartMouseMove("chartMouseMove4").ChartMouseLeave("chartMouseLeave4").ZoomComplete("zoomComplete").ChartMouseUp("chartMouseUp4").Render()
            </div>
        </div>
    </div>

    
    <style>
        @*custom code start*@
        #control-container {
            padding: 0px !important;
        }
        @*custom code end*@
        .row {
            display: flex;
        }

        .col {
            width: 50%;
            margin: 10px;
            height: 270px;
        }
    </style>
    <script src="~/Scripts/chart/theme-color.js"></script>
    <script>
        var chart1;
        var chart2;
        var chart3;
        var chart4;
        var charts = [];
        var zoomFactor = 0;
        var zoomPosition = 0;
        var ChartPoints = synchronizedData;
        function load(args) {
            loadChartTheme(args);
            args.chart.primaryXAxis.interval = ej.base.Browser.isDevice ? 2 : 1;
            args.chart.primaryXAxis.edgeLabelPlacement = ej.base.Browser.isDevice ? 'None' : 'Shift';
            args.chart.primaryXAxis.labelRotation = ej.base.Browser.isDevice ? -45 : 0;
            args.chart.tooltip.fadeOutDuration = ej.base.Browser.isDevice ? 2500 : 1000;
            var themeColor = [];
            var materialColors = ['#00bdae', '#404041', '#357cd2', '#e56590'];
            var materialDarkColors = ['#9ECB08', '#56AEFF', '#C57AFF', '#61EAA9'];
            var fabricColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47'];
            var bootstrapColors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e'];
            var highContrastColors = ['#79ECE4', '#E98272', '#DFE6B6', '#C6E773'];
            var bootstrap4Colors = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e'];
            var bootstrap5Colors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384'];
            var bootstrap5DarkColors = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384'];
            var fluentColors = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF'];
            var tailwindColors = ['#5A61F6', '#65A30D', '#334155', '#14B8A6'];
            var tailwindDarkColors = ['#8B5CF6', '#22D3EE', '#F87171', '#4ADE80'];
            var tailwind3Colors = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733'];
            var tailwind3DarkColors = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733'];
            var fabricdarkColors = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47'];
            var material3Colors = ['#6355C7', '#00AEE0', '#FFB400', '#F7523F'];
            var material3DarkColors = ['#4EAAFF', '#FA4EAB', '#FFF500', '#17EA58'];
            var fluent2Colors = ['#6200EE', '#09AF74', '#0076E5', '#CB3587'];
            var fluent2HighContrastColors = ['#9BB449', '#2A72D5', '#43B786', '#3F579A'];
            // check the theme
            if (args.chart.theme === 'MaterialDark') {
                themeColor = materialDarkColors;
            }
            else if (args.chart.theme === 'Material') {
                themeColor = materialColors;
            }
            else if (args.chart.theme === "Fabric") {
                themeColor = fabricColors;
            }
            else if (args.chart.theme === "FabricDark") {
                themeColor = fabricdarkColors;
            }
            else if (args.chart.theme === 'Bootstrap5Dark') {
                themeColor = bootstrap5DarkColors;
            }
            else if (args.chart.theme === 'Bootstrap5') {
                themeColor = bootstrap5Colors;
            }
            else if (args.chart.theme === "Bootstrap4") {
                themeColor = bootstrap4Colors;
            }
            else if (args.chart.theme === 'TailwindDark') {
                themeColor = tailwindDarkColors;
            }
            else if (args.chart.theme === 'Tailwind') {
                themeColor = tailwindColors;
            }
            else if (args.chart.theme === 'Tailwind3Dark') {
                themeColor = tailwind3DarkColors;
            }
            else if (args.chart.theme === 'Tailwind3') {
                themeColor = tailwind3Colors;
            }
            else if (args.chart.theme === "HighContrast") {
                themeColor = highContrastColors;
            }
            else if (args.chart.theme === 'FluentDark') {
                themeColor = fluentColors;
            }
            else if (args.chart.theme === 'Bootstrap') {
                themeColor = bootstrapColors;
            }
            else if (args.chart.theme === 'BootstrapDark') {
                themeColor = bootstrapColors;
            }
            else if (args.chart.theme === 'Material3') {
                themeColor = material3Colors;
            }
            else if (args.chart.theme === 'Material3Dark') {
                themeColor = material3DarkColors;
            }
            else if (args.chart.theme === 'Fluent2') {
                themeColor = fluent2Colors;
            }
            else if (args.chart.theme === 'Fluent2HighContrast' || args.chart.theme === 'Fluent2Dark') {
                themeColor = fluent2HighContrastColors;
            }
            else {
                themeColor = fluentColors;
            }
            // check the container
            if (args.chart.element.id === 'lineContainer1') {
                args.chart.series[0].fill = themeColor[0];
            }
            else if (args.chart.element.id === 'lineContainer2') {
                args.chart.series[0].fill = themeColor[1];
            }
            else if (args.chart.element.id === 'lineContainer3') {
                args.chart.series[0].fill = themeColor[2];
            }
            else if (args.chart.element.id === 'lineContainer4') {
                args.chart.series[0].fill = themeColor[3];
            }
        }

        function zoomComplete(args) {
            if (args.axis.name === 'primaryXAxis') {
                zoomFactor = args.currentZoomFactor;
                zoomPosition = args.currentZoomPosition;
                zoomCompleteFunction(args);
            }
        }

        function zoomCompleteFunction(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            charts = [chart1, chart2, chart3, chart4];
            for (var i = 0; i < charts.length; i++) {
                if (args.axis.series[0].chart.element.id !== charts[i].element.id) {
                    charts[i].primaryXAxis.zoomFactor = zoomFactor;
                    charts[i].primaryXAxis.zoomPosition = zoomPosition;
                    charts[i].zoomModule.isZoomed = args.axis.series[0].chart.zoomModule.isZoomed;
                    charts[i].zoomModule.isPanning = args.axis.series[0].chart.zoomModule.isPanning;
                }
            }
        }

        function chartMouseMove1(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if ((!ej.base.Browser.isDevice && !chart1.isTouch && !chart1.isChartDrag) || chart1.startMove) {
                chart3.startMove = chart4.startMove = chart2.startMove = chart1.startMove;
                chart3.showTooltip(args.x, args.y);
                chart4.showTooltip(args.x, args.y);
                chart2.showTooltip(args.x, args.y);
                chart3.showCrosshair(args.x, args.y);
                chart4.showCrosshair(args.x, args.y);
                chart2.showCrosshair(args.x, args.y);
            }
        }

        function chartMouseMove2(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if ((!ej.base.Browser.isDevice && !chart2.isTouch && !chart2.isChartDrag) || chart2.startMove) {
                chart3.startMove = chart4.startMove = chart1.startMove = chart2.startMove;
                chart3.showTooltip(args.x, args.y);
                chart4.showTooltip(args.x, args.y);
                chart1.showTooltip(args.x, args.y);
                chart3.showCrosshair(args.x, args.y);
                chart4.showCrosshair(args.x, args.y);
                chart1.showCrosshair(args.x, args.y);
            }
        }

        function chartMouseMove3(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if ((!ej.base.Browser.isDevice && !chart3.isTouch && !chart3.isChartDrag) || chart3.startMove) {
                chart4.startMove = chart1.startMove = chart2.startMove = chart3.startMove;
                chart4.showTooltip(args.x, args.y);
                chart1.showTooltip(args.x, args.y);
                chart2.showTooltip(args.x, args.y);
                chart4.showCrosshair(args.x, args.y);
                chart1.showCrosshair(args.x, args.y);
                chart2.showCrosshair(args.x, args.y);
            }
        }

        function chartMouseMove4(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if ((!ej.base.Browser.isDevice && !chart4.isTouch && !chart4.isChartDrag) || chart4.startMove) {
                chart1.startMove = chart2.startMove = chart3.startMove = chart4.startMove;
                chart1.showTooltip(args.x, args.y);
                chart2.showTooltip(args.x, args.y);
                chart3.showTooltip(args.x, args.y);
                chart1.showCrosshair(args.x, args.y);
                chart2.showCrosshair(args.x, args.y);
                chart3.showCrosshair(args.x, args.y);
            }
        }

        function chartMouseLeave1(args) {
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            chart4.hideCrosshair();
            chart3.hideCrosshair();
            chart2.hideCrosshair();
            chart4.hideTooltip();
            chart3.hideTooltip();
            chart2.hideTooltip();
        }

        function chartMouseLeave2(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            chart4.hideCrosshair();
            chart1.hideCrosshair();
            chart3.hideCrosshair();
            chart4.hideTooltip();
            chart1.hideTooltip();
            chart3.hideTooltip();
        }

        function chartMouseLeave3(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            chart4.hideCrosshair();
            chart1.hideCrosshair();
            chart2.hideCrosshair();
            chart4.hideTooltip();
            chart1.hideTooltip();
            chart2.hideTooltip();
        }

        function chartMouseLeave4(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart3.hideCrosshair();
            chart1.hideCrosshair();
            chart2.hideCrosshair();
            chart3.hideTooltip();
            chart1.hideTooltip();
            chart2.hideTooltip();
        }

        function chartMouseUp1(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if (ej.base.Browser.isDevice && chart1.startMove) {
                chart2.hideCrosshair();
                chart3.hideCrosshair();
                chart4.hideCrosshair();
                chart2.hideTooltip();
                chart3.hideTooltip();
                chart4.hideTooltip();
            }
        }

        function chartMouseUp2(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if (ej.base.Browser.isDevice && chart2.startMove) {
                chart1.hideCrosshair();
                chart3.hideCrosshair();
                chart4.hideCrosshair();
                chart1.hideTooltip();
                chart3.hideTooltip();
                chart4.hideTooltip();
            }
        }

        function chartMouseUp3(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if (ej.base.Browser.isDevice && chart3.startMove) {
                chart1.hideCrosshair();
                chart2.hideCrosshair();
                chart4.hideCrosshair();
                chart1.hideTooltip();
                chart2.hideTooltip();
                chart4.hideTooltip();
            }
        }

        function chartMouseUp4(args) {
            chart1 = document.getElementById('lineContainer1').ej2_instances[0];
            chart2 = document.getElementById('lineContainer2').ej2_instances[0];
            chart3 = document.getElementById('lineContainer3').ej2_instances[0];
            chart4 = document.getElementById('lineContainer4').ej2_instances[0];
            if (ej.base.Browser.isDevice && chart4.startMove) {
                chart1.hideCrosshair();
                chart2.hideCrosshair();
                chart3.hideCrosshair();
                chart1.hideTooltip();
                chart2.hideTooltip();
                chart3.hideTooltip();
            }
        }
    </script>  
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Synchronized Column in ASP.NET MVC Chart control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <p>
        This example visualizes the history of currency exchange rates using synchronized charts.
    </p>
}
@section Description{
    <p>
        This demo showcases the synchronization of multiple charts, with crosshair, tooltip, and zooming functionalities synchronized across the charts. Hover over or zoom in on one chart to observe the corresponding impact on the other charts as well.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over or tap on the chart.
    </p>
    <p>
        More information on the user interaction can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/chart/cross-hair-and-track-ball" aria-label="documentation section" >documentation section<span class="sr-only">opens in a new tab</span></a>.
    </p>
}
@section Title{
    <title>ASP.NET MVC Chart Synchronized Charts Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Charts</h1>
}
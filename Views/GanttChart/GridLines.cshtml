@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@{
    ViewData["Title"] = "GridLines";
}

@section ControlsSection{
    <div class="col-lg-9 control-section">

        @(Html.EJS().Gantt("GridLines").DataSource((IEnumerable<object>)ViewData["DataSource"]).Height("450px").HighlightWeekends(true).AllowSelection(true).TreeColumnIndex(1)
                .TaskFields(ts => ts.Id("TaskId").Name("TaskName").StartDate("StartDate").EndDate("EndDate").Duration("Duration").Progress("Progress")
                .Dependency("Predecessor").Child("SubTasks"))
                .Columns(col =>
                {
                    col.Field("TaskId").Width(80).Add();
                    col.Field("TaskName").Width(250).Add();
                    col.Field("StartDate").Add();
                    col.Field("EndDate").Add();
                    col.Field("Duration").Add();
                    col.Field("Predecessor").Add();
                    col.Field("Progress").Add();
                })
                .GridLines(Syncfusion.EJ2.Gantt.GridLine.Both)
                .LabelSettings(ls => ls.LeftLabel("TaskName"))
                .SplitterSettings(sp => sp.ColumnIndex(2))
                .ProjectStartDate("03/24/2024")
                .ProjectEndDate("07/06/2024")
                .Render()
        )
    </div>

    <div class="col-lg-3 property-section">
        <table id="property" title="Properties">
            <tr>
                <td style="width: 100%">
                    <div style="fontSize: 15px">
                        Grid Lines
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width: 100%;padding: 10px 10px 10px 0px">
                    <div>
                        @(Html.EJS().DropDownList("Drop").DataSource((IEnumerable<object>)ViewData["Data"])
                            .Fields(new DropDownListFieldSettings { Text = "type", Value = "id" }).Value("Both").Change("Change")
                            .Render()
                        )
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script>
        function Change(e) {
            var ganttObj = document.getElementById("GridLines").ej2_instances[0];
            var lines = e.value;
            ganttObj.gridLines = lines;
            ganttObj.refresh();
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the visibility of Gantt lines that separate the rows and columns.In this sample, you can change the gridlines from the property panel.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Grid Lines in ASP.NET MVC Gantt control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            The <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Gantt.Gantt.html#Syncfusion_EJ2_Gantt_Gantt_GridLines">GridLines</a> property is used to control the visibility of line that separates the rows and columns.
            Gantt allows us to display the following grid lines:
        </p>
        <ul>
            <li><code>None</code> - Shows no line.</li>
            <li><code>Both</code> - Shows both horizontal and vertical lines.</li>
            <li><code>Horizontal</code> - Shows the horizontal line.</li>
            <li><code>Vertical</code> - Shows the vertical line.</li>
        </ul>
        <p>
            In this demo, you can modify the visibility of gridlines by selecting values in dropdown.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Gantt Grid Lines Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Grid Lines in ASP.NET MVC Gantt Control</h1>
                }
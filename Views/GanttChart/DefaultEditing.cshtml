@using Syncfusion.EJ2
@{
    ViewData["Title"] = "DefaultEditing";
}

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @(Html.EJS().Gantt("Editing").DataSource((IEnumerable<object>)ViewData["DataSource"])
                .TaskFields(ts => ts.Id("TaskId").Name("TaskName").StartDate("StartDate").EndDate("EndDate").Duration("Duration")
                    .Progress("Progress").Dependency("Predecessor").Child("SubTasks").Notes("Notes").ResourceInfo("ResourceId"))
                .EditSettings(es => es.AllowAdding(true).AllowEditing(true).AllowDeleting(true).AllowTaskbarEditing(true).ShowDeleteConfirmDialog(true))
                .Toolbar(new List<string>() { "Add", "Edit", "Update", "Delete", "Cancel", "ExpandAll", "CollapseAll", "Indent", "Outdent" })
                .AllowSelection(true).GridLines(Syncfusion.EJ2.Gantt.GridLine.Both)
                .Height("450px").TreeColumnIndex(1).ResourceFields(rf => rf.Id("ResourceId").Name("ResourceName"))
                .Resources((IEnumerable<object>)ViewData["Resources"]).HighlightWeekends(true).TimelineSettings(tl => tl.TopTier(tt =>
                  tt.Unit(Syncfusion.EJ2.Gantt.TimelineViewMode.Week).Format("MMM dd, y")).
                BottomTier(bt => bt.Unit(Syncfusion.EJ2.Gantt.TimelineViewMode.Day))).Columns(col =>
                {
                    col.Field("TaskId").Width(80).Add();
                    col.Field("TaskName").HeaderText("Job Name").Width(250).Add();
                    col.Field("StartDate").Add();
                    col.Field("EndDate").Add();
                    col.Field("Duration").Add();
                    col.Field("Progress").Add();
                    col.Field("Predecessor").Add();
                }).LabelSettings(ls => ls.LeftLabel("TaskName")
                .RightLabel("ResourceId"))
                .EditDialogFields(edf =>
                {
                    edf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.General).Add();
                    edf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Dependency).Add();
                    edf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Resources).Add();
                    edf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Notes).Add();
                })
                .EventMarkers(em =>
                {
                    em.Day("4/17/2024").Label("Project approval and kick-off").Add();
                    em.Day("5/3/2024").Label("Foundation inspection").Add();
                    em.Day("6/7/2024").Label("Site manager inspection").Add();
                    em.Day("7/16/2024").Label("Property handover and sign-off").Add();
                })
                .ProjectStartDate("03/25/2024")
                .ProjectEndDate("07/28/2024").Created("Created").ActionBegin("ActionBegin")
                .Render()
            )
        </div>
    </div>
<script>
        var startDate
        function Created(args) {
            var gantt = document.getElementsByClassName('e-gantt')[0].ej2_instances[0];
            gantt.columns[1].validationRules = { required: true, minLength: [5, 'Task name should have a minimum length of 5 characters'] };
            gantt.columns[3].validationRules = { required: [customFn, 'Please enter a value greater than the start date.'] };
            gantt.columns[4].validationRules = { required: true };
            gantt.columns[5].validationRules = { required: true, min: 0, max: 100 };
        }
        function ActionBegin(args) {
            if (args.columnName === "EndDate" || args.requestType === "beforeOpenAddDialog" || args.requestType === "beforeOpenEditDialog") {
                startDate = args.rowData.ganttProperties.startDate;
            }
           if (args.requestType === "taskbarediting" && args.taskBarEditAction === "ChildDrag") {
                startDate = args.data.ganttProperties.startDate;
            }  
 
        }
        function customFn(args) {
            var endDate;
            var gantt = (document.getElementsByClassName('e-gantt')[0]).ej2_instances[0];
            if (args.element && args.value) {
                var dateOptions = { format: gantt.dateFormat, type: 'dateTime', skeleton: 'yMd' };
                endDate =  gantt.globalize.parseDate(args.value, dateOptions);
                if (!startDate && gantt.editModule.dialogModule['beforeOpenArgs']) {
                    startDate = gantt.editModule.dialogModule['beforeOpenArgs'].rowData['ganttProperties'].startDate;
                    endDate = (gantt.editModule.dialogModule['beforeOpenArgs'].rowData['ganttProperties'].endDate);
                }
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(0, 0, 0, 0);
            }
            return startDate <= endDate;
        }
</script>
});


}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the various phases involved in constructing a residential house, from testing the soil to handing over the fully constructed property to the owner. This also demonstrates CRUD operations in a Gantt Chart.
            You can perform CRUD operations as follows,
            <li><code>Add</code> - To add new task, click Add toolbar button</li>
            <li>
                <code>Edit </code>- To edit a task, double click a row or double click a taskbar or click toolbar Edit
                button after selected a row
            </li>
            <li><code>Indent</code> - To indent a task, click toolbar indent button after selecting a row</li>
            <li><code>Outdent</code> - To outdent a task, click toolbar outdent button after selecting a row</li>
            <li><code>Delete</code> - To delete a task, click toolbar Delete button after selected a row</li>
            <li>
                <code>Update,Cancel</code> - You can save or discard changes by click toolbar Update and Cancel button
                respectively
            </li>
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Editing in ASP.NET MVC Gantt control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            This CRUD operations can be configured in Gantt Chart using <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Gantt.Gantt.html#Syncfusion_EJ2_Gantt_Gantt_EditSettings">EditSettings</a> and <a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Gantt.GanttEditSettings.html#Syncfusion_EJ2_Gantt_GanttEditSettings_AllowTaskbarEditing">AllowTaskbarEditing</a>. Gantt Chart
            has two modes to manipulate the datasource
            <li><code>Auto</code></li>
            <li><code>Dialog</code></li>
            
            In this demo, <code>Auto</code> mode is enabled for editing. On the TreeGrid side, you can start editing any row
            by double
            clicking on it or clicking on toolbarâ€™s Edit button, then the currently selected row will be changed to edited
            state. On the chart side, you can edit the tasks using edit dialog by double clicking on the taskbars and you
            can edit the dependency connector lines using drag and drop action with connector line points available on the
            either side of taskbar. It is possible to connect parent-parent, child-child, child-parent and parent -child dependency relationships.
    <br>
        In this sample column.validationRules has been enabled for the columns. It uses the Form Validator control to define validation rules, displaying error messages for invalid field values.
   
        </p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Gantt Editing Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Editing in ASP.NET MVC Gantt Control</h1>
                }

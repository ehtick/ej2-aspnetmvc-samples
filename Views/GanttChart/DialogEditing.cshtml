@using Syncfusion.EJ2
@{
    ViewData["Title"] = "DialogEditing";
}
@section ControlsSection{
    <div class="control-section">
        @(Html.EJS().Gantt("DialogEditing")
            .DataSource((IEnumerable<object>)ViewData["DataSource"])
            .Height("650px")
            .RowHeight(46)
            .TaskbarHeight(25)
            .TreeColumnIndex(1)
            .SelectedRowIndex(0)
            .ShowColumnMenu(true)
            .TaskFields(ts => ts
                .Id("TaskId")
                .Name("TaskName")
                .StartDate("StartDate")
                .EndDate("EndDate")
                .Duration("Duration")
                .Manual("IsManual")
                .Work("Work")
                .Progress("Progress")
                .Dependency("Predecessor")
                .Child("SubTasks")
                .Segments("Segments")
                .ConstraintDate("ConstraintDate")
                .ConstraintType("ConstraintType")
                .ResourceInfo("Resources"))
            .EditSettings(es => es
                .AllowAdding(true)
                .AllowEditing(true)
                .AllowDeleting(true)
                .AllowTaskbarEditing(true)
                .ShowDeleteConfirmDialog(true)
                .Mode(Syncfusion.EJ2.Gantt.EditMode.Dialog))
            .Resources((IEnumerable<object>)ViewData["Resources"])
            .ResourceFields(rf => rf
                .Id("ResourceId")
                .Name("ResourceName")
                .Unit("Unit"))
            .ActionComplete("complete")
            .Columns(col =>
            {
                col.Field("TaskId").Add();
                col.Field("TaskName").Width(250).Add();
                col.Field("StartDate").Add();
                col.Field("EndDate").Add();
                col.Field("Duration").Add();
                col.Field("ConstraintType").Add();
                col.Field("ConstraintDate").Add();
                col.Field("IsManual").Add();
                col.Field("Work").Add();
            })
            .Toolbar(new List<string> { "Add", "Edit", "Update", "Delete" })
            .LabelSettings(ls => ls.RightLabel("TaskName"))
            .SplitterSettings(sp => sp.ColumnIndex(4))
            .ProjectStartDate("03/30/2025")
            .ProjectEndDate("08/07/2025")
            .AddDialogFields(adf =>
            {
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.General)
                   .HeaderText("General Tab")
                   .Fields(new string[] { "TaskId", "TaskName", "StartDate", "Duration", "EndDate", "Progress" })
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Dependency)
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Resources).AdditionalParams(new
                {
                    allowSorting = true,
                    allowFiltering = true,
                    allowResizing = true,
                    showColumnMenu = true,
                    columns = new List<object>
                    {
                        new { field= "ResourceId", width= 80 },
                        new { field= "ResourceName", headerText= "Resource Name", template="#columnTemplate", width= 180 },
                        new { field= "Unit", width= 92 },
                        new { field= "Role", headerText= "Role", allowEditing= false, width= 120 }
                    }
                })
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Segments)
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Advanced).Fields(new string[] { "ConstraintType", "ConstraintDate", "isManual", "Work" })
                    .Add();
            })
            .EditDialogFields(adf =>
            {
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.General)
                   .HeaderText("General Tab")
                   .Fields(new string[] { "TaskId", "TaskName", "StartDate", "Duration", "EndDate", "Progress" })
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Dependency).AdditionalParams(new
                {
                    toolbar = new List<object>
                       {
                           new { text = "Add" },
                           new { text = "Edit" },
                           new { text = "Delete"},
                           new { text = "Search" }
                       },
                    editSettings = new { allowEditing = true, allowAdding = true, allowDeleting = true },
                    searchSettings = new { fields = new string[] { "ResourceName" }, ignoreCase = true },
                    allowSorting = true,
                })
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Resources).AdditionalParams(new
                {
                    allowSorting = true,
                    allowFiltering = true,
                    allowResizing = true,
                    showColumnMenu = true,
                    columns = new List<object>
                       {
                           new { field= "ResourceId", width= 80 },
                           new { field= "ResourceName", headerText= "Resource Name", template="#columnTemplate", width= 180 },
                           new { field= "Unit", width= 92 },
                           new { field= "Role", headerText= "Role", allowEditing= false, width= 120 }
                       }
                })
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Segments)
                   .Add();
                adf.Type(Syncfusion.EJ2.Gantt.DialogFieldType.Advanced).Fields(new string[] { "ConstraintType", "ConstraintDate", "isManual", "Work" })
                    .Add();
            })
            .Render()
        )
    </div>

    <script type="text/x-template" id="columnTemplate">
        ${if(ResourceName)}
        <div class="image">
            <img src="../Content/gantt/images/${ResourceName}.png" style="height:40px;width:40px" /><div style="display:inline-block;width:100%;position:relative;${isRtl()}">${ResourceName}</div>
        </div>
        ${/if}
    </script>
    <script>
        function isRtl() {
            let gantt = document.getElementsByClassName('e-gantt')[0].ej2_instances[0];
            if (gantt.enableRtl) {
                return 'right:10px;';
            } else {
                return 'left:10px;';
            }
        }
    </script>

    <script>
        function complete(args) {
            if (args.requestType === "openAddDialog" || args.requestType === "openEditDialog") {
                var ganttObj = document.getElementById("DialogEditing").ej2_instances[0];

                // Handle Dependency Tab Customization
                var tabObj = document.getElementById("DialogEditing_Tab").ej2_instances[0];
                tabObj.selected = function (args) {
                    if (args.selectedIndex === 1) { // Dependency tab
                        var gridObj = document.getElementById("DialogEditingDependencyTabContainer").ej2_instances[0];
                        gridObj.queryCellInfo = function (args) {
                            if (args.column.field === "name") {
                                args.cell.innerText = args.data.name.substring(args.data.id.length + 1);
                            }
                        };
                        var cols = gridObj.columns;
                        cols[1].edit.write = (args) => {
                                if (args.requestType === "add") {
                                    args.rowData.uniqueId = ej.base.getUniqueID("gantt");
                                }
                                var field = "name";
                                var gantt = document.getElementById("DialogEditing").ej2_instances[0];
                                var dependencygridData = gantt.editModule.dialogModule.idCollection;
                                for (var i = 0; i < dependencygridData.length; i++) {
                                    dependencygridData[i].text = dependencygridData[i].text.substring(dependencygridData[i].id.length + 1);
                                }
                                var comboValue = "";
                                if (args.rowData[field]) {
                                    comboValue = args.rowData[field].substring(0, args.rowData.id.length);
                                }
                                var autoObj = new ej.dropdowns.ComboBox({
                                    dataSource: new ej.data.DataManager(dependencygridData),
                                    popupHeight: "180px",
                                    allowCustom: false,
                                    enableRtl: gantt.enableRtl,
                                    fields: { value: "value", text: "text" },
                                    value: comboValue,
                                    change: function (arg) {
                                        var tr = arg.element.closest("tr");
                                        var idInput = tr.querySelector("#" + gantt.element.id + "DependencyTabContainerid");
                                        if (idInput) {
                                            if (!ej.base.isNullOrUndefined(arg.itemData) && !ej.base.isNullOrUndefined(arg.item)) {
                                                idInput.value = arg.itemData.value;
                                            } else {
                                                idInput.value = "";
                                            }
                                        }
                                    },
                                    autofill: true
                                });
                                autoObj.appendTo(args.element);
                            },
                            cols[1].edit.read=  (args) => {
                                var ej2Instance = args.ej2_instances[0];
                                return ej2Instance.value + "-" + ej2Instance.text;
                            }
                            gridObj.refresh();
                        };
                };
            }
        }
    </script>
}

@section ActionDescription {
    <div id="action-description">
        <p>This sample illustrates the phases of a software development project, with tasks like analysis, design, development, testing, and documentation. This also demonstrates CRUD operations in a Gantt Chart.</p>
    </div>
}

@section Description {
    <div id="description">
        <p>This sample demonstrates how to fully customize the dialog editing interface in the ASP.NET MVC Gantt Chart using the <code><a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Gantt.GanttAddDialogFields.html">addDialogFields</a></code> and <code><a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Gantt.GanttEditDialogFields.html">editDialogFields</a></code> properties along with <code><a target="_blank" href="https://help.syncfusion.com/cr/aspnetmvc-js2/Syncfusion.EJ2.Gantt.GanttAddDialogFieldBuilder.html#Syncfusion_EJ2_Gantt_GanttAddDialogFieldBuilder_AdditionalParams_System_Object_">additionalParams</a></code>. It showcases how to override default input and grid components within each tab and organize custom fields across multiple tabs for a structured editing experience.
                The following tab-level customizations are included:</p>
		         <ul>
		        	<li><b>Dependency Tab</b> - Includes additional toolbar items and improved task naming to simplify task relationship management.</li>
                    <li><b>Resource Tab</b> - Combines resource images and names, introduces a Role column, and supports column menu options for flexible configuration.</li>
                    <li><b>Segments Tab</b> - Enhanced with extra toolbar options for efficient segment editing and control.</li>
                    <li><b>Advanced Tab</b> - Organizes Work and Task Mode input fields for quick access and improved clarity.</li>
		        </ul>
            <br/>
            <p>More information on the Essential<sup>®</sup> ASP.NET MVC Gantt Chart can be found in this <a target="_blank" href="https://ej2.syncfusion.com/aspnetmvc/documentation/gantt/managing-tasks/editing-tasks#dialog-editing">documentation section</a>.</p>
    </div>
}

@section Meta {
    <meta name="description" content="This example demonstrates the Dialog Editing in ASP.NET MVC Gantt control. Explore here for more details." />
}

@section Title {
    <title>ASP.NET MVC Gantt Dialog Editing Example - Syncfusion Demos</title>
}

@section Header {
    <h1 class="sb-sample-text">Example of Dialog Editing in ASP.NET MVC Gantt Control</h1>
}